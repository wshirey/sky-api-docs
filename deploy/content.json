{
 "pages": [
  {
   "layout": "layout-container",
   "name": "API",
   "order": 10,
   "published": true,
   "showInNav": false,
   "showBreadcrumbs": false,
   "title": "APIs",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": false,
   "showInFooter": false,
   "showInSearch": true,
   "breadcrumbs": "Api",
   "abspath": "api/index.md",
   "uri": "/api/",
   "nav_links": [
    {
     "layout": "layout-container",
     "name": "Entity Reference",
     "order": 250,
     "published": true,
     "showInNav": true,
     "showBreadcrumbs": false,
     "title": "Entity Reference",
     "entity": [
      {
       "name": "Accounts Payable",
       "description": "Describes the entity and type representations for common items that the Accounts Payable API uses.",
       "icon": "fa-university",
       "url": "/api/entity-reference/accounts-payable"
      },
      {
       "name": "Constituent",
       "description": "Describes the entity and type representations for common items that the Constituent API uses.",
       "icon": "fa-user",
       "url": "/api/entity-reference/constituent"
      },
      {
       "name": "Fundraising",
       "description": "Describes the entity and type representations for common items that the Fundraising API uses.",
       "icon": "fa-line-chart",
       "url": "/api/entity-reference/fundraising"
      },
      {
       "name": "General Ledger",
       "description": "Describes the entity and type representations for common items that the General Ledger API uses.",
       "icon": "fa-book",
       "url": "/api/entity-reference/general-ledger"
      },
      {
       "name": "Gift",
       "description": "Describes the entity and type representations for common items that the Gift API uses.",
       "icon": "fa-gift",
       "url": "/api/entity-reference/gift"
      },
      {
       "name": "Opportunity",
       "description": "Describes the entity and type representations for common items that the Opportunity API uses.",
       "icon": "fa-handshake-o",
       "url": "/api/entity-reference/opportunity"
      },
      {
       "name": "Treasury",
       "description": "Describes the entity and type representations for common items that the Treasury API uses.",
       "icon": "fa-money",
       "url": "/api/entity-reference/treasury"
      }
     ],
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Api Entity-reference",
     "abspath": "api/entity-reference/index.md",
     "uri": "/api/entity-reference/",
     "nav_links": [
      {
       "layout": "layout-container",
       "name": "Accounts Payable Entity Reference",
       "title": "Accounts Payable Entity Reference",
       "order": 10,
       "published": true,
       "showInNav": true,
       "back_to_top": true,
       "showBreadcrumbs": true,
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Api Entity-reference Accounts-payable",
       "abspath": "api/entity-reference/accounts-payable/index.html",
       "uri": "/api/entity-reference/accounts-payable/",
       "text": " "
      },
      {
       "layout": "layout-container",
       "name": "Constituent Entity Reference",
       "title": "Constituent Entity Reference",
       "order": 20,
       "published": true,
       "showInNav": true,
       "back_to_top": true,
       "showBreadcrumbs": true,
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Api Entity-reference Constituent",
       "abspath": "api/entity-reference/constituent/index.html",
       "uri": "/api/entity-reference/constituent/",
       "text": " "
      },
      {
       "layout": "layout-container",
       "name": "Fundraising Entity Reference",
       "title": "Fundraising Entity Reference",
       "order": 30,
       "published": true,
       "showInNav": true,
       "back_to_top": true,
       "showBreadcrumbs": true,
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Api Entity-reference Fundraising",
       "abspath": "api/entity-reference/fundraising/index.html",
       "uri": "/api/entity-reference/fundraising/",
       "text": " "
      },
      {
       "layout": "layout-container",
       "name": "General Ledger Entity Reference",
       "title": "General Ledger Entity Reference",
       "order": 40,
       "published": true,
       "showInNav": true,
       "back_to_top": true,
       "showBreadcrumbs": true,
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Api Entity-reference General-ledger",
       "abspath": "api/entity-reference/general-ledger/index.html",
       "uri": "/api/entity-reference/general-ledger/",
       "text": " "
      },
      {
       "layout": "layout-container",
       "name": "Gift Entity Reference",
       "title": "Gift Entity Reference",
       "order": 50,
       "published": true,
       "showInNav": true,
       "back_to_top": true,
       "showBreadcrumbs": true,
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Api Entity-reference Gift",
       "abspath": "api/entity-reference/gift/index.html",
       "uri": "/api/entity-reference/gift/",
       "text": " "
      },
      {
       "layout": "layout-container",
       "name": "School Entity Reference",
       "title": "School Entity Reference",
       "order": 60,
       "published": true,
       "showInNav": true,
       "back_to_top": true,
       "showBreadcrumbs": true,
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Api Entity-reference K12",
       "abspath": "api/entity-reference/k12/index.html",
       "uri": "/api/entity-reference/k12/",
       "text": " "
      },
      {
       "layout": "layout-container",
       "name": "Opportunity Entity Reference",
       "title": "Opportunity Entity Reference",
       "order": 70,
       "published": true,
       "showInNav": true,
       "back_to_top": true,
       "showBreadcrumbs": true,
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Api Entity-reference Opportunity",
       "abspath": "api/entity-reference/opportunity/index.html",
       "uri": "/api/entity-reference/opportunity/",
       "text": " "
      },
      {
       "layout": "layout-container",
       "name": "Treasury Entity Reference",
       "title": "Treasury Entity Reference",
       "order": 80,
       "published": true,
       "showInNav": true,
       "back_to_top": true,
       "showBreadcrumbs": true,
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Api Entity-reference Treasury",
       "abspath": "api/entity-reference/treasury/index.html",
       "uri": "/api/entity-reference/treasury/",
       "text": " "
      }
     ],
     "text": " Entity Reference Accounts Payable Describes the entity and type representations for common items that the Accounts Payable API uses. Constituent Describes the entity and type representations for common items that the Constituent API uses. Fundraising Describes the entity and type representations for common items that the Fundraising API uses. General Ledger Describes the entity and type representations for common items that the General Ledger API uses. Gift Describes the entity and type representations for common items that the Gift API uses. Opportunity Describes the entity and type representations for common items that the Opportunity API uses. Treasury Describes the entity and type representations for common items that the Treasury API uses. "
    }
   ],
   "text": " API Endpoint Reference Explore the endpoints available to you with the SKY API. Entity Reference Describes the entity and type representations for common items that the SKY API uses. Products Learn about and subscribe to the products offered through the SKY API. "
  },
  {
   "layout": "layout-container",
   "name": "Entity Reference",
   "order": 250,
   "published": true,
   "showInNav": true,
   "showBreadcrumbs": false,
   "title": "Entity Reference",
   "entity": [
    {
     "name": "Accounts Payable",
     "description": "Describes the entity and type representations for common items that the Accounts Payable API uses.",
     "icon": "fa-university",
     "url": "/api/entity-reference/accounts-payable"
    },
    {
     "name": "Constituent",
     "description": "Describes the entity and type representations for common items that the Constituent API uses.",
     "icon": "fa-user",
     "url": "/api/entity-reference/constituent"
    },
    {
     "name": "Fundraising",
     "description": "Describes the entity and type representations for common items that the Fundraising API uses.",
     "icon": "fa-line-chart",
     "url": "/api/entity-reference/fundraising"
    },
    {
     "name": "General Ledger",
     "description": "Describes the entity and type representations for common items that the General Ledger API uses.",
     "icon": "fa-book",
     "url": "/api/entity-reference/general-ledger"
    },
    {
     "name": "Gift",
     "description": "Describes the entity and type representations for common items that the Gift API uses.",
     "icon": "fa-gift",
     "url": "/api/entity-reference/gift"
    },
    {
     "name": "Opportunity",
     "description": "Describes the entity and type representations for common items that the Opportunity API uses.",
     "icon": "fa-handshake-o",
     "url": "/api/entity-reference/opportunity"
    },
    {
     "name": "Treasury",
     "description": "Describes the entity and type representations for common items that the Treasury API uses.",
     "icon": "fa-money",
     "url": "/api/entity-reference/treasury"
    }
   ],
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Api Entity-reference",
   "abspath": "api/entity-reference/index.md",
   "uri": "/api/entity-reference/",
   "nav_links": [
    {
     "layout": "layout-container",
     "name": "Accounts Payable Entity Reference",
     "title": "Accounts Payable Entity Reference",
     "order": 10,
     "published": true,
     "showInNav": true,
     "back_to_top": true,
     "showBreadcrumbs": true,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Api Entity-reference Accounts-payable",
     "abspath": "api/entity-reference/accounts-payable/index.html",
     "uri": "/api/entity-reference/accounts-payable/",
     "text": " "
    },
    {
     "layout": "layout-container",
     "name": "Constituent Entity Reference",
     "title": "Constituent Entity Reference",
     "order": 20,
     "published": true,
     "showInNav": true,
     "back_to_top": true,
     "showBreadcrumbs": true,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Api Entity-reference Constituent",
     "abspath": "api/entity-reference/constituent/index.html",
     "uri": "/api/entity-reference/constituent/",
     "text": " "
    },
    {
     "layout": "layout-container",
     "name": "Fundraising Entity Reference",
     "title": "Fundraising Entity Reference",
     "order": 30,
     "published": true,
     "showInNav": true,
     "back_to_top": true,
     "showBreadcrumbs": true,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Api Entity-reference Fundraising",
     "abspath": "api/entity-reference/fundraising/index.html",
     "uri": "/api/entity-reference/fundraising/",
     "text": " "
    },
    {
     "layout": "layout-container",
     "name": "General Ledger Entity Reference",
     "title": "General Ledger Entity Reference",
     "order": 40,
     "published": true,
     "showInNav": true,
     "back_to_top": true,
     "showBreadcrumbs": true,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Api Entity-reference General-ledger",
     "abspath": "api/entity-reference/general-ledger/index.html",
     "uri": "/api/entity-reference/general-ledger/",
     "text": " "
    },
    {
     "layout": "layout-container",
     "name": "Gift Entity Reference",
     "title": "Gift Entity Reference",
     "order": 50,
     "published": true,
     "showInNav": true,
     "back_to_top": true,
     "showBreadcrumbs": true,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Api Entity-reference Gift",
     "abspath": "api/entity-reference/gift/index.html",
     "uri": "/api/entity-reference/gift/",
     "text": " "
    },
    {
     "layout": "layout-container",
     "name": "School Entity Reference",
     "title": "School Entity Reference",
     "order": 60,
     "published": true,
     "showInNav": true,
     "back_to_top": true,
     "showBreadcrumbs": true,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Api Entity-reference K12",
     "abspath": "api/entity-reference/k12/index.html",
     "uri": "/api/entity-reference/k12/",
     "text": " "
    },
    {
     "layout": "layout-container",
     "name": "Opportunity Entity Reference",
     "title": "Opportunity Entity Reference",
     "order": 70,
     "published": true,
     "showInNav": true,
     "back_to_top": true,
     "showBreadcrumbs": true,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Api Entity-reference Opportunity",
     "abspath": "api/entity-reference/opportunity/index.html",
     "uri": "/api/entity-reference/opportunity/",
     "text": " "
    },
    {
     "layout": "layout-container",
     "name": "Treasury Entity Reference",
     "title": "Treasury Entity Reference",
     "order": 80,
     "published": true,
     "showInNav": true,
     "back_to_top": true,
     "showBreadcrumbs": true,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Api Entity-reference Treasury",
     "abspath": "api/entity-reference/treasury/index.html",
     "uri": "/api/entity-reference/treasury/",
     "text": " "
    }
   ],
   "text": " Entity Reference Accounts Payable Describes the entity and type representations for common items that the Accounts Payable API uses. Constituent Describes the entity and type representations for common items that the Constituent API uses. Fundraising Describes the entity and type representations for common items that the Fundraising API uses. General Ledger Describes the entity and type representations for common items that the General Ledger API uses. Gift Describes the entity and type representations for common items that the Gift API uses. Opportunity Describes the entity and type representations for common items that the Opportunity API uses. Treasury Describes the entity and type representations for common items that the Treasury API uses. "
  },
  {
   "layout": "layout-container",
   "name": "Accounts Payable Entity Reference",
   "title": "Accounts Payable Entity Reference",
   "order": 10,
   "published": true,
   "showInNav": true,
   "back_to_top": true,
   "showBreadcrumbs": true,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Api Entity-reference Accounts-payable",
   "abspath": "api/entity-reference/accounts-payable/index.html",
   "uri": "/api/entity-reference/accounts-payable/",
   "text": " "
  },
  {
   "layout": "layout-container",
   "name": "Constituent Entity Reference",
   "title": "Constituent Entity Reference",
   "order": 20,
   "published": true,
   "showInNav": true,
   "back_to_top": true,
   "showBreadcrumbs": true,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Api Entity-reference Constituent",
   "abspath": "api/entity-reference/constituent/index.html",
   "uri": "/api/entity-reference/constituent/",
   "text": " "
  },
  {
   "layout": "layout-container",
   "name": "Fundraising Entity Reference",
   "title": "Fundraising Entity Reference",
   "order": 30,
   "published": true,
   "showInNav": true,
   "back_to_top": true,
   "showBreadcrumbs": true,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Api Entity-reference Fundraising",
   "abspath": "api/entity-reference/fundraising/index.html",
   "uri": "/api/entity-reference/fundraising/",
   "text": " "
  },
  {
   "layout": "layout-container",
   "name": "General Ledger Entity Reference",
   "title": "General Ledger Entity Reference",
   "order": 40,
   "published": true,
   "showInNav": true,
   "back_to_top": true,
   "showBreadcrumbs": true,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Api Entity-reference General-ledger",
   "abspath": "api/entity-reference/general-ledger/index.html",
   "uri": "/api/entity-reference/general-ledger/",
   "text": " "
  },
  {
   "layout": "layout-container",
   "name": "Gift Entity Reference",
   "title": "Gift Entity Reference",
   "order": 50,
   "published": true,
   "showInNav": true,
   "back_to_top": true,
   "showBreadcrumbs": true,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Api Entity-reference Gift",
   "abspath": "api/entity-reference/gift/index.html",
   "uri": "/api/entity-reference/gift/",
   "text": " "
  },
  {
   "layout": "layout-container",
   "name": "School Entity Reference",
   "title": "School Entity Reference",
   "order": 60,
   "published": true,
   "showInNav": true,
   "back_to_top": true,
   "showBreadcrumbs": true,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Api Entity-reference K12",
   "abspath": "api/entity-reference/k12/index.html",
   "uri": "/api/entity-reference/k12/",
   "text": " "
  },
  {
   "layout": "layout-container",
   "name": "Opportunity Entity Reference",
   "title": "Opportunity Entity Reference",
   "order": 70,
   "published": true,
   "showInNav": true,
   "back_to_top": true,
   "showBreadcrumbs": true,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Api Entity-reference Opportunity",
   "abspath": "api/entity-reference/opportunity/index.html",
   "uri": "/api/entity-reference/opportunity/",
   "text": " "
  },
  {
   "layout": "layout-container",
   "name": "Treasury Entity Reference",
   "title": "Treasury Entity Reference",
   "order": 80,
   "published": true,
   "showInNav": true,
   "back_to_top": true,
   "showBreadcrumbs": true,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Api Entity-reference Treasury",
   "abspath": "api/entity-reference/treasury/index.html",
   "uri": "/api/entity-reference/treasury/",
   "text": " "
  },
  {
   "layout": "layout-sidebar",
   "name": "Documentation",
   "description": "Docs to learn our APIs.",
   "order": 200,
   "published": true,
   "showInNav": true,
   "showInHeader": true,
   "showInFooter": false,
   "showNavDropdown": true,
   "title": "Documentation",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInSearch": true,
   "breadcrumbs": "Docs",
   "abspath": "docs/index.md",
   "uri": "/docs/",
   "nav_links": [
    {
     "layout": "layout-sidebar",
     "name": "Add-ins",
     "order": 250,
     "published": true,
     "showInNav": true,
     "title": "Add-ins",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Addins",
     "abspath": "docs/addins/index.md",
     "uri": "/docs/addins/",
     "nav_links": [
      {
       "layout": "layout-sidebar",
       "name": "Common issues with add-ins",
       "order": 60,
       "published": true,
       "showInNav": true,
       "title": "Common add-in issues",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Addins Common-issues",
       "abspath": "docs/addins/common-issues/index.md",
       "uri": "/docs/addins/common-issues/",
       "text": " Edit in GitHub Common issues with add-ins\nAdd-in does not appear\nAdd-ins support conditional visibility, which allows for an add-in to perform initialization logic to determine whether it should be shown or not. By default, add-ins are hidden and must inform the parent page when it's time to be shown. This happens as part of the init callback from the host application.\nUsing the information provided in the init arguments, the add-in should determine if and how it should be rendered. Then it should call the ready callback, informing the host page.\nvar client = new AddinClient({\ncallbacks: { init: (args) => { args.ready({ showUI: true, title: 'My Custom Tile Title' }); }\n}\n}); For more information, see the Add-in Client JavaScript library "
      },
      {
       "layout": "layout-sidebar",
       "name": "Concepts",
       "order": 30,
       "published": true,
       "showInNav": true,
       "back_to_top": true,
       "title": "Concepts",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Addins Concepts",
       "abspath": "docs/addins/concepts/index.md",
       "uri": "/docs/addins/concepts/",
       "nav_links": [
        {
         "layout": "layout-sidebar",
         "name": "Add-in single-sign-on (SSO)",
         "order": 40,
         "published": true,
         "showInNav": true,
         "title": "Add-in single-sign-on (SSO)",
         "sortKey": "order",
         "sortDirection": "asc",
         "showInHeader": true,
         "showInFooter": true,
         "showInSearch": true,
         "breadcrumbs": "Docs Addins Concepts Addin-sso",
         "abspath": "docs/addins/concepts/addin-sso/index.md",
         "uri": "/docs/addins/concepts/addin-sso/",
         "text": " Edit in GitHub Add-in single-sign-on (SSO)\nSKY add-ins support a single-sign-on (SSO) mechanism that can be used to correlate the current Blackbaud user with a user in the add-in's native system.\nWithin the Add-in Client JavaScript library, the AddinClient class provides a getAuthtoken function for getting a short-lived \"user identity token\" from the host application. This token is a signed value that is issued to the SKY API application and represents the Blackbaud user's identity.\nThe general flow is that when an add-in is initiated, it can request a user identity token from the host page using the getAuthtoken function. The host will in turn request a user identity token from the SKY API OAuth 2.0 service. The user identity token (a JWT), will be addressed to the SKY API application and will contain the Blackbaud user's unique identifier. The OAuth service will return the token to the host, and the host will pass the token to the add-in. The add-in can then pass the user identity token (along with the environment ID provided as part of the initial context when the add-in is instantiated) to its own backend, where it can be validated and used to look up a user in the add-in's native system. If a user mapping exists, then the add-in can consider the user logged in and immediately display content to the user. If no user mapping exists, the add-in can prompt the user to login to the add-in's native system. Once the user's identity in the native system is known, the add-in can persist the user mapping so that on subsequent loads the user doesn't have to log in again (even across devices).\nNote that the user identity token is signed by the SKY API OAuth 2.0 service, but it cannot be used to make calls to the SKY API. It is purely used to convey the user's identity to the add-in. In order to make SKY API calls, a proper SKY API access token must be obtained.\nThis flow is illustrated below: Add-ins can make the following request upon initialization to obtain a user identity token (typically handled within the init callback):\nvar client = new AddinClient({...});\nclient.getAuthToken().then((token) => { var userIdentityToken = token; . . .\n}); The following string represents a sample user identity token returned by the getAuthToken function: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjREVjZzVkxIM0FtU1JTbUZqMk04Wm5wWHU3WSJ9.eyJuYW1laWQiOiIxMjM0ZjVjNC1iOGRhLTQxYWQtYjAzMy1hMGU5ZWY3ZGI3OTkiLCJpc3MiOiJodHRwczovL29hdXRoMi5za3kuYmxhY2tiYXVkLmNvbS8iLCJhdWQiOiJiOWEwMmE0OS0wNGNiLTRiOWMtYTkwYy1kMjYyODcxYjU0N2QiLCJleHAiOjE1MjE1NzUxNTAsIm5iZiI6MTUyMTU3NDg1MH0.Cfy4VkLUyP_tvvo8UqswiYtOdQ3Tlj0CJLgoW-up4Ns9p4R4qKBv8kJJ8WPRTKFlVNTuBWdMrQ1I07oSuiQ Here's a decoded version of the above user identity token:\n{ \"nameid\": \"1234f5c4-b8da-41ad-b033-a0e9ef7db799\", \"iss\": \"https://oauth2.sky.blackbaud.com/\", \"aud\": \"b9a02a49-04cb-4b9c-a90c-d262871b547d\", \"exp\": 1521575150, \"nbf\": 1521574850\n} Notice that the aud claim indicates the intended audience (the SKY API application that owns the add-in), and the nameid claim contains the user's Blackbaud ID.\nValidating the user identity token (UIT)\nBefore looking for a user mapping, add-in developers should first validate the signature of the UIT against the OpenIDConnect endpoint within SKY API OAuth 2.0 service. This prevents certain types of attack vectors and provides a mechanism for the add-in to securely convey the Blackbaud user's identity to its own backend. The SKY API OpenIDConnect configuration can be found at: https://oauth2.sky.blackbaud.com/.well-known/openid-configuration.\nDevelopers building add-ins in .NET can make use of a Blackbaud-provided library to assist with validating the user identity token. This library is distributed as a NuGet package named Blackbaud.Addin.TokenAuthentication.\nMore information on how to use this library can be found in the readme.txt:\nSample\nThe follow sample demonstrates code that validates the raw token value obtained from the host application using the Blackbaud.Addin.TokenAuthentication library:\n// this represents the user identity token returned from getAuthToken()\nvar rawToken = \"(raw token value)\"; // this is the ID of the developer's SKY API application\nvar applicationId = \"(some application ID)\"; // create and validate the user identity token\nUserIdentityToken uit;\ntry\n{ uit = await UserIdentityToken.ParseAsync(rawToken, applicationId); // if valid, the UserId property contains the Blackbaud user's ID var userId = uit.UserId;\n}\ncatch (TokenValidationException ex)\n{ // process the exception\n} Once the token has been validated, the add-in's backend will know the Blackbaud user ID and can determine if a user mapping exists for a user in the add-in's native system. If a mapping exists, then the add-in's backend can immediately present the content for the add-in. If no user mapping exists, the add-in can prompt the user to login.\nCorrelating Blackbaud users with external systems\nFor proper correlation with external systems, it is important to understand how Blackbaud models our customer base. The following list describes several concepts within the data model: Legal entity - We use the term legal entity to represent a top-level customer record in the system. This could be a specific non-profit organization, an individual change agent, or even a Partner ISV.\nEnvironment - An environment is a logical grouping of products and services that are available to a legal entity. You can think of an environment as a container of various Blackbaud products and services - it is the unifying construct that faciltiates the inter-communication between those products and services. A legal entity will typically have at least one environment, but some legal entities may have multiple environments used to serve various purposes (like testing, staging, production, regional chapters, etc.).\nUser - The term user refers to a specific Blackbaud ID user account. Within this data model, a single Blackbaud user can have access to multiple environments and potentially access to environments across multiple organizations. Therefore, it is important to properly consider both User and Environment when establishing a link with an external system. At runtime, the environment ID will be provided as part of the args object, and your add-in can request a user identity token using the getAuthToken method of the AddinClient class. Note that details about the legal entity, environment, and user are returned as part of the /token endpoint response when obtaining SKY API access token. For more information, see step 5 of the Authorization Code Flow documentation, or step 3 of the Implicit Flow documentation. Important! Be sure to properly account for these concepts when presenting related data from your system. "
        },
        {
         "layout": "layout-sidebar",
         "name": "Add-in capabilities",
         "order": 30,
         "published": true,
         "showInNav": true,
         "title": "Add-in capabilities",
         "sortKey": "order",
         "sortDirection": "asc",
         "showInHeader": true,
         "showInFooter": true,
         "showInSearch": true,
         "breadcrumbs": "Docs Addins Concepts Capabilities",
         "abspath": "docs/addins/concepts/capabilities/index.md",
         "uri": "/docs/addins/concepts/capabilities/",
         "text": " Edit in GitHub Add-in capabilities\nShowing a modal\nUsing the Add-in Client JavaScript library, SKY Add-ins are capable of launching a \"modal\" user experience to show more details or gather additional input from the user. The modal will be rendered in a separate full-screen iframe to maximize the available real estate (meaning, it will not be scoped to the bounds of the add-in's initial iframe).\nTo launch a modal, call the showModal function on the client, passing the URL for the modal and any context data needed by the modal:\nvar client = new AddinClient({...}); // To launch a modal, call the showModal method\nclient.showModal({ url: '<modal-addin-url>', context: { /* arbitrary context object to pass to modal */ }\n}); The modal add-in\nThe host page will show a full-screen mask element to block user input, and then launch a full-screen iframe for the URL provided. The modal iframe will be loaded in the same way it does for other types of add-ins. The modal page must also pull in the SKY Add-in Client library and make use of the AddinClient class.\nThe modal add-in will be responsible for rendering the modal element itself (including any chrome around the modal content). To create a native-looking modal experience, the modal add-in may set the page body background to transparent and immediately launch a SKY UX modal within its full screen iframe.\nAs with a typical add-in, the modal add-in should register for the init callback and will receive the envId in the arguments. The context field for arguments will match the context object passed into the showModal call from the parent add-in. Note that this is crossing iframes so the object has been serialized and deserialized. It can be used for passing data but not functions.\nClosing the modal\nThe modal add-in (not the parent add-in) is responsible for closing itself using the closeModal function on the AddinClient. It is able to pass context information back to the parent add-in:\n// Modal add-in rendered in full screen iframe\nvar client = new AddinClient({...});\nclient.closeModal({ context: { /* arbitrary context object to pass to parent add-in */ }\n}); The parent add-in can listen to the close event via the modalClosed Promise returned from showModal. The Promise will resolve when the modal is closed, and will include the context data returned from the modal:\n// Parent add-in launching a modal\nvar client = new AddinClient({...}); // provide some context values from the parent add-in to the modal add-in\nvar modalContext = { someProperty: \"Foo\", anotherProperty: \"Bar\"\n}; client.showModal({ url: '<modal-addin-url>', context: modalContext\n}).modalClosed.then((context) => { // context represents data returned by the closeModal method\n}); Navigate the parent page\nAn add-in can choose to navigate the parent page based on user interactions. To do so, call the navigate method on the AddinClient object. This function takes an object argument with property url for where to navigate. A fully qualified url should be used:\nvar client = new AddinClient({...});\nclient.navigate({ url: '<target_url>' }); Opening the Blackbaud help window\nAn add-in can instruct the parent page to display the Help flyout window, and specify which page to display. To do this, call the openHelp method on the AddinClient object. This function takes an object argument with property helpKey for the name of the help tab to display. A single .html file should be named.\nvar client = new AddinClient({...});\nclient.openHelp({ helpKey: '<target_page>.html' }); "
        },
        {
         "layout": "layout-sidebar",
         "name": "Connecting to SKY API",
         "order": 50,
         "published": true,
         "showInNav": true,
         "back_to_top": true,
         "title": "Connecting to SKY API",
         "sortKey": "order",
         "sortDirection": "asc",
         "showInHeader": true,
         "showInFooter": true,
         "showInSearch": true,
         "breadcrumbs": "Docs Addins Concepts Connecting-to-skyapi",
         "abspath": "docs/addins/concepts/connecting-to-skyapi/index.md",
         "uri": "/docs/addins/concepts/connecting-to-skyapi/",
         "text": " Edit in GitHub Connecting to SKY API\nIn some cases, the contextual information made available to your add-in at runtime (the user's ID, the environment ID, and the current extension point context object) may be sufficient for your needs. Your add-in can surface contextual information from your system based on those runtimes values.\nIn other cases however, your add-in may need to make calls to SKY API in order to function properly. To call the SKY API, your add-in will need a SKY API access token; this requirement is in place to ensure proper security and handling of customer data. If your web application already has an access token for the current user and environment (context values provided at runtime), then you can use it to make calls to the SKY API (refreshing the token if needed). If not, you have some options for how your add-in can obtain a SKY API access token. Degrade your add-in's user interface\nYou might choose to degrade your add-in's user experience if your application has not acquired a SKY API access token for the current user and environment. You can simply provide a link to your web application within your add-in's user interface, and when the user navigates to your web application you can present a \"Connect to SKY API\" button and initiate the OAuth process.\nPrompt to connect to SKY API\nAlternately, you might choose to have your add-in initiate the OAuth process by surfacing a \"Connect to SKY API\" button in the add-in's user interface. Choose the OAuth flow that is most applicable for your scenario - the Authorization Code Flow is intended for server-to-server communication and results in an access token that can be refreshed once it has expred. The Implicit Flow is intended for SKY API calls from the client, and access tokens obtained from this flow are not refresh-able once expired.\nWhile more complex, we recommend using the Authorization Code flow because of the more secure handling of your application's \"secret\", and the ability to refresh the access token once it has expired. In any case, obtaining a SKY API access token for the current user and environment can be a one-time user-interactive operation that mimics functionality available in your full-blown web site.\nInitiate OAuth\nTo properly initiate the SKY API OAuth process, your add-in should expect to include a state parameter that will be used to prevent against cross-site request forgery (CSRF) attacks. As discussed in the FAQ, this value will be echoed back to your application's redirect endpoint when the user provides consent, and your application should expect to validate that the value echoed originated from your system.\nThe following code sample shows a very basic technique of acquiring a SKY API access token. This code executes on the client and works by showing a popup window that navigates to a /skyapi/authorize page within the add-in's web application. Within this endpoint (server code not shown), a state parameter value is generated, and the response can return a 302 Redirect to the SKY API Authorization page (including the state parameter). The popup window will follow the redirect, and the user will be able to provide consent for your application. Upon consent, the browser will be redirected again - this time to your application's registered redirect URI. The response from this endpoint in your web application can include some script that closes the popup browser window:\nfunction connectToSkyApi() { // this code starts within the user interface of the add-in - it launches a popup // and navigates to an endpoint in the add-in's backend to properly establish a // state parameter and initiate the SKY API OAuth process. var url = \"/skyapi/authorize\" + \"?token=\" + userIdentityToken + \"&envid=\" + initialArgs.envId; var child = window.open(url, '_blank', 'toolbar=0,status=0,width=625,height=500'); var timer = setInterval(checkChild, 500); // when the user has provided consent, your application's redirect URI endpoint // can include script that will // close the browser window. function checkChild() { if (child.closed) { clearInterval(timer); // if the user provided consent, the add-in's backend will have an access token for the user } } } Note that the user identity token is provided as well, so that your add-in's backend can ensure that it is being called from your front-end code.\nLimit the scope of consent to the current environment\nAs mentioned in the Add-in single-sign-on documentation, a given Blackbaud user may have access to multiple environments, even spanning multiple organizations.\nWhen building the redirect to the SKY API Authorization page, you'll want to limit the scope of the user's consent to the \"current\" environment, which is made available at runtime via the args object provided to the init callback. The SKY API Authorization page supports an optional query parameter named environment_id that can be used to limit the scope of consent to the current environment. This query parameter simply provides a hint to the Authorization page to filter the list of eligble environments to the current environment.\nTo make use of this, when your add-in's web application builds the redirect to the SKY API Authorization page, be sure to include the environment_id parameter:\nhttps://oauth2.apim.blackbaud.com/authorization?\nresponse_type=code\n&client_id=YOURCLIENTID\n&redirect_uri=YOURREDIRECTURI\n&state=YOURSTATEVALUE\n&environment_id=YOURENVIRONMENTID Important! If you omit this parameter, all environments accessible by the user will appear on the consent page, which could result in the user choosing an environment other than the one your add-in in operating within.\nProtection against clickjacking\nTo protect against clickjacking attacks, the SKY API Authorization page will be updated to prevent being rendered within an iframe. This means your add-in will not be able to initiate the OAuth process within its own iframe. You'll need to initiate the OAuth process by launching a separate browser window as shown above.\nFor more information on initiating the OAuth process, see Authorization. "
        },
        {
         "layout": "layout-sidebar",
         "name": "Extension points",
         "order": 10,
         "published": true,
         "showInNav": true,
         "back_to_top": true,
         "title": "Extension points",
         "sortKey": "order",
         "sortDirection": "asc",
         "showInHeader": true,
         "showInFooter": true,
         "showInSearch": true,
         "breadcrumbs": "Docs Addins Concepts Extension-points",
         "abspath": "docs/addins/concepts/extension-points/index.md",
         "uri": "/docs/addins/concepts/extension-points/",
         "text": " Edit in GitHub Extension points\nEach location within the Blackbaud application user interface that can be customized is known as an extension point. The extension point represents a named location in the product where add-ins can be rendered, and it defines both the \"class\" of add-in (tile, button, tab, etc.), as well as the shape of the context values that will be provided at runtime. As described in the SKY Addin Client library documentation, the context values for the extension point are made available to add-ins as part of the args object sent to the init callback function: // BBSkyAddinClient is global here. var client = new BBSkyAddinClient.AddinClient({ callbacks: { init: (args) => { // the context values are provided as part of the args object context = args.context; // most extension points provide the current record ID currentRecordId = context.recordId; ... } } }); Each extension point defines its own \"context\", which represents the initial set of values that will be made available at runtime. The context represents a contract with consumers (and thus it will be backwards compatible with future changes). For example, the Constituent Tile Dashboard defines the context as containing a recordId property representing the system record ID of the current constituent. This means that, for constituent tiles, the following JSON shape will be made available through the context object at runtime:\n{ \"recordId\": \"280\"\n} Additional contextual information about the current record can be obtained through SKY API as needed based on the initial set of context values.\nThe following section describes the extension points that have been defined to date:\nConstituent Extension point Notes Constituent Tile Dashboard Tile dashboard on the constituent record page The context object will contain the following properties: Property Description recordId The system record ID of the current constituent Gift Extension point Notes Gift Tile Dashboard Tile dashboard on the gift record page The context object will contain the following properties: Property Description recordId The system record ID of the current gift Payables Extension point Notes Invoice Tile Dashboard Tile dashboard on the invoice record page The context object will contain the following properties: Property Description recordId The system record ID of the current invoice Vendor Tile Dashboard Tile dashboard on the vendor record page The context object will contain the following properties: Property Description recordId The system record ID of the current vendor Purchase Order Tile Dashboard Tile dashboard on the purchase order record page The context object will contain the following properties: Property Description recordId The system record ID of the current purchase order General Ledger Extension point Notes Account Tile Dashboard Tile dashboard on the purchase order record page The context object will contain the following properties: Property Description recordId The system record ID of the current account Project Tile Dashboard Tile dashboard on the project record page The context object will contain the following properties: Property Description recordId The system record ID of the current project Journal Entry Batch Tile Dashboard Tile dashboard on the journal entry batch record page The context object will contain the following properties: Property Description recordId The system record ID of the current journal entry batch Treasury Extension point Notes Bank Account Tile Dashboard Tile dashboard on the bank account record page The context object will contain the following properties: Property Description recordId The system record ID of the current bank account "
        }
       ],
       "text": " "
      },
      {
       "layout": "layout-sidebar",
       "name": "Get started",
       "order": 20,
       "published": true,
       "showInNav": true,
       "title": "Get started",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Addins Get-started",
       "abspath": "docs/addins/get-started/index.md",
       "uri": "/docs/addins/get-started/",
       "nav_links": [
        {
         "layout": "layout-sidebar",
         "name": "Create an Add-in",
         "order": 100,
         "published": true,
         "showInNav": true,
         "title": "Create an Add-in",
         "sortKey": "order",
         "sortDirection": "asc",
         "showInHeader": true,
         "showInFooter": true,
         "showInSearch": true,
         "breadcrumbs": "Docs Addins Get-started Createaddin",
         "abspath": "docs/addins/get-started/createaddin/index.md",
         "uri": "/docs/addins/get-started/createaddin/",
         "text": " Edit in GitHub Create an Add-in\nTo create a SKY Add-in, you'll need to build and deploy your add-in's web application and then register the URL of your add-in as part of your SKY API application. When Blackbaud customers enable your application, users will see the add-in(s) you've defined. Before you begin, make sure you've created a Blackbaud developer account as covered in the Getting Started guide. You'll also need a registered SKY API application, as covered in the Create an Application guide. Build your add-in\nSince add-ins are web applications, you can use any framework/tech stack desired, both client-side and server-side. For example, you can use ASP.NET, PHP, Node.js, MVC, Angular, React, etc. To see an example of an add-in that uses plain HTML, CSS, and JavaScript, see our Hello World sample add-in walk-through.\nA requirement for SKY Add-ins is that the web application must include the Add-in Client JavaScript library on the page and instantiate the AddinClient class in order to facilitate the interop with the host application. This library is available as an npm package, and more details can be found in the Readme.\nAt runtime, the add-in's web page will be rendered in a sandboxed iframe within the host application. Note that add-ins are hidden by default until they are ready to be shown. This gives the add-in an opportunity to perform any necessary initialization and logic to determine whether it should be visible or remain hidden. When the add-in is ready to be shown, it will call the ready method provided in the init callback: // BBSkyAddinClient is global here. var client = new BBSkyAddinClient.AddinClient({ callbacks: { init: (args) => { // perform any initialization work here... // inform the host page that the add-in is ready to be shown args.ready({ showUI: true, title: 'My Custom Tile' }); } } }); Deploy your add-in\nIn order to test your add-in, you can either deploy your web application to the cloud or serve it locally. Note that for local development, you’ll need to use HTTPS and have SSL configured to avoid mixed content problems in the browser. For production, your add-in's web application can be deployed to any cloud, and you control when and how your application is updated.\nRegister your add-in\nAdd-ins are associated with SKY API applications and are registered by providing some additional metadata about the add-in within the SKY API developer portal. Important! Performing this step will immediately make your add-in visible to any existing customers who've enabled your SKY API application. For development and testing purposes, we recommend using a non-production SKY API application to ensure your add-in functions properly before registering the add-in with your production application. From My Applications, navigate to the detail page for your application by clicking on the application name link.\nUnder Add-ins, select Add to launch the Add add-in dialog. Enter a unique name for the add-in. Currently, this value simply provides a reference for your use only - Blackbaud solution users will not see it.\nSpecify the extension point for where you want to insert your add-in into the Blackbaud solution. For more information about extension points, see the Extension points documentation.\nSpecify the URL of your add-in. This value must be an absolute and fully qualified URL, and can include static parameter values.\nClick Save to save your add-in definition. At this point, your add-in will be provisioned for any existing customers who've enabled your application, as well as any customers who enable your application in the future.\nNext steps Get an overview of the SKY Add-ins framework.\nView the Hello World sample to see a detailed walk-through of building an add-in.\nView additional concepts and capabilities associated with the SKY Add-ins framework.\nView our design guidelines to read about building an effective and compelling user experience for your add-in. "
        },
        {
         "layout": "layout-sidebar",
         "name": "Hello world sample add-in",
         "order": 200,
         "published": true,
         "showInNav": true,
         "title": "Hello world sample add-in",
         "sortKey": "order",
         "sortDirection": "asc",
         "showInHeader": true,
         "showInFooter": true,
         "showInSearch": true,
         "breadcrumbs": "Docs Addins Get-started Hello-world",
         "abspath": "docs/addins/get-started/hello-world/index.md",
         "uri": "/docs/addins/get-started/hello-world/",
         "text": " Edit in GitHub Hello world sample add-in\nIn this article, we'll walk through the process of building a custom tile for the Constituent page using the SKY Add-in framework. This add-in will be a pure client-side implementation using only vanilla HTML, CSS, and JavaScript (note that you can use any language or tech-stack you'd like however).\nProject scaffolding\nFirst, we'll open Visual Studio (we're using VS 2017 here, but any version will work), and create a new ASP.NET Web Application. To keep things simple, we'll use the Empty template and enable Web API. Once Visual Studio has finished scaffolding the project, we'll manually add a few files (and for simplicity, we'll add them to the root folder). Specifically, we'll add: An HTML file to contain the markup for the add-in.\nA JavaScript file to contain the client-side code for the add-in (this could of course be embedded into the HTML file, but we'll separate them to keep things clean).\nA CSS file which we'll use to provide some basic styling for the tile. Create the add-in files\nFirst, let's add the HTML file. Next, add the JavaScript file. And finally, add the CSS file. Define the add-in markup\nVisual Studio will produce a very basic HTML file like this:\n<!DOCTYPE html>\n<html>\n<head> <meta charset=\"utf-8\" /> <title></title>\n</head>\n<body> </body>\n</html> We're going to be using a few jQuery statements in our JavaScript, so we'll also add jQuery to the page by referencing the latest version from the jQuery CDN, as documented on their website.\n<script src=\"https://code.jquery.com/jquery-3.2.1.min.js\" integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\" crossorigin=\"anonymous\"></script> Next, a requirement for SKY Add-ins is that they must include the Add-in Client JavaScript library on the page to facilitate the interop with the host application. This library is open source on GitHub and available as an npm package. You can add it to the page a few different ways, but for simplicity here, we'll just reference it from one of the npm CDNs:\n<script src=\"https://cdn.jsdelivr.net/npm/@blackbaud/sky-addin-client@1.0.0/bundles/sky-addin-client.umd.min.js\"></script> We'll also add a few lines to the <head> to include our tile's JavaScript and CSS files on the page:\n<script src=\"HelloWorld.js\"></script>\n<link href=\"HelloWorld.css\" rel=\"stylesheet\" /> Finally, we'll add the obligatory \"hello world\" text so we have something to show in the UI:\n<h2>Hello world!</h2>\n<span>This is a simple custom tile</span> So now, our initial HTML is complete:\n<!DOCTYPE html>\n<html>\n<head> <meta charset=\"utf-8\" /> <title></title> <script src=\"https://code.jquery.com/jquery-3.2.1.min.js\" integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/@blackbaud/sky-addin-client@1.0.0/bundles/sky-addin-client.umd.min.js\"></script> <script src=\"HelloWorld.js\"></script> <link href=\"HelloWorld.css\" rel=\"stylesheet\" />\n</head>\n<body> <h2>Hello world!</h2> <span>This is a simple custom tile</span>\n</body>\n</html> Style the add-in\nNext, let's shift focus to our stylesheet – not much to do here, just give the body a bit of padding. To note, we are still improving the default styling so this step may be optional in the future.\nbody { margin-top: 20px;\n} Basic add-in code\nNow, on to the JavaScript…\nFirst, we'll wrap our code in a self-executing function:\n(function () { // Add-in code goes here }()); As described in the sky-addin-client documentation, Add-ins must be instantiated using the following JavaScript, which registers a callback with the host page. This provides a mechanism for the host page to supply key contextual information to the add-in, and also provides a way for the add-in to inform the host page that it is ready to be rendered. This allows add-in authors to conditionally display add-ins based on the context (ex: only show a tile for individuals who are board members). We'll start with the basic minimal requirement to get a tile showing:\n(function () { // Add-in code goes here // BBSkyAddinClient is global here. var client = new BBSkyAddinClient.AddinClient({ callbacks: { init: (args) => { // perform any initialization needed for the add-in // when the tile is ready to be shown, inform the host page args.ready({ showUI: true, title: 'My Custom Tile' }); } } }); }()); Deploy the add-in\nAt this point, we can deploy our web application. We could serve it locally (ex: https://localhost:4000), but in this case, Visual Studio makes it easy to publish to an Azure App service. For the purpose of this walk-through, we'll publish the web application to: https://blackbaudaddinhelloworld.azurewebsites.net (of course, since we've already claimed this Azure App Service name, you'll need to publish your working sample application to a different url)\nAs you'd expect, we can view the tile at: https://blackbaudaddinhelloworld.azurewebsites.net/helloworld.html\nRegister the add-in\nNow that our web application has been deployed, we can register it as part of our SKY API application by navigating to the SKY API Developer Portal. From the Developer Account menu, select My Applications, and navigate to the SKY API application for which we want to register the add-in. Important! When you add add-in details to your SKY API application, the add-in will immediately become visible to any existing customers who've already enabled your SKY API application (as well as any customers who may enable your application in the future). For development and testing purposes, we recommend using a non-production SKY API application to ensure your add-in functions properly before registering the add-in with your production application.\nOn the application details page, select the Add button from within the Add-ins tile to create a new add-in definition: On this dialog, we can provide the metadata about our add-in, including a friendly name to help distinguish this add-in from others we might create in the future, as well as the extension point (the location within the system where the add-in will be rendered), and the URL for the add-in itself. In this case, we're building a custom tile for the constituent record page, so we'll choose the \"Constituent Tile Dashboard\" extension point.\nA few notes about the URL: It must be an absolute and fully qualified URL, but it can include static parameter values.\nIt must use HTTPS to avoid mixed content problems in the browser.\nWe do support local development, so if you're able to serve the web site locally, you can provide a localhost value for the URL (for example: https://localhost:4000). That all! Once defined, the add-in will be shown for any customers who've enabled the SKY API application.\nView the add-in\nTo view your add-in, visit the page or area within the system where the add-in will be rendered (according to the definition of the extension point).\nWhen the page loads, our custom tile will appear (likely at the bottom of the page): The tile looks and behaves like any native tile within the system - users can drag the tile around, and the position (left or ride side) and state (expanded or collapsed) will be persisted along with other tile details.\nShow contextual values\nNow, let's update the UI to display the various contextual values that are made available to add-ins.\nFirst, we'll start by displaying the \"environment ID\" – you'll hear more about \"environments\" in the future, but for now you can think of the environment as a replacement for the concept of \"tenant\". As described in the SKY Addin Client library documentation, the environment ID is provided as part of the args sent to the init callback function: // BBSkyAddinClient is global here. var client = new BBSkyAddinClient.AddinClient({ callbacks: { init: (args) => { // the environment ID is provided as part of the args object envId = args.envId; ... } } }); To show this value, we'll add the following markup to the HTML:\n<div> <p /> <div>The environment ID is a context value that is available to all add-ins:</div> <span id=\"environmentId\"></span>\n</div> Next, we'll display context values that are specific to the extension point itself. In the case of a \"Constituent Tile Dashboard\" extension point, the context value will be the ID of the constituent. This context value is provided along with the environment ID as part of the args sent to the init function, and we'll show it in the UI by adding the following markup:\n<div> <p /> <div>Additional context values vary for each extension point - for constituent tiles, the ID of the constituent is provided:</div> <span id=\"contextRecordId\"></span>\n</div> You can find complete documentation for each extension point on the extension points documentation page.\nSo now our HTML looks like this:\n<!DOCTYPE html>\n<html>\n<head> <meta charset=\"utf-8\" /> <title></title> <script src=\"https://code.jquery.com/jquery-3.2.1.min.js\" integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/@blackbaud/sky-addin-client@1.0.0/bundles/sky-addin-client.umd.min.js\"></script> <script src=\"HelloWorld.js\"></script> <link href=\"HelloWorld.css\" rel=\"stylesheet\" />\n</head>\n<body> <h2>Hello world!</h2> <span>This is a very simple custom tile</span> <div> <p /> <div>The environment ID is a context value that is available to all add-ins:</div> <span id=\"environmentId\"></span> </div> <div> <p /> <div>Additional context values vary for each extension point - for constituent tiles, the ID of the constituent is provided:</div> <span id=\"contextRecordId\"></span> </div> </body>\n</html> In our JavaScript file, we'll add the following lines to the init method before informing the host page to show the tile – this code will use jQuery to display the environment ID and context record ID.\n$('#environmentId').text(args.envId);\n$('#contextRecordId').text(args.context.recordId); The complete JavaScript is shown here.\n(function () { // BBSkyApiAddin is global here. var client = new BBSkyApiAddin.AddinClient({ callbacks: { init: (args) => { $('#environmentId').text(args.envId); $('#contextRecordId').text(args.context.recordId); // inform the host page that the addin is ready to be shown args.ready({ showUI: true, title: 'My Custom Tile' }); } } }); }()); Fetch a user identity token\nA final piece of contextual data that is available is the \"user identity token\". This value can be used to convey the Blackbaud user ID in a secure fashion to the add-in's backend (where it can be validated and decoded). Having this value on the server will provide a means of mapping the Blackbaud user to a user identity in the 3rd-party system. Add-ins can obtain a user identity token by requesting it from the host page via the getAuthToken method of the SKY Add-in Client JavaScript library.\nThe \"user identity token\" is not the same as the SKY API access token and cannot be used to make calls to the SKY API. For proper security, add-ins should expect to initiate the SKY API OAuth 2.0 Authorization Code flow by rendering a \"Connect to SKY API\" button in the add-in's user interface. The result of that operation will be a SKY API access token, which (along with the Blackbaud user ID and environment ID) can be persisted along with the native user identity in the 3rd-party system.\nFor the purpose of this simple demo, we'll simply fetch and display the user identity token value. Later tutorials will demonstrate how to pass this token to the add-in's backend for validation.\nLet's add the following markup to render a button in the UI for getting a user identity token:\n<div> <p /> <div>Click the button to request a user identity token for the currently logged-in user</div> <button id=\"getAuthToken\">Get auth token</button>\n</div> <div id=\"authToken\"> <p /> <div>The following string represents the identity of the current user, and can be provided to the add-in's backend for validation:</div> <span id=\"authTokenValue\"></span>\n</div> Let's hide the authToken div until the user clicks the button by adding some styling to the CSS:\n#authToken { display: none;\n} In the JavaScript, we'll wire up a click handler for the button in the init method:\n// wire up a click handler for the login button\n$(\"#getAuthToken\").click(getAuthToken); …and provide the implementation to fetch and display the token:\nfunction getAuthToken() { $(\"#authToken\").hide(); $(\"#authTokenValue\").text(\"\"); client.getAuthToken().then((token) => { $(\"#authTokenValue\").text(token); $(\"#authToken\").show(); });\n} Now, our markup looks like this:\n<!DOCTYPE html>\n<html>\n<head> <meta charset=\"utf-8\" /> <title></title> <script src=\"https://code.jquery.com/jquery-3.2.1.min.js\" integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/@blackbaud/sky-addin-client@1.0.0/bundles/sky-addin-client.umd.min.js\"></script> <script src=\"HelloWorld.js\"></script> <link href=\"HelloWorld.css\" rel=\"stylesheet\" />\n</head>\n<body> <h2>Hello world!</h2> <span>This is a very simple custom tile</span> <div> <p /> <div>The environment ID is a context value that is available to all add-ins:</div> <span id=\"environmentId\"></span> </div> <div> <p /> <div>Additional context values vary for each extension point - for constituent tiles, the ID of the constituent is provided:</div> <span id=\"contextRecordId\"></span> </div> <div> <p /> <div>Click the button to request a user identity token for the currently logged-in user</div> <button id=\"getAuthToken\">Get auth token</button> </div> <div id=\"authToken\"> <p /> <div>The following string represents the identity of the current user, and can be provided to the add-in's backend for validation:</div> <span id=\"authTokenValue\"></span> </div> </body>\n</html> The complete JavaScript is shown here:\n(function () { // BBSkyApiAddin is global here. var client = new BBSkyApiAddin.AddinClient({ callbacks: { init: (args) => { $('#environmentId').text(args.envId); $('#contextRecordId').text(args.context.recordId); // wire up a click handler for the login button $(\"#getAuthToken\").click(getAuthToken); // inform the host page that the addin is ready to be shown args.ready({ showUI: true, title: 'My Custom Tile' }); } } }); function getAuthToken() { $(\"#authToken\").hide(); $(\"#authTokenValue\").text(\"\"); client.getAuthToken().then((token) => { $(\"#authTokenValue\").text(token); $(\"#authToken\").show(); }); } }()); View the updated add-in\nAfter redeploying the add-in and refreshing the constituent page, the context values will be shown: Clicking the button will fetch and display the user identity token, which should be treated as an opaque string on the client: Next steps Get an overview of the SKY Add-ins framework.\nView the Getting started tutorial to learn more about how to build a SKY Add-in.\nView additional concepts and capabilities associated with the SKY Add-ins framework.\nView our design guidelines to read about building an effective and compelling user experience for your add-in. "
        }
       ],
       "text": " Edit in GitHub "
      },
      {
       "layout": "layout-sidebar",
       "name": "How-to guides",
       "order": 40,
       "published": true,
       "showInNav": true,
       "back_to_top": true,
       "title": "How-to guides",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Addins How-to-guides",
       "abspath": "docs/addins/how-to-guides/index.md",
       "uri": "/docs/addins/how-to-guides/",
       "nav_links": [
        {
         "layout": "layout-sidebar",
         "name": "Add-in design",
         "order": 10,
         "published": true,
         "showInNav": true,
         "title": "Add-in design",
         "sortKey": "order",
         "sortDirection": "asc",
         "showInHeader": true,
         "showInFooter": true,
         "showInSearch": true,
         "breadcrumbs": "Docs Addins How-to-guides Addin-design",
         "abspath": "docs/addins/how-to-guides/addin-design/index.md",
         "uri": "/docs/addins/how-to-guides/addin-design/",
         "text": " Edit in GitHub Design your add-in\nSKY Add-ins extend the Blackbaud solution experience by providing contextual functionality that can be accessed within selected areas of the user interface. Add-ins provide a natural extension to the user experience and facilitate a deeper integration by empowering users to work seemlessly with third-party features and content without having to context switch between applications.\nYour add-in's UX design must integrate seamlessly with the Blackbaud user interface to provide an efficient, natural interaction model for your users.\nSKY Add-in design principles\nBlackbaud applications follow a general set of interaction guidelines, with consistent presentation metaphors used across every aspect of the system. This commonality is built on a set of principles designed to support end users' tasks. Understanding and following these principles will help you create positive add-in experiences for users: Design explicitly for SKY. The functionality, look and feel of a SKY Add-in should harmoniously complement the rest of the Blackbaud user's experience. Add-ins should feel native and behave like other native features. A well-designed add-in will be an appropriate blend of your experience, the Add-in framework, and the Blackbaud native application functionality. While we do not require any particular client-side user interface framework, consider using SKY UX to achieve a consistent look and feel where appropriate.\nFor more information, view the SKY UX design guidelines. Focus on a few key tasks; do them well. Help users be productive by focusing on common use cases and workflows without being too general-purpose. Don't try to replicate your entire application's functionality within an add-in. Instead, provide contextually relevant functionality, with links to your web site as appropriate. Use branding appropriately. Allow your content and functionality to be the focus of the experience, and brand your add-in wisely. Strike a balance between providing users with a unique and recognizable experience from your system with the existing look and feel within the native Blackbaud system. Avoid distracting users with unnecessary marketing material and instead keep the focus on content and task completion. Design for broad access. Like all Blackbaud solutions, add-ins are designed to work across platforms, across browsers, and even across devices. Your add-in's user interface should be optimized for the specific extension point metaphor (tab, tile, etc.), with a responsive look and feel across form factors. "
        },
        {
         "layout": "layout-sidebar",
         "name": "Add-in development",
         "order": 20,
         "published": true,
         "showInNav": true,
         "title": "Add-in development",
         "sortKey": "order",
         "sortDirection": "asc",
         "showInHeader": true,
         "showInFooter": true,
         "showInSearch": true,
         "breadcrumbs": "Docs Addins How-to-guides Addin-development",
         "abspath": "docs/addins/how-to-guides/addin-development/index.md",
         "uri": "/docs/addins/how-to-guides/addin-development/",
         "text": " Edit in GitHub Add-in development\nUse a non-production SKY API application for development\nAs mentioned in the Register your add-in documentation, all SKY Add-ins are associated with your registered application.\nThis means that whenever you register your add-in metadata, any customers who've already enabled your application (or who do so in the future) will immedately see your add-in(s).\nFor this reason, we recommend making use of a separate, non-production SKY API application while testing your add-in behavior. Once you are happy with the results, you can register your add-in with your production SKY API application.\nThis technique can be used to introduce new add-ins in the future as well. For example, if Blackbaud adds support for new extension points in the future, you can develop against those new extension points using your non-production application, and then when ready you can update your existing, production SKY API application with your additional add-in metadata.\nControl your add-in's visibility\nRemember that add-ins are instantiated as hidden iframes on the page and are only made visible when your code informs the host page. You can use this to your advantage when building and testing by introducing logic that is only visible based on some contextually available value. For example, you can limit visibility to your environment only, or you can whitelist user IDs (by correlating from the current Blackbaud user ID). "
        }
       ],
       "text": " "
      },
      {
       "layout": "layout-sidebar",
       "name": "Overview",
       "order": 10,
       "published": true,
       "showInNav": true,
       "back_to_top": true,
       "title": "Overview",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Addins Overview",
       "abspath": "docs/addins/overview/index.md",
       "uri": "/docs/addins/overview/",
       "text": " Edit in GitHub Add-ins Overview\nSKY Add-ins allow developers to build complementary features that integrate deeply within the user interface of Blackbaud's solutions. With add-ins, developers can use familiar web development technologies such as HTML, CSS, and JavaScript to augment out-of-box product areas with new functionality.\nFor example, with add-ins you can: Add custom tiles to selected pages in the system - bring in data from external systems that is contextually relevant to the current record and provide streamlined workflows for business logic. Create rich, interactive user experiences - expose new 3rd-party visualizations Add-ins are implemented as web applications that run external to the Blackbaud host application, so they can do almost anything that a webpage can do inside a browser. At runtime, the host application provides an isolated sandbox iframe that contains the add-in page, and provides context values needed to load the add-in. Key features\nThe add-ins framework provides the following: A \"write-once, run anywhere\" model - SKY add-ins provide cross-platform/browser/device support, so they appear on and work great from mobile devices as well as desktop browsers.\nUses standard web technologies - add-ins are web applications, so you can use any framework/tech stack/libraries desired, both client-side and server-side. For example, use ASP.NET, PHP, Node.js, MVC, Angular, React, etc.\nEasy deployment - add-ins are deployed to your cloud, so you control how and when your add-in is updated.\nSingle sign-on (SSO) - add-ins integrate easily with 3rd-party systems.\nCommunicate with the host application using SKY API.\nAssociated with SKY applications - when customers enable your SKY application, they'll see the add-ins you've defined. Components of an add-in\nAdd-ins are defined as part of your SKY application within the SKY API developer portal. There are two basic components of an add-in: an extension point (described below) and the URL of your own web application. Types of add-ins\nAdd-ins are associated with specific locations within the Blackbaud user interface, known as extension points. The extension point represents a named location in the user interface where add-ins can be rendered, and it defines both the \"class\" of add-in (tile, button, tab, etc.) as well as the shape of the context values that will be provided at runtime.\nTile add-ins\nTile add-ins can be created for for selected pages within the system that support a dashboard of tiles. Custom tiles will persist state and location on a per-user basis along with other native tiles. Button add-ins (coming soon)\nButton add-ins can be created for selected pages within the system that support page-level actions. Tab add-ins (coming soon)\nTab add-ins can be created for selected pages within the system that use tabs. Future add-ins\nOver time, we'll introduce support for new types of add-ins and new extension points within the system.\nNote! Stay informed as new extension points are introduced by following the SKY Add-ins changelog page, and feel free to submit Ideas for new types of add-ins and extension points.\nNext steps View the Getting started tutorial to learn more about how to build a SKY Add-in.\nView the Hello World sample to see a detailed walk-through of building an add-in.\nView additional concepts and capabilities associated with the SKY Add-ins framework.\nView our design guidelines to read about building an effective and compelling user experience for your add-in. "
      },
      {
       "layout": "layout-sidebar",
       "name": "Reference",
       "order": 50,
       "published": true,
       "showInNav": true,
       "back_to_top": true,
       "title": "Reference",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Addins Reference",
       "abspath": "docs/addins/reference/index.md",
       "uri": "/docs/addins/reference/",
       "text": " Edit in GitHub Reference\nThese resources provide additional information and support for developing SKY Add-ins:\nSKY Add-in client\nAdd-ins make use of a JavaScript library to facilitate the interop between the add-in iframe and the host application. The library is available on GitHub, and more information on how to use the library can be found in the readme.txt. SKY Add-in Client JavaScript library\nUser identity tokens\nTo facilitate the single-sign-on experience, add-ins can obtain a user identity token (UIT) from the host applidcation. This token can be used to securely correlate Blackbaud users with user accounts in the add-in's native system. Add-in developers should first validate the signature of the UIT against the OpenIDConnect endpoint within SKY API OAuth 2.0 service. The OpenIDConnect configuration can be found at: SKY API OAuth 2.0 service OpenIDConnect configuration endpoint\nDevelopers building add-ins in .NET can make use of a Blackbaud-provided library to assist with validating the UIT. This library is distributed as a NuGet package named Blackbaud.Addin.tokenAuthentication on NuGet.org.\nMore information on how to use this library can be found in the readme.txt: Blackbaud.Addin.TokenAuthentication "
      }
     ],
     "text": " Edit in GitHub Add-ins\nNote! This content is preview documentation for an upcoming capability that is limited to SKY Add-in beta participants. If you are interested in participating in the beta program, please contact us.\nSKY Add-ins enable developers to build complementary features that integrate deeply within the user interface of Blackbaud solutions. With add-ins, developers can use familiar web development technologies such as HTML, CSS, and JavaScript to augment selected areas of the product with new functionality. Add-ins run in the browser, so they work well in both desktop and mobile scenarios.\nLearn how to create SKY Add-ins with our quick starts, how-to guides, and reference documentation.\nOverview\nGet an overview of the SKY Add-ins framework.\nQuick starts\nLearn how to create your first add-in: Get started tutorial Hello world sample How-to guides Design the user interface of an add-in\nAdd-in development Reference SKY Add-in Client JavaScript library SKY API OAuth 2.0 service OpenIDConnect configuration endpoint Blackbaud.Addin.TokenAuthentication "
    },
    {
     "layout": "layout-container",
     "name": "Managing your apps",
     "published": true,
     "showInNav": false,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": false,
     "showInFooter": false,
     "showInSearch": true,
     "breadcrumbs": "Docs Apps",
     "abspath": "docs/apps/index.md",
     "uri": "/docs/apps/",
     "text": " "
    },
    {
     "layout": "layout-sidebar",
     "name": "Authorization",
     "description": "Description",
     "order": 300,
     "published": true,
     "showInNav": true,
     "showInHeader": true,
     "showInFooter": true,
     "priority": "high",
     "title": "Authorization",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInSearch": true,
     "breadcrumbs": "Docs Authorization",
     "abspath": "docs/authorization/index.md",
     "uri": "/docs/authorization/",
     "nav_links": [
      {
       "name": "Authorization Code Flow",
       "description": "The Authorization Code Flow is appropriate for applications that the user logs into once. Since this flow involves an exchange of your **Application secret* for an access token, it is suitable for applications than run from secure locations such as server-side web application or back-end service.",
       "layout": "layout-tutorial",
       "order": 100,
       "published": true,
       "showInNav": true,
       "title": "Authorization Code Flow",
       "sidebarLayoutSecondaryColumn": "col-lg-2 col-md-3 col-sm-12 sidebar-tutorial",
       "sidebarLayoutPrimaryColumn": "col-lg-8 col-md-8 col-sm-12",
       "bootstrap_container": "bg-tutorial",
       "markdown": false,
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Authorization Auth-code-flow",
       "abspath": "docs/authorization/auth-code-flow/index.md",
       "uri": "/docs/authorization/auth-code-flow/",
       "text": " Comments Edit in GitHub Authorization Code Flow Introduction The authorization code grant is meant for web applications where API calls are made from the server. It is the most secure as it involves server-to-server communication, and is also the most functional as it also provides refresh tokens. This allows your application to have indefinite connectivity to the SKY API after the one-time user-interactive consent process.\nThe flow starts by redirecting the user's browser from your application to our Authorization URL. The user will login (using their Blackbaud or Google credentials), confirm that it's OK for your application to access their data, and then we'll redirect back to you with an authorization code that you can exchange for an access token. You can store this access token (and the refresh token) in your application, and use it when making API calls on that user's behalf.\nSince this is a redirection-based flow, your application must be able to interact with a web browser and receive incoming requests (via redirection) from our OAuth endpoints.\nWe demonstrate this flow in our tutorials and code samples. Step 1 – Request authorization Initiate the authorization process by redirecting the user's browser to our authorization endpoint. You can choose to do this as a step in your application's login process or in response to some user action in your app (like a button click):\nhttps://oauth2.apim.blackbaud.com/authorization When navigating, you'll need to include a few parameters in the query string. These parameters are fully described in RFC-6749 section 4.1.1: Query parameter Description client_id Required. The Application ID value that we provide when you register your application. This value uniquely identifies your application. See RFC-6749 section 2.2. response_type Required. The value must be set to code. redirect_uri Required. The URI to redirect to after the user grants or denies permission to your app. This value must exactly match one of the Redirect URI values you specify when you register your application, including any capitalization, trailing slashes, etc. See RFC-6749 section 3.1.2. state Optional, but recommended. The state parameter is an opaque value that you can provide when requesting authorization that will be echoed back to you when the user grants or denies permission to your app. You can then validate this parameter to ensure that an incoming redirect is the result of an authentication request that originated in your application. This provides protection against Cross-Site Request Forgery (CSRF) attacks. You can also use this parameter to maintain some state between the authorization request you initiate and the incoming navigation to your redirect URI for the purposes of returning the user to tbe most appropriate location within your app. See RFC-6749 section 10.12 environment_id Optional. The environment_id parameter can be used to filter the list of eligible environments shown during the user authorization step. This filter is useful when the user is already operating in the context of an environment, such as within a SKY API user interface add-in. We'll have more information on environments and add-ins in the near future. Note: to facilitate local development, we allow the use of http and localhost or the localhost IP (127.0.0.1). In production however, we require the use of https for proper security when redirecting. A sample authorization request looks like this (with extra line breaks for display purposes only):\nhttps://oauth2.apim.blackbaud.com/authorization?\nclient_id=E140BF29-A528-4048-91A9-83BCB01B7FE2\n&response_type=code\n&redirect_uri=https://www.example.com/oauth2/callback\n&state=fdf80155 Step 2 – User authorization In this step, we'll ask the user to log in (using their Blackbaud or Google credentials). We'll then ask them if it's ok for your application to access their Blackbaud data: If the user has access to more than one customer's data, they'll select the customer (tenant) to which they are giving your app permission. Step 3 – User is redirected back After the user grants (or denies) your authorization request, we'll redirect the browser to the redirect_uri that you specified in the request (in the above example, we'll redirect the browser back to your application at https://www.example.com/oauth2/callback).\nIf the user granted your app permission, the query string will contain the following parameters: Query parameter Description code An authorization code that can be exchanged for an access token. state The value of the state parameter you supplied in the initial authorization request. For example (with extra line breaks for display purposes only):\nhttps://www.example.com/oauth2/callback?\ncode=3BB723FF-74C9-4AED-B4F6-7E8A192CBA21\n&state=fdf80155 If the user denied your permission request, the query string will contain the following parameters: Query parameter Description error The reason that authorization failed (for example, access_denied). state The value of the state parameter you supplied in the initial authorization request. For example (with extra line breaks for display purposes only):\nhttps://www.example.com/oauth2/callback?\nerror=access_denied\n&state=fdf80155 For more information on commonly encountered authorization problems, see common authorization issues. Step 4 – Request tokens When your application receives an authorization code, you will need to exchange it for an access token by making a POST request to our token endpoint:\nhttps://oauth2.apim.blackbaud.com/token The body of the request must contain the following fields: Field Description grant_type Required. This field must contain the value authorization_code. code Required. The authorization code supplied to your application's redirect_uri. redirect_uri Required. This parameter is used for validation only (there is no actual redirection). The value of this parameter must exactly match the value of the redirect_uri parameter you supplied when initiating authorization. In addition, the request must include the following headers: Header Description Authorization Required. Your application's basic authentication credentials. The value of this header must be a base 64-encoded string that contains the application ID and secret that were provided when you registered your application. The value must have the format: Basic <base64 encoded Application ID:Application secret>. Note: As an alternative to using the Authorization header, you may supply your application ID and secret as part of the request body as client_id and client_secret parameters, respectively. Since this request uses your Application secret, it should be made from the server to avoid exposing the value to the public. Content-Type Required. The value should be application/x-www-form-urlencoded. For example:\nPOST https://oauth2.apim.blackbaud.com/token HTTP/1.1\nAuthorization: Basic czZCaGRS...WDFmQmF0M2JW\nContent-Type: application/x-www-form-urlencoded grant_type=authorization_code&redirect_uri=https%3A%2F%2Fwww.example.com%2Foauth2%2Fcallback&code=bd2d702f47bc453580098c8076d471b4 Note: The authorization code expires in 5 minutes. Be sure to quickly exchange it for an access token. Step 5 – Tokens returned If the access token request is successful, the response body will contain a JSON object that has the following fields: Field Type Description access_token string An access token to be used when making calls to the SKY API. The access token should be provided in the standard Authorization header in the form of Bearer token (note the separating space). token_type string Indicates the type of token issued, and will always contain the value bearer. expires_in integer The time period (in seconds) in which the access token is valid. refresh_token string A value that can be used to refresh the access token when it expires. When you exchange a refresh token, you'll receive a new access token (and a new refresh token) that you can use when making subsequent calls to the SKY API. (See refresh access token). tenant_id string The ID of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. tenant_name string The name of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. legal_entity_id string The legal entity identifier. A legal entity represents a Blackbaud client (organization or individual) who can try out or purchase the products, services, and solutions Blackbaud provides. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. legal_entity_name string The name of the legal entity. environment_id string The environment identifier. An environment is a logical group of products and service instances that a legal entity is entitled to. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. environment_name string The name of the environment. user_id string The unique identifer of the authenticated Blackbaud user in whose context the access token is issued. This value can be used to correlate Blackbaud users with users in external systems. Sample response:\nHTTP/1.1 200 OK\nCache-Control: no-cache\nPragma: no-cache\nContent-Length: 918\nContent-Type: application/json;charset=UTF-8\nExpires: -1\nDate: Thu, 10 Sep 2015 15:46:56 GMT { \"access_token\":\"eyJ0eXAiOiJKV1...CTtP0CQ\", \"token_type\": \"bearer\", \"expires_in\": 1199, \"refresh_token\":\"eb78ffd...7cb7b\", \"tenant_id\": \"E27DD7B6-6B71-4689-8B2C-60A74F243966\", \"tenant_name\":\"Raiser's Edge NXT - Blackbaud (Developer Sandbox)\", \"legal_entity_id\":\"p-AaBbCcDdEeFfGg987654321\", \"legal_entity_name\":\"Blackbaud Developer Sandbox\" \"environment_id\":\"p-abcdef1234567890ABCDEFG\", \"environment_name\":\"Blackbaud Developer Sandbox Environment\"\n} If the token request is not successful, the response status code and body will provide details. For more information on commonly encountered authorization problems, see common authorization issues. Step 6 – Call the SKY API The access token allows you to make requests to the SKY API on a behalf of a user. When calling the API, provide the access token using the standard Authorization request header with a value of Bearer, followed by a space and the access_token value.\nYou will also need to provide your subscription key to the SKY API via the Bb-Api-Subscription-Key header. You can use either the primary or the secondary key (both are equally functional), and both can be found on your developer profile page.\nFor more information on providing these headers, see request headers.\nSample Request\nGET https://api.sky.blackbaud.com/constituent/v1/constituents/280 HTTP/1.1\nHost: api.sky.blackbaud.com\nAuthorization: Bearer eyJ0eXAiOiJKV1...CTtP0CQ\nBb-Api-Subscription-Key: 77f137116...480d633 Step 7 – Refresh access token For security purposes, access tokens will expire after 60 minutes. When this happens, calls to the SKY API will respond with a status code of 401 Not Authorized along with the message \"The required Authorization header was missing or invalid, or the token has expired\". To continue making calls to the API, you will need to exchange the value you received in the refresh_token field for a new access token.\nThis exchange happens on the server, and does not involve any user interactivity. In this way, your application can have indefinite connectivity to after the initial one-time user-interactive consent.\nTo refresh your access token, make a POST request to our token endpoint:\nhttps://oauth2.apim.blackbaud.com/token The body of the request must contain the following fields: Field Description grant_type Required. This field must contain the value refresh_token. refresh_token Required. The refresh token supplied to your application's redirect_uri. In addition, the request must include the following headers: Header Description Authorization Required. Your application's basic authentication credentials. The value of this header must be a base 64-encoded string that contains the application ID and secret that were provided when you registered your application. The value must have the format: Basic <base64 encoded Application ID:Application secret>. Note: As an alternative to using the Authorization header, you may supply your application ID and secret as part of the request body as client_id and client_secret parameters, respectively. Since this request uses your Application secret, it should be made from the server to avoid exposing the value to the public. Content-Type Required. The value should be application/x-www-form-urlencoded. For example:\nPOST https://oauth2.apim.blackbaud.com/token HTTP/1.1\nAuthorization: Basic czZCaGRS...WDFmQmF0M2JW\nContent-Type: application/x-www-form-urlencoded grant_type=refresh_token&refresh_token=eb78ffdabc7cb7b If the refresh token request is successful, the response body will contain a JSON object that has the following fields: Field Type Description access_token string An access token to be used when making calls to the SKY API. The access token should be provided in the standard Authorization header in the form of Bearer token (note the separating space). token_type string Indicates the type of token issued, and will always contain the value bearer. expires_in integer The time period (in seconds) in which the access token is valid. refresh_token string A value that can be used to refresh the access token when it expires. When you exchange a refresh token, you'll receive a new access token (and a new refresh token) that you can use when making subsequent calls to the SKY API. (See refresh access token). tenant_id string The ID of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. legal_entity_id string The legal entity identifier. A legal entity represents a Blackbaud client (organization or individual) who can try out or purchase the products, services, and solutions Blackbaud provides. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. legal_entity_name string The name of the legal entity. environment_id string The environment identifier. An environment is a logical group of products and service instances that a legal entity is entitled to. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. environment_name string The name of the environment. Sample response:\nHTTP/1.1 200 OK\nCache-Control: no-cache\nPragma: no-cache\nContent-Length: 918\nContent-Type: application/json;charset=UTF-8\nExpires: -1\nDate: Thu, 10 Sep 2015 15:46:56 GMT { \"access_token\":\"azH0eXAiOiJKV1...DTxS1DR\", \"token_type\": \"bearer\", \"expires_in\": 1199, \"refresh_token\":\"ab478xsd...7ab6c\", \"tenant_id\": \"E27DD7B6-6B71-4689-8B2C-60A74F243966\", \"legal_entity_id\":\"p-AaBbCcDdEeFfGg987654321\", \"legal_entity_name\":\"Blackbaud Developer Sandbox\" \"environment_id\":\"p-abcdef1234567890ABCDEFG\", \"environment_name\":\"Blackbaud Developer Sandbox Environment\"\n} If the refresh token request is not successful, the response status code and body will provide details. For more information on commonly encountered authorization problems, see common authorization issues. Step 8 – Next steps For more information on implementing the authorization code flow, check out our code samples. "
      },
      {
       "layout": "layout-sidebar",
       "name": "Common Authorization Issues",
       "description": "Common errors encountered when interacting with the OAuth endpoints.",
       "order": 200,
       "published": true,
       "showInNav": true,
       "back_to_top": true,
       "title": "Common Authorization Issues",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Authorization Common-auth-issues",
       "abspath": "docs/authorization/common-auth-issues/index.md",
       "uri": "/docs/authorization/common-auth-issues/",
       "text": " Comments Edit in GitHub Common Authorization Issues\nYou may encounter one of the following common issues when initiating authorization, requesting access tokens, or calling the SKY API.\nInitiating Authorization\nApplications initiate the OAuth process by directing the user's browser to our Authorization page with various parameters that identify the application and the type of authorization being requested. Important! Pop up blockers may interfere with obtaining access tokens if the authorization page is launched in a separate window (as is done in the SKY API Console). Please enable pop ups when using the SKY API Console to obtain access tokens. Invalid client_id\nThe client_id parameter is required and used to identify the application requesting authorization. If omitted, the following error will be shown: If an invalid client_id parameter is specified, the following error will be shown: To resolve these issues, ensure that the authorization URL includes the client_id parameter, which is displayed in the Application Credentials column of the My Applications page. Application ID is the unique identifier for your application, and should be specified as the client_id parameter when initiating the authorization process.\nInvalid redirect_uri\nThe redirect_uri parameter is required and used to confirm the application's identity and communicate where to send the browser after the user provides consent. If omitted, the following error will be shown: If an invalid or malformed redirect_uri parameter is specified, the following error will be shown: If the value provided for the redirect_uri parameter does not match one of the values provided when the application was registered, the following error will be shown: To resolve these issues, ensure that the value provided for the redirect_uri parameter is one of the whitelisted values that you specified when registering your application. The value must match exactly, including capitalization, terminating slashes, etc.\nInvalid response_type\nThe response_type parameter is required, and indicates the the type of authorization being requested by the application. The value must be set to code when using the Authorization Code Flow or token when using the Implicit Flow.\nIf the response_type parameter is omitted, the user's browser will be redirected to the specified redirect_uri location with an error query parameter of invalid_request. If the value specified is invalid or unsupported, the error query parameter will be unsupported_response_type.\nUser cannot access any SKY API enabled products\nIf the authenticated user cannot access any SKY API enabled Blackbaud products, the following error will be shown: In order to provide consent for an application to access any Blackbaud data, the authenticating user must have access to a SKY API enabled Blackbaud product. This requirement allows SKY API to respect and enforce the user's security permissions. If the user does not have access, they should contact the organization administrator and request an invitation.\nApplication not approved\nBefore an application can request authorization and make calls to the SKY API, an organization administrator must approve the application. If the application has not been approved, the following error will be shown: Note that organization administrators can also remove an application when they no longer want it to have access to their Blackbaud data. For more information, see Activate your application.\nUser denied access\nDuring the OAuth process, the user can choose to deny consent to the application. When this happens, the user's browser will be redirected to the specified redirect_uri location with an error query parameter of access_denied and an error_message query parameter value of The user chose not to give your app access to their Blackbaud data..\nOther parameters\nNote that any query parameters not directly supported will be ignored during the OAuth process. For more information on initiating the OAuth process, see Authorization.\nRequesting Tokens\nApplications using the Authorization Code Flow will call the /token endpoint to exchange authorization codes for access tokens and to refresh access tokens when they expire. Calls to the /token endpoint require authentication and a request body that describes the operation being performed.\nError responses from the /token endpoint match the shape defined by Section 5.2 of the OAuth 2.0 spec, and will be returned as a JSON object containing error and error_description properties:\n{ \"error\": \"invalid_client\", \"error_description\": \"The specified credentials were not valid.\"\n} invalid_client error\nThis error indicates that we were unable to retrieve and verify the application's credentials (application ID and secret) from either the authorization header or the request body. To resolve this, ensure that you are providing the application credentials as either base64-encoded values within the Authorization header (preferred), or as form-url-encoded values client_id and client_secret in the request body. Note: When specifying credentials using the Authorization header, the value must have the format: Basic <base64 encoded Application ID:Application secret>. Make sure to include a space after the \"Basic\" prefix. After you register an application, the credentials are displayed in the Application Credentials column of the My Applications page. Application ID is the unique identifier for your application, and should be specified as the client_id parameter value. Use the Application Secret as the client_secret parameter value.\nFor more information, see step 4 of Authorization Code Flow documentation.\nVariations of this error condition can take the following forms: \"The required credentials were not supplied.\" \"The required client_id parameter was not provided.\" \"The specified credentials were not valid.\" \"The value specified for the client_id parameter 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXX' was not valid.\" Ensure that the application's credentials were properly specified as either base64-encoded values within the Authorization header (preferred), or as form-url-encoded values client_id and client_secret in the request body. invalid_redirect_uri error \"The specified value for the redirect_uri parameter 'xxxxxxx' did not match any pre-registered values.\" The value provided for the redirect_uri field in the request body must be one of the whitelisted values that you specified when registering your application. The value must match exactly, including capitalization, terminating slashes, etc.\nNote that within the /token endpoint this value is only used for validation purposes (no redirect actually happens). The value must exactly match the value of the redirect_uri parameter that was specified when originally requesting the authorization code.\nunsupported_grant_type error \"unsupported_grant_type\" error When requesting an access token from the /token endpoint, you must pass an appropriate value for the grant_type request body parameter as per the OAuth 2.0 specification. When initially exchanging an authorization code for an access token, the value specified should be authorization_code. When refreshing an access token, the value specified should be refresh_token. Check the spelling of the grant_type parameter name, and ensure that the value provided is supported. invalid_grant error \"invalid_grant\" error This error can be returned for a variety of reasons when requesting an access token.\nFor example, when exchanging an authorization code for an access token, you will see this error when providing an invalid, expired, or previously used authorization code. In this case, you must restart the authorization process and obtain a new authorization code from the /authorization page. The authorization codes expire in a short period of time (currently, 5 minutes) and are not reusable. Your application should exchange them for access tokens promptly.\nA redirect_uri that does not match the one used when making the initial authorization request can also cause this error. To resolve this, use the same redirect_uri in both operations.\nYou may also see this when you refresh an access token if you provide an expired, revoked, or otherwise invalid refresh token.\nCalling the SKY API\ninvalid subscription key \"Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription.\" When making calls to the SKY API, be sure to provide either your primary or secondary subscription key with the request.\nThe subscription key represents a subscription to a specific SKY API product and is associated with your developer account. To get a subscription key, you'll need to sign up for a Blackbaud developer account and get an approved subscription. Once you have an approved subscription, you can view the subscription keys within your profile. The subscription key value is passed with each request to the SKY API via the Bb-Api-Subscription-Key request header. See Getting Started for instructions on how to obtain a subscription key and an example of using the subscription key in a call to the API.\nmissing/invalid authorization header \"The required Authorization header was missing or invalid, or the token has expired\" Missing Token\nWhen making calls to the API, you need to provide an access token obtained using OAuth 2.0. The access token allows you to make requests to the SKY API on a behalf of a user. When calling the API, be sure to supply the Authorization request header with a value of Bearer, followed by a space and the access_token value.\nIt's a common mistake to forget to prepend the access_token value with Bearer. Be sure to include a space between Bearer and the access_token value.\nSample request:\nGET https://api.sky.blackbaud.com/constituent/constituents/280 HTTP/1.1\nHost: api.sky.blackbaud.com\nAuthorization: Bearer eyJ0eXAiOiJKV1...CTtP0CQ\nBb-Api-Subscription-Key: 77f137116...480d633 Expired Token\nThe access token expires in 60 minutes. With the Authorization Code Flow, each time you refresh your tokens, you'll get a new access and refresh token. Refresh tokens will also expire, but after a much longer period of time (currently, 60 days). Using a sliding window, each time you exchange your refresh token for a new access token, we will issue a new refresh token as well. As long as your application connects to the SKY API at least once within the window, you will be able to continue to access the Blackbaud customer's data indefinitely (or until they deactivate your application).\nIf your access token and refresh token have expired, the user will have to re-authenticate and consent. "
      },
      {
       "name": "Implicit Flow",
       "description": "The Implicit Flow is carried out client-side within a browser-based app. Since the code is available to the browser, the <%= stache.config.guide_apps_client_secret_name %> cannot be kept a secret and is not used to request an access token.  As a result, the access tokens that are issued are short-lived and there are no refresh tokens to extend them when they expire.",
       "layout": "layout-tutorial",
       "order": 150,
       "published": true,
       "showInNav": true,
       "title": "Implicit Flow",
       "sidebarLayoutSecondaryColumn": "col-lg-2 col-md-3 col-sm-12 sidebar-tutorial",
       "sidebarLayoutPrimaryColumn": "col-lg-8 col-md-8 col-sm-12",
       "bootstrap_container": "bg-tutorial",
       "markdown": false,
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Authorization Implicit-flow",
       "abspath": "docs/authorization/implicit-flow/index.md",
       "uri": "/docs/authorization/implicit-flow/",
       "text": " Comments Edit in GitHub Implicit Flow Introduction The implicit grant is meant for applications where API calls are made from the client, typically within a browser using JavaScript. Since API calls are made from the client, they are inherently less secure and do not involve the exchange of an application secret. The access tokens that are issued are short-lived and no refresh tokens are provided, so the user must re-authorize your application when the token expires.\nLike the Authorization Code Flow, the implicit flow starts by redirecting the user's browser from your application to our Authorization URL. The user will login (using the Blackbaud or Google credentials), confirm that it's OK for your application to access their data, and then we'll redirect back to you with an access token that you can immediately use when making API calls on that user's behalf.\nSince this is a redirection-based flow, your application must be able to interact with a web browser and receive incoming requests (via redirection) from our OAuth endpoints. Step 1 – Request authorization Initiate the authorization process by redirecting the user's browser to our authorization endpoint. You can choose to do this as a step in your application's login process or in response to some user action in your app (like a button click):\nhttps://oauth2.apim.blackbaud.com/authorization When navigating, you'll need to include a few parameters in the query string. These parameters are fully described in RFC-6749 section 4.1.1: Query parameter Description client_id Required. The Application ID value that we provide when you register your application. This value uniquely identifies your application. See RFC-6749 section 2.2. response_type Required. The value must be set to token. This indicates that the access token should be returned in the fragment of the redirect URI. redirect_uri Required. The URI to redirect to after the user grants or denies permission to your app. This value must exactly match one of the Redirect URI values you specify when you register your application, including any capitalization, trailing slashes, etc. See RFC-6749 section 3.1.2. state Optional, but recommended. The state parameter is an opaque value that you can provide when requesting authorization that will be echoed back to you when the user grants or denies permission to your app. You can then validate this parameter to ensure that an incoming redirect is the result of an authentication request that originated in your application. This provides protection against Cross-Site Request Forgery (CSRF) attacks. You can also use this parameter to maintain some state between the authorization request you initiate and the incoming navigation to your redirect URI for the purposes of returning the user to tbe most appropriate location within your app. See RFC-6749 section 10.12 environment_id Optional. The environment_id parameter can be used to filter the list of eligible environments shown during the user authorization step. This filter is useful when the user is already operating in the context of an environment, such as within a SKY API user interface add-in. We'll have more information on environments and add-ins in the near future. Note: to facilitate local development, we allow the use of http and localhost or the localhost IP (127.0.0.1). In production however, we require the use of https for proper security when redirecting. A sample authorization request looks like this (with extra line breaks for display purposes only):\nhttps://oauth2.apim.blackbaud.com/authorization?\nclient_id=E140BF29-A528-4048-91A9-83BCB01B7FE2\n&response_type=token\n&redirect_uri=https://www.example.com/oauth2/callback\n&state=fdf80155 Step 2 – User authorization In this step, we'll ask the user to log in (using their Blackbaud or Google credentials). We'll then ask them if it's ok for your application to access their Blackbaud data: If the user has access to more than one customer's data, they'll select the customer (tenant) to which they are giving your app permission. Step 3 – Access token provided After the user grants (or denies) your authorization request, we'll redirect the browser to the redirect_uri that you specified in the request (in the above example, we'll redirect the browser back to your application at https://www.example.com/oauth2/callback).\nIf the user granted your app permission, the URL fragment will contain the following fields: Field Type Description access_token string An access token to be used when making calls to the SKY API. The access token should be provided in the standard Authorization header in the form of Bearer token (note the separating space). token_type string Indicates the type of token issued, and will always contain the value bearer. expires_in integer The time period (in seconds) in which the access token is valid. state string The value of the state parameter you supplied in the initial authorization request. tenant_id string The ID of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. tenant_name string The name of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. legal_entity_id string The legal entity identifier. A legal entity represents a Blackbaud client (organization or individual) who can try out or purchase the products, services, and solutions Blackbaud provides. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. legal_entity_name string The name of the legal entity. environment_id string The environment identifier. An environment is a logical group of products and service instances that a legal entity is entitled to. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. environment_name string The name of the environment. user_id string The unique identifer of the authenticated Blackbaud user in whose context the access token is issued. This value can be used to correlate Blackbaud users with users in external systems. Reminder: The Implicit Grant Flow provides a short-lived access token that expires in 60 minutes. A refresh token is not provided, so when the token expires your application should re-authorize the user again. Successful redirect response example (with extra line breaks for display purposes only):\nhttps://www.example.com/oauth2/callback#\naccess_token=1d57284f025...4975d\n&token_type=bearer\n&expires_in=3600\n&state=fdf80155\n&tenant_id=E27DD7B6-6B71-4689-8B2C-60A74F243966\n&tenant_name=Raiser%27s%20Edge%20NXT%20-%20Blackbaud%20%28Developer%20Sandbox%29\n&legal_entity_id=p-AaBbCcDdEeFfGg987654321\",\n&legal_entity_name=Blackbaud%20Developer%20Sandbox\n&environment_id\":\"p-abcdef1234567890ABCDEFG\",\n&environment_name=Blackbaud%20Developer%20Sandbox%20Environment If the user denied your permission request, the query string will contain the following parameters: Query parameter Description error The reason that authorization failed (for example, access_denied). state The value of the state parameter you supplied in the initial authorization request. For example (with extra line breaks for display purposes only):\nhttps://www.example.com/oauth2/callback?\nerror=access_denied\n&state=fdf80155 For more information on commonly encountered authorization problems, see common authorization issues. Step 4 – Call the SKY API The access token allows you to make requests to the SKY API on a behalf of a user. When calling the API, provide the access token using the standard Authorization request header with a value of Bearer, followed by a space and the access_token value.\nYou will also need to provide your subscription key to the SKY API via the Bb-Api-Subscription-Key header. You can use either the primary or the secondary key (both are equally functional), and both can be found on your developer profile page.\nFor more information on providing these headers, see request headers.\nSample Request\nGET https://api.sky.blackbaud.com/constituent/constituents/280 HTTP/1.1\nHost: api.sky.blackbaud.com\nAuthorization: Bearer eyJ0eXAiOiJKV1...CTtP0CQ\nBb-Api-Subscription-Key: 77f137116...480d633 Step 5 – Next steps For more information on implementing the implicit flow, check out our code samples. "
      }
     ],
     "text": " Comments Edit in GitHub Authorization\nSKY API uses the OAuth 2.0 protocol to authorize API requests. This provides a mechanism for your application to access Blackbaud customer data without exposing any user credentials (username/password) to your application. Instead, users must provide consent to your application to access data on their behalf.\nSKY API OAuth 2.0 endpoints: Endpoint URL Authorization https://oauth2.apim.blackbaud.com/authorization Token https://oauth2.apim.blackbaud.com/token In order to call the SKY API, you must first register your application within the My Applications area of the developer portal. This registration provides your application with a unique set of credentials to use when asking a user for consent.\nBefore your application can access a given Blackbaud customer's data, it must first be approved by an administrator within the customer's organization. The administrator provides this approval by activating your application within the Applications area of the product. This allows Blackbaud customers to control which applications have access to their data, and at any time an administrator can de-activate your application and prevent future access via the API.\nAfter your application is activated, you can then obtain consent from an authenticated Blackbaud user. Upon consent, an OAuth 2.0 access token will be issued to your application in the form of a JSON web token, or JWT. The token should be included on every API request as part of the standard Authorization header. It is tied to the authenticated user's account and organization, which means that your application can only access data to which the authenticated user can access within the system.\nSupported OAuth 2.0 flows\nThe SKY API supports the following grant types: Authorization Code Flow (aka the Web Server flow). This flow is meant for web applications where API calls are made from the server. It is the most secure as it involves server-to-server communication, and is also the most functional as it also provides refresh tokens. This allows your application to have indefinite connectivity to the SKY API after the one-time user-interactive consent process. Implicit Flow. This flow is meant for client-side applications, such as browser-based, native, and mobile applications. Since API calls are made from the client, they are inherently less secure and do not involve the exchange of an application secret. The access tokens that are issued are short-lived and no refresh tokens are provided, so the user must re-authorize your application when the token expires. User experience\nThe Authorization Code Flow starts by redirecting the user's browser from your application to our Authorization URL. The user will login (using their Blackbaud or Google credentials), confirm that it's OK for your application to access their data, and then we'll redirect back to you with a authorization code that you can exchange for an access token. You can store this access token (and the refresh token) in your application, and use it when making API calls on that user's behalf.\nThe Implicit Flow starts by redirecting the user's browser from your application to our Authorization URL. The user will login (using their Blackbaud or Google credentials), confirm that it's OK for your application to access their data, and then we'll redirect back to you with an access token that you can use when making API calls on that user's behalf.\nToken expiration\nAs a security best-practice, access tokens will expire after a period of time (currently, 60 minutes). When this happens, your application should exchange the refresh token it received with the original access token for a new access token in order to make additional API calls. The refresh token exchange happens on the server and does not involve any interaction with the user.\nIf your access token was obtained using the Implicit Flow, you won't have a refresh token and you'll need the user to re-authorize your application before making additional API calls.\nNote: Refresh tokens will also expire, but after a much longer period of time (currently, 60 days). Using a sliding window, each time you exchange your refresh token for a new access token, we will issue a new refresh token as well. As long as your application connects to the SKY API at least once within the window, you will be able to continue accessing the Blackbaud customer's data indefinitely (or until they deactivate your application).\nScopes\nOAuth 2.0 scopes are not yet supported within SKY API. In the future, applications may be able to express intent via scopes, but for now API access is always in the context of an authenticated user, which means that API access respects the user's security permissions defined within the product. "
    },
    {
     "layout": "layout-sidebar",
     "name": "Basics",
     "description": "Docs to learn our APIs.",
     "order": 400,
     "published": true,
     "showInNav": true,
     "showInHeader": true,
     "showInFooter": true,
     "back_to_top": true,
     "title": "Basics",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInSearch": true,
     "breadcrumbs": "Docs Basics",
     "abspath": "docs/basics/index.md",
     "uri": "/docs/basics/",
     "text": " Comments Edit in GitHub Basics\nThe following information provides an overview of some key concepts within the SKY API. We'll assume you have some familiarity with RESTful programming concepts and the associated tools and techniques for consuming web services.\nBase URL\nAll endpoints within the SKY API are located at the following base URL:\nhttps://api.sky.blackbaud.com Within this address, you'll find APIs (collections of related endpoints) covering the broad functional areas within the SKY API. For example, we currently surface the following APIs: API Location Purpose Accounts Payable /accountspayable Used to manage accounts payable, including vendors and invoices. Constituent /constituent Used to manage constituent information, including related entities such as addresses, phones, emails, and notes. Fundraising /fundraising Used to manage information within the fundraising hierarchy and related entities such as campaigns, funds, and appeals. General Ledger /generalledger Used to manage the general ledger, including accounts, projects, and journal entries. Gift /gift Used to manage gift information, including related entities such as acknowledgements, fundraisers, and receipts. Opportunity /opportunity Used to manage opportunity information, including related entities such as opportunity fundraisers and opportunity attachments. Treasury /treasury Used to manage Treasury information, including related entities such as adjustments, checks, and deposits. Within each API, you'll find domain-specific endpoints that allow you to access data and perform operations like searching for records, updating information, etc. The SKY API is based on REST principles, where resources are accessed via standard requests to an API endpoint.\nScheme\nFor security, the SKY API communicates exclusively over HTTPS.\nSubscription\nIn order to call the SKY API, you'll need a subscription associated with your developer account. This subscription represents our permission for you to call the API, and you'll include your subscription key in the Bb-Api-Subscription-Key header on every request (see request headers).\nTo obtain a subscription, visit the Products page, select SKY API Standard Edition and click Review terms and subscribe to initiate the request process. You must review all the terms by scrolling down the page before you can agree to the terms and subscribe.\nYou will receive an email notification when your request is approved, and you'll be able to locate your subscription details within your developer profile.\nNote: Currently, SKY API access is limited to Blackbaud Partners and customers using Raiser's Edge NXT or Financial Edge NXT. Subscription requests are reviewed and must be approved by Blackbaud. If you are interested in using SKY API to build an integration for a specific customer, contact that organization's administrator to receive a user invite for the Blackbaud product. If you are interested in using SKY API to build an integration for multiple customers, we encourage you to become a partner. Why two subscription keys?\nBlackbaud provides two subscription keys labeled primary key and secondary key. You are free to use either in your requests to the API. As a security best practice it’s a good idea to rotate which key your applications use when calling the API. This mitigates the risk of a compromised key. Blackbaud won’t mandate a key rotation schedule. You are free to adopt a rotation strategy that best fits your needs. We also give you a mechanism to regenerate the keys associated with your subscription(s) in your Developer account profile.\nAuthorization\nAll endpoints within the SKY API require user-authorization, so in addition to a subscription key you'll also need to supply an OAuth 2.0 access token to access a specific Blackbaud customer's data. This token can be obtained through the authorization process, and should be included on every request as part of the Authorization header (see request headers).\nNote: The token should be considered an opaque value and is tied to the authenticated user's account and organization. This means that your application can only access data to which the authenticated user has permission. HTTP verbs\nThe SKY API is designed to have predictable, resource-oriented URLs to make learning easier. Where possible, the API strives to use the appropriate HTTP verb for each action: Verb Description GET Used to retrieve resources. POST Used to create resources. PATCH Used to update the properties of a resource. DELETE Used to delete resources. Request headers\nThe following request headers are required when calling the SKY API: Bb-Api-Subscription-Key - This is your API subscription key, which represents Blackbaud's permission to you to call the SKY API. You can use either the primary or the secondary key associated with your subscription (both are equally functional). For more information on obtaining an API subscription, see subscription.\nAuthorization - This value is an OAuth 2.0 Bearer token, which is obtained during the authorization process and represents a Blackbaud customer's permission for you to access their data. The expected format of this header value is \"Bearer token\" (note the space in the middle). For endpoints that accept JSON in the request body, the Content-Type request header with a value of application/json is required.\nContent types\nUnless otherwise noted, all endpoints within the SKY API accept and return data formatted as JSON. The Content-Type request header with a value of application/json is required when providing content on the body of a request.\nRegenerate your app secret\nIf you think your Application secret has been compromised, follow these steps to regenerate the value: Go to My Applications. Locate the application in the list. Select the context menu and click Regenerate secret. Select Show to display the regenerated secret. Be sure to store the new secret securely. Important! Don't forget to update your application to use the regenerated value when requesting access during the authorization process. Response status codes\nThe SKY API uses the following set of standard HTTP response status codes, as defined in RFC 2616 and RFC 6585. Response codes in the 4xx range indicate a problem with your request, while response codes in the 5xx range indicate a problem on our end.\nYou can view the common authentication issues page for additional guidance, and if you are experiencing a problem, feel free to review your support options in our Support area. You can also check the Issues page to see if we are experiencing any problems on our end.\nFor response codes in the 4xx or 5xx range (which indicate failures), the response body may contain more details on why the request failed.\nStatus codes Status code Description 200 OK The request was successful, and you can read the results from the body and headers of the response. For operations that create new resources, you'll typically find the ID of the newly created resource in the response body. For simplicity, we don't distinguish between successful calls that create, update, or delete resources. 400 Bad Request The request failed due to an error on your part, such as a syntax error or malformed content in the request body. 401 Unauthorized The request failed because the required authorization was not satisfied. This could be because you provided an invalid subscription key (see subscription), or an invalid or expired access token (see common authentication issues). 403 Forbidden The request failed because the user in whose context the API is being called either does not have permission to perform the operation itself, or does not have permission to access the data being requested. You may also see this response when the API quota associated with your subscription has been met (see quota). 404 Not Found The requested resource could not be found. You may be trying to access a record that does not exist, or you may have supplied an invalid URL. 415 Unsupported Media Type The request failed because the correct Content-Type header was not provided on the request. For endpoints that accept JSON in the request body, you must use the Content-Type header application/json. 429 Too Many Requests You will see this response if you've exceeded the rate limit associated with your API subscription (see rate limits). 500 Internal Server Error An unexpected error has occurred on our side. You should never receive this response, but if you do please let us know and we'll fix it. 503 Service Unavailable One or more API services are not available. This is usually a temporary condition caused by an unexpected outage or due to planned downtime. We'll be proactive about broadcasting outages or downtime on the Issues page, so check there for more information. Rate limits\nCalls to the SKY API are subject to the rate limit associated with your API subscription (see subscription).\nRate limits help us to keep our backend servers from being overloaded with too many requests in a short period of time by limiting the number of calls you can make within that period. When your rate limit is exceeded, you'll receive a 429 - Too Many Requests response from the API, and the body of the response will indicate how long you must wait before making the next call (you can also inspect the Retry-After header which will contain the number of seconds to wait):\nRetry-After: 1\nDate: Tue, 06 Dec 2016 19:47:44 GMT\nContent-Length: 83\nContent-Type: application/json { \"statusCode\": 429, \"message\": \"Rate limit is exceeded. Try again in 1 second.\"\n} The current rate limit for the SKY API Standard Edition is 5 calls per second. Quotas\nCalls to the SKY API are subject to the quota associated with your API subscription (see subscription).\nQuotas allow us to enforce an appropriate level of API use over a broad period of time by limiting the number of calls you can make within that period. When your quota is reached, you'll receive a 403 - Quota Exceeded response from the API, and the body of the response will indicate how long you must wait before the quota period renews (you can also inspect the Retry-After header which will contain the number of seconds to wait):\nRetry-After: 406\nDate: Tue, 24 May 2016 19:47:44 GMT\nContent-Length: 83\nContent-Type: application/json { \"statusCode\": 403, \"message\": \"Out of call volume quota. Quota will be replenished in 00:06:46.\"\n} The quota enforced for the SKY API Standard Edition is 25,000 calls per day. If you need to increase your quota, please fill out our request form. Pagination\nMany endpoints in the SKY API return a collection of records. In some cases (such as the Constituents (Get List) endpoint), we also support the concept of pagination, where instead of returning all of the results in a single response, we return them in smaller sets called pages. This approach allows us to keep the performance high on the server, and also minimizes the size of our responses on the wire by breaking them into smaller, more manageable blocks.\nlimit and offset\nWhen an endpoint supports pagination, it will accept limit and offset query string parameters to allow you to control the paging. The limit parameter represents the number of records to return (page size), while the offset parameter represents the number of records to skip.\nHere's an example request for returning the first 50 constituents via the Constituents (Get List) endpoint and the limit query string parameter:\nGET https://api.sky.blackbaud.com/constituent/constituent?limit=50 To retrieve the next 50 records, include offset=50 to skip the first 50 records:\nGET https://api.sky.blackbaud.com/constituent/constituent?limit=50&offset=50 To retrieve the next 50 records, include offset=100 to skip the first 100 records:\nGET https://api.sky.blackbaud.com/constituent/constituent?limit=50&offset=100 Note that offset numbering is zero-based, and that omitting the offset parameter will return the first n elements (where n represents the limit parameter). Refer to the endpoint documentation for specifics about any default/maximum allowed page size values.\nnext_link\nSome paginated endpoints may include a hypermedia link that can be used to fetch the next page of results. This value can be found in the next_link property of the collection response.\nDate formats\nUnless otherwise specified, dates are represented within the SKY API in ISO 8601 format. Some endpoints may further support time components or Coordinated Universal Time (UTC) format. Refer to the specific endpoint documentation for details on what date formats are supported.\nNote that fuzzy dates are handled differently from the ISO-8601 standard. For more information on fuzzy dates, see fuzzy dates.\nFuzzy dates\nFuzzy dates are found on entities with date-like properties where the complete date may be unknown. They are represented in the SKY API as a JSON object with 3 fields for the year, month, and day components: y,m,d.\nFuzzy date fields generally allow the following formats: month, day, and year\nmonth and year\nyear only Some entities may support additional formats, so be sure to reference the specific documentation for an endpoint that accepts or returns a fuzzy date.\nFor example, the constituent entity birthdate field is a fuzzy date that supports \"month and day\" as well as the above formats. In the below sample JSON representation, only the y property of the fuzzy date is shown which indicates that only the year value is known:\nDate: Tue, 24 May 2016 19:47:44 GMT\nContent-Type: application/json; charset=utf-8 { \"id\": \"280\", \"type\": \"individual\", \"lookup_id\": \"96\", \"inactive\": false, \"name\": \"Dr. Robert C. Hernandez\", \"last\": \"Hernandez\", \"first\": \"Robert\", \"middle\": \"Carlos\", \"nickname\": \"Bob\", \"title\": \"Dr.\", \"gender\": \"male\", \"birthdate\": { \"y\": 1961 }\n} The following example shows a partial collection of notes for a constituent. The date property is a fuzzy date, and in the first note the value represented is June, 2007.\nDate: Tue, 24 May 2016 19:47:44 GMT\nContent-Type: application/json; charset=utf-8 { \"count\": 25, \"value\": [ { \"id\": \"12\", \"type\": \"Address Changes\", \"date\": { \"y\": 2007, \"m\": 6 }, \"summary\": \"Vacation\", \"text\": \"Dr. Hernandez has purchased a vacation home in Arizona.\" }, { \"id\": \"10\", \"type\": \"Career\", \"date\": { \"y\": 2006, \"m\": 6, \"d\": 11 }, \"summary\": \"Opening of Pediatric Clinic with Partner\", \"text\": \"Dr. Hernandez plans to leave the pharmaceutical company to open a practice with his former colleague.\" }, ... ]\n} Fuzzy dates are not traditional dates and do not conform to the ISO 8601 standard. For additional information about fuzzy dates, see the entity reference.\nSecurity\nWhen calling the SKY API or when manually working with data in the underlying products, remember that specific operations and access to data follow the same rules. Required fields on records, business rules, and your user security (including advanced security) are all considered. For further information, review endpoint descriptions.\nActivating the SKY API Console The SKY API Console is a Blackbaud application built into the Endpoint Reference that can be used to test the SKY API. Before jumping in to build your own applications, we recommend you add the SKY API Console to your or your customer's tenant to aid with testing and development. To access a tenant's data, the SKY API Console, must be approved by a tenant administrator. For Blackbaud customers, a tenant administrator is a user within the organization that is part of the Supervisor security group. This may include Partners or API subscribers that have their own dedicated tenant, or are Supervisor users in their customer's tenant. Administrators provide approval for applications, including the SKY API Console, by activating the application within the Applications area of the product. To activate the SKY API Console, the tenant administrator needs to do the following: Copy the SKY API Console Application ID:A056CA6B-A3A8-4AC7-B325-997666306E52 Visit the Control Panel, Applications area of the product. Select Add application, paste the SKY API Console Application ID, and select Save. Once added, The SKY API Console will appear in the list of activated applications for the tenant. Important! The same process can be followed to activate additional applications for your tenant. Simply substitute the application ID for the one provided in the My Applications area of your Developer Account to add your own application, or use the application ID provided to you by a Partner or third party developer that you know and trust. Breaking changes\nBreaking changes are any changes that could potentially cause failures in applications that consume SKY API. If an API change could cause API calls to fail or return different results than before, then we consider it a breaking change. This includes changes to entities such as new data types or property names, changes to response data types or status codes, and changes to result sets for collection endpoints. We strive to avoid breaking changes if at all possible, so breaking changes are few and far between. However, they are sometimes necessary. We only make breaking changes when we determine that they are critical, and we weigh the disruption that the breaking changes will cause. We strive to be transparent about these changes, and we announce them in a changelog on the SKY API website and in the Community blog at least one week before we deploy to give consumers of the API time to assess the impact of the changes, to raise any questions, and to plan accordingly.\nFor more information about how we define and handle breaking changes, please see the breaking changes post in the Community blog. "
    },
    {
     "layout": "layout-showcase",
     "order": 500,
     "name": "Code Samples",
     "description": "A listing of helpful code samples.",
     "icon": "fa fa-github fa-4x",
     "showInNav": true,
     "showInHeader": true,
     "showInFooter": false,
     "showBreadcrumbs": true,
     "title": "Code Samples",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInSearch": true,
     "breadcrumbs": "Docs Code",
     "abspath": "docs/code/index.md",
     "uri": "/docs/code/",
     "nav_links": [
      {
       "name": "App Showcase",
       "layout": "layout-container",
       "description": "A collection of fully-formed applications that can assist in quick-starting your own SKY API applications",
       "order": 3,
       "icon": "fa fa-fw fa-3x fa-cube",
       "showBreadcrumbs": true,
       "title": "App Showcase",
       "appShowcase": [
        {
         "title": "Barkbaud (NodeJS)",
         "icon": "fa-cube",
         "repo": "<%= stache.config.github_repo_barkbaud_nodejs %>",
         "description": "A full-stack NodeJS application that demonstrates how to access constituent data via SKY API, implements a front-end using SKY UX, and negotiates security using OAuth 2.0 Authorization Code Flow",
         "demo": "<%= stache.config.tutorial_barkbaud_live_demo %>"
        }
       ],
       "sortKey": "order",
       "sortDirection": "asc",
       "showInNav": true,
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Code App-showcase",
       "abspath": "docs/code/app-showcase/index.md",
       "uri": "/docs/code/app-showcase/",
       "text": " App Showcase Barkbaud (NodeJS) A full-stack NodeJS application that demonstrates how to access constituent data via SKY API, implements a front-end using SKY UX, and negotiates security using OAuth 2.0 Authorization Code Flow View on GitHub View live demo "
      },
      {
       "name": "Authorization Code Flow",
       "description": "Quick-start code samples for Authorization Code Flow",
       "layout": "layout-showcase",
       "showBreadcrumbs": true,
       "icon": "fa fa-fw fa-3x fa-lock",
       "title": "Authorization Code Flow Code Samples",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInNav": true,
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Code Auth-code-flow",
       "abspath": "docs/code/auth-code-flow/index.md",
       "uri": "/docs/code/auth-code-flow/",
       "nav_links": [
        {
         "layout": "layout-container",
         "name": "C# .NET Core",
         "title": "Authorization Code Flow - C# .NET Core",
         "icon": "fa fa-fw fa-3x fa-windows",
         "description": "Learn how to create a .NET Core MVC C# server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
         "order": 1,
         "published": true,
         "showInNav": true,
         "showBreadcrumbs": true,
         "tutorial": true,
         "back_to_top": true,
         "redirectUrl": "http://localhost:5000/auth/callback",
         "sortKey": "order",
         "sortDirection": "asc",
         "showInHeader": true,
         "showInFooter": true,
         "showInSearch": true,
         "breadcrumbs": "Docs Code Auth-code-flow C-sharp",
         "abspath": "docs/code/auth-code-flow/c-sharp/index.md",
         "uri": "/docs/code/auth-code-flow/c-sharp/",
         "text": " Comments Edit in GitHub Authorization Code Flow - C# .NET Core GitHub Live Demo\nOverview\nWe use OAuth 2.0 to secure access to a user's SKY API data. In this tutorial we obtain user authorization using the Authorization Code Flow. From the user's perspective, the user authenticates as a Blackbaud user with the normal credentials for Blackbaud NXT and then authorizes (or denies) your application. To accomplish this, your application obtains an authorization code from the Blackbaud Authorization Service. The authorization code is then exchanged for an access token that signs requests to the SKY API on behalf of the user. The exchange involves your registered application's Application secret. For security reasons, the exchange is done through direct server-to-server communication. For this reason, we use ASP.NET Core for the server-side platform and C#.\nIn this tutorial, we will accomplish the following tasks: Ensure that you signed up for a developer account and obtained your subscription to an API product.\nRegister an application with SKY API.\nObtain authorization to access user data for a specific tenant.\nRetrieve data from a SKY API endpoint. For this tutorial, we strip down the user interface to highlight the Authorization Code Flow. Our Barkbaud code sample provides a rich user interface using SKY UX.\nPrerequisites Since we are using the Authorization Code Flow, we need to use a server-side software platform, such as .NET Core. You will need to Download and install .NET Core\nFamiliarity using a command line interface (CLI) such as Terminal or Windows Command Prompt.\nSign up for a GitHub account, if you don't already have one. The source code for this tutorial is stored in GitHub repository.\nInstall Git and have the ability to clone or fork a repo.\nA reliable Internet connection. Step 1 — Get Your Keys\nIf you have not already done so, complete the Getting Started guide. The tutorial guides you through signing up for a Blackbaud developer account and requesting a subscription to an API product. After you are approved, your subscription contains a Primary key and Secondary key. You can use either key as the subscription key value for the Bb-Api-Subscription-Key request header in calls to the API.\nDeveloper Sandbox Tenant\nAfter your subscription is approved, your developer account can access the Developer Sandbox tenant that represents a sample database. With this particular tenant, keep in mind that you share this sandbox with other developers. You can access the Developer Sandbox tenant and learn the various endpoints through the interactive SKY API Console within the API Reference.\nStep 2 — Register Your App\nTo call the SKY API, first register your application to obtain its unique set of credentials, which your users will use to enable your app to access their data From My Applications, click Register app. Enter the name, description, and logo of your application, as well as your organization's name. This information appears for users when they enable access to your application during the authorization process or in their product. In the Application website URL field, enter where users can learn more about your application online. Specify the URIs to use to redirect users back to your application during the authorization process. Note: The URIs must be absolute and use HTTPS. However, we do support http://localhost:port or http://127.0.0.1:port for local development. Important! When your application requests authorization to access a Blackbaud user's data, it includes a redirect_uri parameter in its query string. To authorize your application, this value must match exactly against one of the URIs you provide, including any trailing slashes. For more information, see common authorization issues. Click Save. After you register an app, note the ID and secret that appear under Application Credentials. These credentials are unique to your application, and verify its identity during the authorization process. ID -Your application's unique identifier. Your users will need this ID to enable your application to access their Blackbaud data. You can't modify this ID; if you need to change it for any reason, delete the application and re-register it. Secret -The key your application provides when it requests an access token to call the SKY API during the authorization process. This value is sensitive, so don't share it with anyone else! To display the secret, click Show. Very Important! Keep the application secret private and safe! If the secret is compromised, regenerate it. Blackbaud reserves the right to remove or deactivate your application to protect customer data. Step 3 — Grab the Source Code\nThe sky-api-auth-tutorial-c-sharp repo on GitHub provides a starter project to work through the Authorization Code Flow. Use a command prompt to clone the sky-api-auth-tutorial-c-sharp repo which creates a working directory by the same name that contains the code for the tutorial: $ git clone https://github.com/blackbaud/sky-api-auth-tutorial-c-sharp.git Step 4 — Prepare Your Environment\nLet's explore some application settings files and prep your environment variables. Open the sky-api-auth-tutorial-c-sharp working directory.\nOpen the appsettings.json which details generic properties to be used by the application. Take note of the following SKY API URI property values: AuthBaseUri URI to the Authorization Service. SkyApiBaseUri URI to the SKY API Endpoints. For local development, duplicate the file appsettings.json-sample, renaming it to appsettings.Development.json. The appsettings.Development.json file contains your registered application's environment variables. Note that private properties, such as your Application ID and Application secret, are stored in this file. For security, the appsettings.Development.json is excluded from being syncronized with GitHub via the file .gitignore. At run time, the application will merge these properties into the available environment variables. In .NET Core, the Startup class, Startup.cs provides the entry point for an application, and is required for all applications. This class configures the application and sets up the required middleware. { \"AppSettings\": { \"AuthClientId\": \"\", \"AuthClientSecret\": \"\", \"AuthRedirectUri\": \"http://localhost:5000/auth/callback\", \"AuthSubscriptionKey\": \"\" }\n} Using the values from your registered application and the subscription key from your Blackbaud Developer Profile, update appsettings.Development.json with the following values. All values are required.: AuthClientId Your registered application's Application ID. AuthClientSecret Your registered application's Application secret. AuthRedirectUri One of your registered application's Redirect URIs. For this tutorial, we will use http://localhost:5000/auth/callback. AuthSubscriptionKey Your Blackbaud Developer Subscription Key. Use either the Primary key or Secondary key, visible on your Blackbaud Developer Profile. Save the file. Step 5 — Run the Application Using Command Prompt/Terminal/bash prompt, ensure you are in the working directory.\nOpen and review the project.json file. This file details the application’s dependencies. These NuGet modules (project dependencies) are installed when issuing the dotnet restore command within Command Prompt/Terminal/bash prompt.\nOn a Mac, issue the following commands to restore the packages specified in the project.json file and run the actual sample:\n$ dotnet restore\n$ export ASPNETCORE_ENVIRONMENT=Development && dotnet run On a PC, type:\n$ dotnet restore\n$ set ASPNETCORE_ENVIRONMENT=Development && dotnet run Visit http://localhost:5000/ to view your locally running application. Application Starting Point IIS is used as the webserver. An ASP.NET Core Module configured in project.json is used to list dependencies and configure IIS to launch and host your application.\nOpen the Program.cs file. The Main() method is the starting point of our application. It is responsible for initializing the application. We use WebHostBuilder to listen on a particular IP address and port: http://localhost:5000/. As of RC2 an ASP.NET Core application is a .NET Core Console application that calls into ASP.NET specific libraries. This code runs on the server-side and is not visible to the application user. Running the code server-side helps to protect your Application secret.\nusing System.IO;\nusing Microsoft.AspNetCore.Hosting; namespace Blackbaud.AuthCodeFlowTutorial\n{ public class Program { public static void Main(string[] args) { var host = new WebHostBuilder() .UseKestrel() .UseContentRoot(Directory.GetCurrentDirectory()) .UseIISIntegration() .UseStartup() .Build(); host.Run(); } }\n}\nOpen your browser to http://localhost:5000/ to request the Home page. When the front page loads, the AngularJS on the Home page (/Views/Shared/_Layout.cshtml) makes a request to the /auth/authenticated endpoint:\n(function (angular) { 'use strict'; angular.module('AuthCodeFlowTutorial', []) .controller('ConstituentCtrl', function ($scope, $http) { // Check user access token. $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } ...\nThe call to the endpoint routes to the corresponding controller (/Controllers/AuthenticationController.cs) and returns a Boolean representing the current user's authentication status. If the application has not yet been authorized by the end user, then IsAuthenticated() will return false.\n[HttpGet(\"authenticated\")]\npublic ActionResult Authenticated()\n{ return Json(new { authenticated = _authService.IsAuthenticated() });\n}\n... Displaying the Log in button If the user is not authenticated, a Log in button is displayed.\nNote: The browser may display a warning that the connection is not private. For this tutorial, you can ignore this message. To proceed, click Show advanced and then click Proceed to localhost (unsafe). Open the Views/Shared/_Layout.cshtml file. Notice that the body tag includes an attribute named ng-app. The front-end of our application uses AngularJS to interact with our Web server routes. The div.container element includes an attribute named ng-controller which references an AngularJS controller to handle the model data.\n<body ng-app=\"AuthCodeFlowTutorial\"> <div class=\"container\" ng-controller=\"ConstituentCtrl\" ng-cloak> ...\nWhen the Home page first loads the app will not have received authorization from the user to access their SKY API data. As a result the isAuthenticated scope variable will be false and the Home page's Angular HTML template displays the Log in button:\n<div ng-if=\"!isAuthenticated\"> <a href=\"/auth/login\" class=\"btn btn-primary\">Log in</a>\n</div>\n... Obtain an Access Token Open /Controllers/AuthenticationController.cs.\nWhen the user clicks the Log in button, a call is made to LogIn() which redirects the browser to SKY API’s authorization endpoint to start the authentication and authorization process. The user must authenticate with their Blackbaud credentials (if they are not already signed in) and authorize your application to access their SKY API data.\n[HttpGet(\"login\")]\npublic ActionResult LogIn()\n{ Uri address = _authService.GetAuthorizationUri(); return Redirect(address.ToString());\n}\n...\nOnce authorized, SKY API redirects the user back to the /auth/callback URI with an authorization code. Once an authorization code has been obtained, it is exchanged the code for an access token. The app is then redirected back to the Home page. [HttpGet(\"callback\")]\npublic ActionResult Callback()\n{ string code = Request.Query[\"code\"]; _authService.ExchangeCodeForAccessToken(code); return Redirect(\"/\");\n}\n... Retrieve Constituent Data Open the Home page (Views/Shared/_Layout.cshtml).\nAngularJS again makes the request to auth/authenticated, which now returns true. Since the user is authorized, AngularJS then makes a request the application’s constituent API endpoint /api/constituents/280 to retrieve a constituent record:\nangular.module('AuthCodeFlowTutorial', []) .controller('ConstituentCtrl', function ($scope, $http) { // Check user access token. $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } // Access token is valid. Fetch constituent record. $http.get('/api/constituents/280').then(function (res) { $scope.constituent = res.data; $scope.isReady = true; }); }); ... The data is returned as JSON to the Home page where the model's data is projected through the view of the HTML template:\n<div ng-if=\"isAuthenticated\"> <h3>Constituent: </h3> <p> See <a href=\"/api/entity-reference/constituent\">Constituent</a> within the SKY API entity reference for a full listing of properties. </p> <p ng-if=\"::constituent.error\" ng-bind=\"::constituent.error\" class=\"alert alert-danger\"></p> <div ng-if=\"::constituent.id\" class=\"table-responsive\"> <table class=\"table table-striped table-hover\"> <thead> <tr> <th>Name</th> <th>Value</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>{{ constituent.id }}</td> </tr> <tr> <td>type</td> <td>{{ constituent.type }}</td> </tr> <tr> <td>lookup_id</td> <td>{{ constituent.lookup_id }}</td> </tr> <tr> <td>first</td> <td>{{ constituent.first }}</td> </tr> <tr> <td>last</td> <td>{{ constituent.last }}</td> </tr> </tbody> </table> </div>\n... Once the constituent information is retrieved and added to the front page, Log Out and Refresh Access Token buttons are displayed.\nOpen /Controllers/AuthenticationController.cs\nIf the user clicks Log Out, they are redirected to /auth/logout which destroys the access/refresh token stored in the browser’s session.\nIf the user clicks Refresh Access Token, AngularJS makes a request to /auth/refresh-token, which asks SKY API to return a refreshed access token, which is then stored in the browser’s session. That's it! Be sure to take a look at our other code samples.\nCheck out the README where you can view a live demo of the application hosted on Microsoft Azure.\nThe README also contains instructions for deploying to Azure App Services rather than your local development environment.\nYou can create an issue to report a bug or request a feature for this code sample. For all other feature requests, see ideas. "
        },
        {
         "layout": "layout-container",
         "name": "Chrome Extension",
         "title": "Authorization Code Flow - Chrome Extension",
         "description": "Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Authorization Code Flow.",
         "order": 2,
         "icon": "fa fa-fw fa-3x fa-chrome",
         "showInNav": true,
         "showBreadcrumbs": true,
         "back_to_top": true,
         "sortKey": "order",
         "sortDirection": "asc",
         "showInHeader": true,
         "showInFooter": true,
         "showInSearch": true,
         "breadcrumbs": "Docs Code Auth-code-flow Chrome-extension",
         "abspath": "docs/code/auth-code-flow/chrome-extension/index.md",
         "uri": "/docs/code/auth-code-flow/chrome-extension/",
         "text": " Edit in GitHub Authorization Code Flow - Chrome Extension GitHub\nLearn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Authorization Code Flow.\nView the source on GitHub "
        },
        {
         "layout": "layout-container",
         "name": "NodeJS",
         "title": "Authorization Code Flow - NodeJS",
         "description": "Learn how to create a NodeJS server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
         "order": 3,
         "icon": "fa fa-fw fa-3x fa-desktop",
         "published": true,
         "showInNav": true,
         "tutorial": true,
         "showBreadcrumbs": true,
         "back_to_top": true,
         "redirectUrl": "http://localhost:5000/auth/callback",
         "sortKey": "order",
         "sortDirection": "asc",
         "showInHeader": true,
         "showInFooter": true,
         "showInSearch": true,
         "breadcrumbs": "Docs Code Auth-code-flow Nodejs",
         "abspath": "docs/code/auth-code-flow/nodejs/index.md",
         "uri": "/docs/code/auth-code-flow/nodejs/",
         "text": " Comments Edit in GitHub Authorization Code Flow - NodeJS GitHub\nOverview\nWe use OAuth 2.0 to secure access to a user's SKY API data. In this tutorial we obtain user authorization using the Authorization Code Flow. From the user's perspective, the user authenticates as a Blackbaud user with the normal credentials for Blackbaud NXT and then authorizes (or denies) your application. To accomplish this, your application obtains an authorization code from the Blackbaud Authorization Service. The authorization code is then exchanged for an access token that signs requests to the SKY API on behalf of the user. The exchange involves your registered application's Application secret. For security reasons, the exchange is done through direct server-to-server communication. For this reason, we use Node.js, a server-side platform.\nIn this tutorial, we will accomplish the following tasks: Ensure that you signed up for a developer account and obtained your subscription to an API product.\nRegister an application with SKY API.\nObtain authorization to access user data for a specific tenant.\nRetrieve data from a SKY API endpoint. For this tutorial, we strip down the user interface to highlight the Authorization Code Flow. Our Barkbaud code sample provides a rich user interface using SKY UX.\nPrerequisites A server such as your local machine that is capable of running Node.js.\nFamiliarity with Node.js, using NPM to install project dependencies, and environment variables including setting them in either an OSX/Linux or Windows environment.\nFamiliarity using a command line interface (CLI) such as Terminal or Windows Command Prompt.\nSign up for a GitHub account, if you don't already have one. The source code for this tutorial is stored in GitHub repository.\nInstall Git and have the ability to clone or fork a repo.\nA reliable Internet connection to clone the repo and install the project's dependencies. Step 1 — Get Your Keys\nIf you have not already done so, complete the Getting Started guide. The tutorial guides you through signing up for a Blackbaud developer account and requesting a subscription to an API product. After you are approved, your subscription contains a Primary key and Secondary key. You can use either key as the subscription key value for the Bb-Api-Subscription-Key request header in calls to the API.\nDeveloper Sandbox Tenant\nAfter your subscription is approved, your developer account can access the Developer Sandbox tenant that represents a sample database. Keep in mind that you share this sandbox with other developers. You can access the Developer Sandbox tenant through the interactive SKY API Console within the API Reference.\nStep 2 — Register Your App\nTo call the SKY API, first register your application to obtain its unique set of credentials, which your users will use to enable your app to access their data From My Applications, click Register app. Enter the name, description, and logo of your application, as well as your organization's name. This information appears for users when they enable access to your application during the authorization process or in their product. In the Application website URL field, enter where users can learn more about your application online. Specify the URIs to use to redirect users back to your application during the authorization process. Note: The URIs must be absolute and use HTTPS. However, we do support http://localhost:port or http://127.0.0.1:port for local development. Important! When your application requests authorization to access a Blackbaud user's data, it includes a redirect_uri parameter in its query string. To authorize your application, this value must match exactly against one of the URIs you provide, including any trailing slashes. For more information, see common authorization issues. Click Save. After you register an app, note the ID and secret that appear under Application Credentials. These credentials are unique to your application, and verify its identity during the authorization process. ID -Your application's unique identifier. Your users will need this ID to enable your application to access their Blackbaud data. You can't modify this ID; if you need to change it for any reason, delete the application and re-register it. Secret -The key your application provides when it requests an access token to call the SKY API during the authorization process. This value is sensitive, so don't share it with anyone else! To display the secret, click Show. Very Important! Keep the application secret private and safe! If the secret is compromised, regenerate it. Blackbaud reserves the right to remove or deactivate your application to protect customer data. Step 3 — Install Node.js\nAfter you have your subscription key, Application ID, and Application secret, it's time to establish your development environment. Since we are using the Authorization Code Flow, we need to use a server-side software platform. For this tutorial, we will use Node.js. Download and install Node.js. Use the default settings for your development environment.\nCreate a file named testserver.js and add the following code: // Create a very simple HTTP web server on your local machine. // Set up a HTTP Web server and client, require('http'). var http = require('http'); // createServer returns a new instance of the http server. // A function is used as a request listener. // req is an instance of the incoming request. // res is an instance of the server response. // When you browse to http://localhost:1337/, a 'request' event occurs and // \"Hello World\" is written from the HTTP Web server back to your browser. http.createServer(function (req, res) { res.writeHead(200, { 'Content-Type': 'text/plain' }); res.end('Hello World'); }).listen(1337, \"localhost\"); console.log('Server running at http://localhost:1337/'); Save the file in a folder named testnodejs. From a command prompt, change the directory to testnodejs and run the testserver.js file: $ cd testnodejs\n$ node testserver.js The Web server listens for requests on your localhost, port 1337. In a Web browser, navigate to localhost:1337. The Web server displays a page with with \"Hello World.\" To stop the Web server, type CTRL-C in the command line. Step 4 — Grab the Source Code\nThe sky-api-auth-tutorial repo on GitHub provides a starter project to work through the Authorization Code Flow. Use a command prompt to clone the sky-api-auth-tutorial. The following command creates a working directory named sky-api-auth-tutorial that contains the code for the tutorial: $ git clone https://github.com/blackbaud/sky-api-auth-tutorial.git Step 5 — Prepare Your Environment Open the sky-api-auth-tutorial working directory and copy the configuration file sky.env-sample as sky.env. The sky.env file contains the application's environment variables for NodeJS environments. Update sky.env with the following values: AUTH_CLIENT_ID Your registered application's Application ID (from Step 2). (See, Managing your apps.) AUTH_CLIENT_SECRET Your registered application's Application Secret (from Step 2). (See, Managing your apps.) AUTH_REDIRECT_URI One of your registered application's Redirect URIs (from Step 2). For this tutorial, enter http://localhost:5000/auth/callback. (See My Applications.) AUTH_SUBSCRIPTION_KEY Your Blackbaud Developer Subscription Key. Use either the Primary key or Secondary key, visible on your Blackbaud Developer Profile. PORT The Web server port that will run the application. For this tutorial, enter 5000. Save the environment file. Review the .gitignore file. The purpose of the file is to specify the untracked files to ignore. Note that any .env files are ignored. This prevents the environment files from being synced to GitHub and protects your registered application's keys and other sensitive data from being exposed. Step 6 — Install Dependencies From the working directory, run npm install to install the project dependencies.\nNPM is the package manager that comes bundled with Node.js (since you already installed Node.js, you also have NPM). The command npm install downloads any dependencies listed in the package.json file and adds them to the app's node_modules directory (this command also creates this directory if it doesn't already exist). Each dependency is represented as a child directory of node_modules. $ cd sky-api-auth-tutorial\n$ npm install After you run npm install, verify that the sky-api-auth-tutorial working directory contains the node_modules subfolder. npm install depends on a reliable Internet connection to install dependencies. If you have issues running the command, you can hard delete the node_modules folder and run npm install again. Step 7 — Run the Application Using Command Prompt/Terminal, ensure you are in the working directory.\nType npm start to start the application server at http://localhost:5000. $ npm start Application starting point Open the index.js file. This is the starting point of our application. This code runs on the server side and is not visible to the application user. The code performs the following:\nIt registers our application dependencies such as Express.\nIt handles authorization and user requests to the home page and data endpoints.\nIt creates a web server on your local machine at https://localhost:5000. To request the home page open your browser to http://localhost:5000/. It displays the authorization options. Your browser may display a warning that the connection is not private. For this tutorial, ignore this message. To proceed, click Show advanced, and then click Proceed to localhost (unsafe). Open the ui folder and the index.html file. This opens the home page for our application, where we can initialize our app and load assets to build our page. The body tag includes an attribute named ng-app. The front-end of our application uses AngularJS to interact with our Node.js server routes.\nBelow the body tag, the ng-view tag is used as a hook for our Angular Router to load our desired template view.\n<!-- INITIALIZE THE APP -->\n<body ng-app=\"AuthCodeFlowTutorial\"> <!-- LOAD OUR VIEWS --> <ng-view></ng-view> ... Set up the router Open the app folder and the main.js file. Our application's logic lives here.\nFirst, we declare our angular module and inject the ngRoute dependency.\nangular.module('AuthCodeFlowTutorial', ['ngRoute'])\nNext, we initialize our Angular Router to manage our views and controllers. angular.module('AuthCodeFlowTutorial', ['ngRoute']) .config(function ($routeProvider) { $routeProvider .when('/home', { templateUrl: './app/main-template.html', controller: 'MainController' }) .when('/auth-success', { template: 'Login Successful', controller: 'AuthController' }) .otherwise({ redirectTo: '/home' }) In this example, we use two views and two controllers. As your app grows, you can add more views and controllers. Display the authorize buttons Open the app folder and the main-template.html file. This is our application's core view.\nThe main.js file holds the logic to initiate our AngularJS Controllers and our Angular Router.\nJust after the page title, the authorize buttons reference the server's authorization endpoint. When a user clicks one of these buttons, the authorization process begins. When a session is authenticated, the authorize buttons are hidden. The Authorize using redirect button initiates the authorization process by redirecting the browser to the authorization endpoint to initiate the authentication process.\n<div ng-if=\"!isAuthenticated\" class=\"col-sm-12 well\">\n...\n<div class=\"col-sm-5 well login-options\"> <span class=\"login-options-label\">Login using redirect</span> <a href=\"/auth/login\" class=\"btn btn-primary btn-block btn-lg\">Log in</a>\n</div> The Authorize using popup button opens a popup window that is directed to the server's authorization endpoint to initiate the authentication process.\n<div ng-if=\"!isAuthenticated\" class=\"col-sm-12 well\">\n...\n<div class=\"col-sm-5 col-sm-offset-2 well login-options\"> <span class=\"login-options-label\">Login using popup</span> <button ng-click=\"popupLogin()\" class=\"btn btn-primary btn-block btn-lg\" target=\"login-iframe\">Log in</button>\n</div> Using the popup option, our Angular code performs the following actions: It calls the popupLogin() method. This method opens a window at the specified URL, and we pass in a ?redirect= parameter and set it to the hash /%23/auth-success, which translates to:/#/auth-success.\n.controller('MainController', function ($scope, $http, $window) {\n...\n$scope.popupLogin = function () { var popup popup = window.open('auth/login?redirect=/%23/auth-success', 'login', 'height=450,width=600,'); if (window.focus) { popup.focus(); }\n} When the browser redirects to the /#/auth-success, the AuthController closes the current window and redirects the browser to the route '/' so our router will redirect the page to #/home.\n.controller('AuthController', function ($window) { ... $window.opener.location = '/'; $window.close();\n}) The JavaScript in main.js in the MainController uses Ajax calls to the /auth/authenticated endpoint to determine whether the users are logged in. If the users access token has expired or is invalid, the page displays the Authorize buttons. Users must log in to obtain a valid access token. angular.module('AuthCodeFlowTutorial', ['ngRoute']) ... .controller('MainController', function ($scope, $http) { ... /** * Check user access token. */ $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; /** * Access token is valid. Fetch constituent record. */ if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } }); }); Obtain an Access Token Click one of the Authorize buttons and enter your Blackbaud account credentials. After authentication, your browser redirects to the Blackbaud Authorization Service authorization form. Open index.js and /server/routes/auth.js. The Authroize button prompt a request to the web server's /auth/login endpoint. The route in the app's main index.js file directs requests to the getLogin() function within /server/routes/auth.js. // Register our OAUTH2 routes\napp.get('/auth/authenticated', routes.auth.getAuthenticated);\napp.get('/auth/login', routes.auth.getLogin);\napp.get('/auth/callback', routes.auth.getCallback);\napp.get('/auth/logout', routes.auth.getLogout); The auth.js file relies on the simple-oauth2 client library. To creating an object you must provide your registered application's Application ID and Application secret values, which reside in the project's sky.env file as the AUTH_CLIENT_ID and AUTH_CLIENT_SECRET environment variables. You need the URL to the Blackbaud Authorization Service along with the token endpoint. oauth2 = require('simple-oauth2')({ clientID: process.env.AUTH_CLIENT_ID, clientSecret: process.env.AUTH_CLIENT_SECRET, site: 'https://oauth2.apim.blackbaud.com/', tokenPath: '/token'\n}); To obtain an authorization code, the getLogin() function uses simple-oauth2's authorizeURL() function to display the Blackbaud Authorization Service's authorization form. After users approve or deny the request, the responses are redirected using the value of the AUTH_REDIRECT_URI environment variable: https://localhost:5000/auth/callback. function getLogin(request, response) { request.session.redirect = request.query.redirect; request.session.state = crypto.randomBytes(48).toString('hex'); response.redirect(oauth2.authCode.authorizeURL({ redirect_uri: process.env.AUTH_REDIRECT_URI, state: request.session.state }));\n} The access token exchange should occur server side. Do not expose the Application secret to users in client-side code. Do not expose your Application secret in a source code repository such as GitHub. The path /auth/callback is routed to the getCallback() function that exchanges authorization codes for access tokens. function getCallback(request, response) { ... options = { code: request.query.code, redirect_uri: process.env.AUTH_REDIRECT_URI }; oauth2.authCode.getToken(options, function (errorToken, ticket) { if (errorToken) { error = errorToken.message; } else { redirect = request.session.redirect || '/'; request.session.redirect = ''; request.session.state = ''; saveTicket(request, ticket); response.redirect(redirect); } }); ...\n} The access token value is not passed back to the client. Instead, the saveTicket() function saves it to the session state. function saveTicket(request, ticket) { request.session.ticket = ticket; request.session.expires = (new Date().getTime() + (1000 * ticket.expires_in));\n} Retrieve constituent data\nThe response redirects users to the home page and AppController. The AppController verifies that users are logged in through calls to the web server's /auth/authenticated endpoint. After verification, calls are made to the web server's api/constituents/280.\nangular.module('AuthCodeFlowTutorial', [])\n.controller('AppController', function ($scope, $http, $window) { // Checks the user access token. $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } // Access token is valid. Fetch constituent record. $http.get('/api/constituents/280').then(function (res) { $scope.constituent = res.data; $scope.isReady = true; }); }); Open /server/libs/sky.js and /server/routes/api.js. The route in the app's main index.js file directs the request to the getConstituent() function in /server/libs/sky.js. The call is passed along to /server/routes/api.js, which interacts directly with SKY API endpoints. Eventually the call makes its way to the proxy() function. Here, we can see the use of the Bb-Api-Subscription-Key and Authorization request headers: function proxy(request, method, endpoint, body, callback) { var options = { json: true, method: method, body: body, url: 'https://api.sky.blackbaud.com/constituent/v1/'' + endpoint, headers: { 'Bb-Api-Subscription-Key': process.env.AUTH_SUBSCRIPTION_KEY, 'Authorization': 'Bearer ' + request.session.ticket.access_token } }; promise(options) .then(callback) .catch(function (err) { console.log('Proxy Error: ', err); });\n} The Bb-Api-Subscription-Key value represents your Blackbaud developer account's approved subscription to an API product. You can use your account's Primary key or Secondary key. The Authorization value represents your authorization to use the API. The Authorization header starts with Bearer followed by a space and then the value for the access token. A call to the Constituent (Get) endpoint retrieves constituent data and sends it back to the browser. function get(request, endpoint, callback) { return proxy(request, 'GET', endpoint, '', callback);\n} The data is returned as JSON to the browser where the model's data is projected through the view of the Angular template. <div ng-if=\"isAuthenticated\"> <h3>Constituent: {{ constituent.name }}</h3> <p> See <a href=\"https://developer.sky.blackbaud.com/contract-reference#Constituent\" target=\"_blank\">Constituent</a> within the SKY API contact reference for a full listing of properties. </p> <div class=\"table-responsive\"> <table class=\"table table-striped table-hover\"> <thead> <tr> <th>Name</th> <th>Value</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>{{ constituent.id }}</td> </tr> <tr> <td>type</td> <td>{{ constituent.type }}</td> </tr> <tr> <td>lookup_id</td> <td>{{ constituent.lookup_id }}</td> </tr> <tr> <td>first</td> <td>{{ constituent.first }}</td> </tr> <tr> <td>last</td> <td>{{ constituent.last }}</td> </tr> </tbody> </table> </div> <a href=\"/auth/logout\" class=\"btn btn-primary\">Log out</a>\n</div> Summary\nYou should now have a fully functioning application using implicit-flow. Users of your app should be able to log in with their Blackbaud credentials, authorize the app, and get constituent data after they are authenticated. Be sure to take a look at our other code samples. You can create an issue to report a bug or request a feature for this code sample. For all other feature requests, see ideas. "
        },
        {
         "layout": "layout-container",
         "name": "PHP",
         "title": "Authorization Code Flow - PHP",
         "icon": "fa fa-3x fa-file-code-o",
         "description": "Learn how to create a PHP server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
         "order": 4,
         "showInNav": true,
         "showBreadcrumbs": true,
         "tutorial": true,
         "redirectUrl": "http://localhost:8888/auth/callback.php",
         "sortKey": "order",
         "sortDirection": "asc",
         "showInHeader": true,
         "showInFooter": true,
         "showInSearch": true,
         "breadcrumbs": "Docs Code Auth-code-flow Php",
         "abspath": "docs/code/auth-code-flow/php/index.md",
         "uri": "/docs/code/auth-code-flow/php/",
         "text": " Comments Edit in GitHub Authorization Code Flow - PHP GitHub\nOverview\nWe use OAuth 2.0 to secure access to a user's SKY API data. In this tutorial we obtain user authorization using the Authorization Code Flow. From the user's perspective, the user authenticates as a Blackbaud user with the normal credentials for Blackbaud NXT and then authorizes (or denies) your application. To accomplish this, your application obtains an authorization code from the Blackbaud Authorization Service. The authorization code is then exchanged for an access token that signs requests to the SKY API on behalf of the user. The exchange involves your registered application's Application secret. For security reasons, the exchange is done through direct server-to-server communication. For this reason, we use PHP on the server.\nIn this tutorial, we will accomplish the following tasks: Ensure that you signed up for a developer account and obtained your subscription to an API product.\nRegister an application with SKY API.\nObtain authorization to access user data for a specific tenant.\nRetrieve data from a SKY API endpoint. For this tutorial, we strip down the user interface to highlight the Authorization Code Flow. Our Barkbaud code sample provides a rich user interface using SKY UX.\nPrerequisites A server such as your local machine that is capable of running PHP. We recommend MAMP.\nFamiliarity using a command line interface (CLI) such as Terminal or Windows Command Prompt.\nSign up for a GitHub account, if you don't already have one. The source code for this tutorial is stored in GitHub repository.\nInstall Git and have the ability to clone or fork a repo.\nA reliable Internet connection. Step 1 — Get Your Keys\nIf you have not already done so, complete the Getting Started guide. The tutorial guides you through signing up for a Blackbaud developer account and requesting a subscription to an API product. After you are approved, your subscription contains a Primary key and Secondary key. You can use either key as the subscription key value for the Bb-Api-Subscription-Key request header in calls to the API.\nDeveloper Sandbox Tenant\nAfter your subscription is approved, your developer account can access the Developer Sandbox tenant that represents a sample database. With this particular tenant, keep in mind that you share this sandbox with other developers. You can access the Developer Sandbox tenant and learn the various endpoints through the interactive SKY API Console within the API Reference.\nStep 2 — Register Your App\nTo call the SKY API, first register your application to obtain its unique set of credentials, which your users will use to enable your app to access their data From My Applications, click Register app. Enter the name, description, and logo of your application, as well as your organization's name. This information appears for users when they enable access to your application during the authorization process or in their product. In the Application website URL field, enter where users can learn more about your application online. Specify the URIs to use to redirect users back to your application during the authorization process. Note: The URIs must be absolute and use HTTPS. However, we do support http://localhost:port or http://127.0.0.1:port for local development. Important! When your application requests authorization to access a Blackbaud user's data, it includes a redirect_uri parameter in its query string. To authorize your application, this value must match exactly against one of the URIs you provide, including any trailing slashes. For more information, see common authorization issues. Click Save. After you register an app, note the ID and secret that appear under Application Credentials. These credentials are unique to your application, and verify its identity during the authorization process. ID -Your application's unique identifier. Your users will need this ID to enable your application to access their Blackbaud data. You can't modify this ID; if you need to change it for any reason, delete the application and re-register it. Secret -The key your application provides when it requests an access token to call the SKY API during the authorization process. This value is sensitive, so don't share it with anyone else! To display the secret, click Show. Very Important! Keep the application secret private and safe! If the secret is compromised, regenerate it. Blackbaud reserves the right to remove or deactivate your application to protect customer data. Step 3 — Grab the Source Code\nThe sky-api-tutorial-auth-code-php repo on GitHub provides a starter project to work through the Authorization Code Flow.\nUse a command prompt to clone the sky-api-tutorial-auth-code-php repo which creates a working directory by the same name that contains the code for the tutorial: $ git clone https://github.com/blackbaud/sky-api-tutorial-auth-code-php.git Step 4 — Prepare Your Environment Open the sky-api-tutorial-auth-code-php working directory and copy the configuration file config.php.sample as config.php. The config.php file contains the application's environment variables for the PHP environment. Update config.php with the following values: AUTH_CLIENT_ID Your registered application's Application ID (from Step 2). (See, Managing your apps.) AUTH_CLIENT_SECRET Your registered application's Application Secret (from Step 2). (See, Managing your apps.) AUTH_REDIRECT_URI One of your registered application's Redirect URIs (from Step 2). For this tutorial, enter http://localhost:8888/auth/callback.php. AUTH_SUBSCRIPTION_KEY Your Blackbaud Developer Subscription Key. Use either the Primary key or Secondary key, visible on your Blackbaud Developer Profile. Save the config file. Review the .gitignore file. The purpose of the file is to specify the untracked files to ignore. Note that config.php file is ignored. This prevents the config file from being synced to GitHub and protects your registered application's keys and other sensitive data from being exposed. Step 5 — Install and Configure MAMP\nAfter you have your subscription key, Application ID, Application secret, and the sky-api-auth-tutorial-php source code, It's time to establish your development environment. Since we are using the Authorization Code Flow, we need to use a server-side software platform. For this tutorial, we will use PHP with MAMP to serve the project locally. Download and install MAMP.\nLaunch MAMP and edit the following in Preferences. Tab Field Description Web Server Document Root Change this path to point at your cloned sky-api-tutorial-auth-code-php directory. Select Ok and Start Servers.\nIn a Web browser, navigate to localhost:8888. The Web server displays our app. Application Starting Point Open the index.html file. MAMP serves this file as our applications root where we initialize our app and load assets to build our page. The body tag includes an attribute named ng-app. The front-end of our application uses AngularJS to interact with our PHP server. <!-- INITIALIZE THE APP --> <body ng-app=\"AuthCodeFlowTutorial\"> <div class=\"container\" ng-controller=\"ConstituentCtrl\" ng-cloak> ... Open your browser to http://localhost:8888 to request the Home page. When the front page loads, the AngularJS on the Home page (index.html) makes a request to the /auth/authenticated.php endpoint:\n(function (angular) { 'use strict'; angular.module('AuthCodeFlowTutorial', []) .controller('ConstituentCtrl', function ($scope, $http, $window) { // Check user access token. $http.get('/auth/authenticated.php').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } ... The call to the endpoint routes to the corresponding php page (/auth/authenticated.php) and returns a Boolean representing the current user's authentication status. First, it requires and loads the /includes/blackbaud/blackbuad.php file.\n<?php require_once '../includes/blackbaud/blackbaud.php'; echo json_encode(array( 'authenticated' => blackbaud\\Session::isAuthenticated() )); ... Open the /includes/blackbaud/blackbaud.php file. The PHP code pulls in the rest of our required controllers, config environment variables, and http library for making API requests. We can see **require_once 'session.php';** pulls in the includes/blackbaud/session.php file. <?php // Error reporting, for development only. ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); require_once 'session.php'; require_once join(DIRECTORY_SEPARATOR, array($_SERVER['DOCUMENT_ROOT'], 'config.php')); require_once join(DIRECTORY_SEPARATOR, array('api', 'constituents.php')); require_once 'auth.php'; require_once 'http.php'; ... Open the /includes/blackbaud/session.php file. It begins by defining our namespace blackbaud, allowing the methods and variables defined beneath it to be accessed by any other classes also under that namespace. Our original call to /auth/authenticated/ made use of the isAuthenticated() method in this Session object. This method checks for the existance of a PHP $_SESSION object and looks for an access_token. If the application has not yet been authorized by the end user, then IsAuthenticated() will return false. <?php public static function isAuthenticated() { return isset($_SESSION[self::$tokenName]) && isset($_SESSION[self::$tokenName]['access_token']); } ... Display the Log in button If the user is not authenticated, a Log in button is displayed.\nNote: The browser may display a warning that the connection is not private. For this tutorial, you can ignore this message. To proceed, select Show advanced and then select Proceed to localhost (unsafe). Open the index.html file. Notice that the body tag includes an attribute named ng-app. The front-end of our application uses AngularJS to interact with our Web server routes. The div.container element includes an attribute named ng-controller which references an AngularJS controller to handle the model data.\n<body ng-app=\"AuthCodeFlowTutorial\"> <div class=\"container\" ng-controller=\"ConstituentCtrl\" ng-cloak> ...\nWhen the Home page first loads the app will not have received authorization from the user to access their SKY API data. As a result the isAuthenticated scope variable will be false and the Home page's Angular HTML template displays the Log in button.\n<div ng-if=\"!isAuthenticated\"> <a href=\"/auth/login\" class=\"btn btn-primary\">Log in</a>\n</div>\n... Obtain an Access Token Open /includes/blackbaud/auth.php.\nWhen the user selects the Log in button, a call is made to auth/login.php, which redirects the request to /includes/blackbaud/auth.php file. Here, the redirect() method is called, which redirects the browser to SKY API’s authorization endpoint to start the authentication and authorization process. The user must authenticate with their Blackbaud credentials (if they are not already signed in) and authorize your application to access their SKY API data.\n<?php\nclass Auth { public static function redirect() { $auth_uri = self::getAuthorizationUri(); header(\"Location: $auth_uri\", true, 301); exit(); } ... private static function getAuthorizationUri() { return AUTH_BASE_URI . 'authorization?' . http_build_query(array( 'client_id'=> AUTH_CLIENT_ID, 'response_type' => 'code', 'redirect_uri' => AUTH_REDIRECT_URI )); } ...\nOnce authorized, SKY API redirects the user back to the /auth/callback.php URI with an authorization code. Once an authorization code has been obtained, it exchanges the code for an access token. The app is then redirected back to the Home page.\n<?php\nrequire_once '../includes/blackbaud/blackbaud.php'; blackbaud\\Auth::exchangeCodeForAccessToken($_GET['code']); header('Location: /');\nexit(); ...\n// build out the request body with the code from the redirect URI, and call the fetchTokens() method, passing the newly made $body array.\npublic static function exchangeCodeForAccessToken($code = 0) {\n$body = array( 'code' => $code, 'grant_type' => 'authorization_code', 'redirect_uri' => AUTH_REDIRECT_URI\n);\nreturn self::fetchTokens($body);\n} ...\n// build out the appropriate token headers, and make the reqeust to the SKY API endpoint. Grab the returned JSON response and\n// store the tokens in the Session.\nprivate static function fetchTokens($body = array()) {\n$headers = array( 'Content-type: application/x-www-form-urlencoded', 'Authorization: Basic ' . base64_encode(AUTH_CLIENT_ID . ':' . AUTH_CLIENT_SECRET)\n); $url = AUTH_BASE_URI . 'token'; $response = Http::post($url, $body, $headers);\n$token = json_decode($response, true);\nSession::setToken($token);\nreturn $response;\n} Retrieve Constituent Data Open the index.html file.\nAngularJS again makes the request to auth/authenticated, which now returns true. Since the user is authorized, AngularJS then makes a request the application’s constituent API endpoint /api/constituents.php?id=280 to retrieve a constituent record.\nangular.module('AuthCodeFlowTutorial', []) .controller('ConstituentCtrl', function ($scope, $http, $watch) { // Check user access token. $http.get('/auth/authenticated.php').then(res => { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } // Access token is valid. Fetch constituent record. $http.get('/api/constituents.php?id=280').then(res => { $scope.constituent = res.data.constituent; $scope.isReady = true; }); }); ... Open api/constituents.php and includes/blackbaud/api/constituents.php. The get request in index.html file directs the request to api/constituents.php, where the access token is refreshed and the call is passed along to /includes/blackbaud/api/constituents.php with the id from the route param ?id=280 that we passed into the request. <?php ... $response = blackbaud\\Auth::refreshAccessToken(); $token = json_decode($response, true); if (!isset($token['access_token'])) { echo json_encode($token); return; } $data = blackbaud\\Constituents::getById($_GET['id']); ... The getById() method interacts directly with the SKY API endpoints making a get request to the https://api.sky.blackbaud.com/constituent/v1/constituents/280 endpoint and passing in the required headers. <?php ... self::$headers = array( 'Bb-Api-Subscription-Key: ' . AUTH_SUBSCRIPTION_KEY, 'Authorization: Bearer ' . Session::getAccessToken(), 'Content-type: application/x-www-form-urlencoded' ); self::$baseUri = SKY_API_BASE_URI . 'constituent/v1/'; } public static function getById($id = 0) { $url = self::$baseUri . 'constituents/' . $id; $response = Http::get($url, self::$headers); return json_decode($response, true); } ... The Bb-Api-Subscription-Key value represents your Blackbaud developer account's approved subscription to an API product. You can use your account's Primary key or Secondary key. The Authorization value represents your authorization to use the API. The Authorization header starts with Bearer followed by a space and then the value for the access token. A call to the Constituent (Get) endpoint retrieves constituent data and sends it back to the browser. function get(request, endpoint, callback) { return proxy(request, 'GET', endpoint, '', callback);\n} The data is returned as JSON to the browser where the model's data is projected through the view of the Angular template. <div ng-if=\"isAuthenticated\"> <h3>Constituent: {{ constituent.name }}</h3> <p> See <a href=\"https://developer.sky.blackbaud.com/contract-reference#Constituent\" target=\"_blank\">Constituent</a> within the SKY API contact reference for a full listing of properties. </p> <div class=\"table-responsive\"> <table class=\"table table-striped table-hover\"> <thead> <tr> <th>Name</th> <th>Value</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>{{ constituent.id }}</td> </tr> <tr> <td>type</td> <td>{{ constituent.type }}</td> </tr> <tr> <td>lookup_id</td> <td>{{ constituent.lookup_id }}</td> </tr> <tr> <td>first</td> <td>{{ constituent.first }}</td> </tr> <tr> <td>last</td> <td>{{ constituent.last }}</td> </tr> </tbody> </table> </div> <a href=\"/auth/logout\" class=\"btn btn-primary\">Log out</a>\n</div> Once the constituent information is retrieved and added to the front page, Log Out and Refresh Access Token buttons are displayed.\nOpen /auth/logout.php and includes/blackbaud/session.php.\nIf the user selects Log Out, they are redirected to /auth/logout.php, which calls the blackbaud\\Session::logout() in includes/blackaud/session.php. The logout() method destroys the token stored in the PHP server's $_SESSION. <?php ... public static function logout() { unset($_SESSION[self::$tokenName]); } ... If the user selects Refresh Access Token, AngularJS makes a request to /auth/refresh-token.php. The call is passed to the refreshAccessToken() method in includes/blackbaud/auth.php, which builds out the request body with the required fields. The grant_type is set to refresh_token and the refresh_token field is populated with the refresh_token we have stored in the $_SESSION. This body is then passed to the fetchTokens() method where the post to the SKY API endpoint is made. <?php ... public static function refreshAccessToken() { $body = array( 'grant_type' => 'refresh_token', 'refresh_token' => Session::getRefreshToken() ); return self::fetchTokens($body); } ... private static function fetchTokens($body = array()) { $headers = array( 'Content-type: application/x-www-form-urlencoded', 'Authorization: Basic ' . base64_encode(AUTH_CLIENT_ID . ':' . AUTH_CLIENT_SECRET) ); $url = AUTH_BASE_URI . 'token'; $response = Http::post($url, $body, $headers); $token = json_decode($response, true); Session::setToken($token); return $response; } ... The JSON response from SKY API is then parsed, the new set of tokens are stored in our $_SESSION, and the data is sent back to Angular to be displayed on the page for your reference. That's it! Be sure to take a look at our other code samples.\nYou can create an issue to report a bug or request a feature for this code sample. For all other feature requests, see ideas. "
        }
       ],
       "text": " Authorization Code Flow Important! Our code samples provide very basic examples of how to interact with the Blackbaud OAuth 2.0 Service. You are free to choose the client library and method that best suit your needs when creating production-level applications. C# .NET Core Learn how to create a .NET Core MVC C# server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our SKY API. Chrome Extension Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Authorization Code Flow. NodeJS Learn how to create a NodeJS server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our SKY API. PHP Learn how to create a PHP server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our SKY API. "
      },
      {
       "name": "Implicit Flow",
       "layout": "layout-showcase",
       "description": "Get up-and-running with our Implicit Flow code samples",
       "showBreadcrumbs": true,
       "icon": "fa fa-fw fa-3x fa-user",
       "title": "Implicit Flow Code Samples",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInNav": true,
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Code Implicit-flow",
       "abspath": "docs/code/implicit-flow/index.md",
       "uri": "/docs/code/implicit-flow/",
       "nav_links": [
        {
         "layout": "layout-container",
         "name": "AngularJS",
         "title": "Implicit Flow - AngularJS",
         "description": "Learn how to create an Angular app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
         "order": 2,
         "icon": "fa fa-fw fa-3x fa-desktop",
         "showInNav": true,
         "tutorial": true,
         "showBreadcrumbs": true,
         "back_to_top": true,
         "useComments": false,
         "sortKey": "order",
         "sortDirection": "asc",
         "showInHeader": true,
         "showInFooter": true,
         "showInSearch": true,
         "breadcrumbs": "Docs Code Implicit-flow Angular",
         "abspath": "docs/code/implicit-flow/angular/index.md",
         "uri": "/docs/code/implicit-flow/angular/",
         "text": " Edit in GitHub Implicit Flow - AngularJS GitHub\nLearn how to create an AngularJS app that interacts with SKY API constituent data via the OAuth 2.0 Implicit Flow.\nView the source on GitHub "
        },
        {
         "layout": "layout-container",
         "name": "Angular 2",
         "title": "Implicit Flow - Angular 2",
         "description": "Learn how to create an Angular 2 app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
         "order": 2,
         "icon": "fa fa-fw fa-3x fa-desktop",
         "showInNav": true,
         "tutorial": true,
         "showBreadcrumbs": true,
         "back_to_top": true,
         "sortKey": "order",
         "sortDirection": "asc",
         "showInHeader": true,
         "showInFooter": true,
         "showInSearch": true,
         "breadcrumbs": "Docs Code Implicit-flow Angular2",
         "abspath": "docs/code/implicit-flow/angular2/index.md",
         "uri": "/docs/code/implicit-flow/angular2/",
         "text": " Edit in GitHub Implicit Flow - Angular 2 GitHub\nLearn how to create an Angular 2 app that interacts with SKY API constituent data via the OAuth 2.0 Implicit Flow.\nView the source on GitHub "
        },
        {
         "name": "Chrome Extension",
         "layout": "layout-container",
         "title": "Implicit Flow - Chrome Extension",
         "description": "Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Implicit Flow.",
         "icon": "fa fa-fw fa-3x fa-chrome",
         "showBreadcrumbs": true,
         "sortKey": "order",
         "sortDirection": "asc",
         "showInNav": true,
         "showInHeader": true,
         "showInFooter": true,
         "showInSearch": true,
         "breadcrumbs": "Docs Code Implicit-flow Chrome-extension",
         "abspath": "docs/code/implicit-flow/chrome-extension/index.md",
         "uri": "/docs/code/implicit-flow/chrome-extension/",
         "text": " Edit in GitHub Implicit Flow - Chrome Extension GitHub\nLearn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Implicit Flow.\nView the source on GitHub "
        }
       ],
       "text": " Implicit Flow Important! Our code samples provide very basic examples of how to interact with the Blackbaud OAuth 2.0 Service. You are free to choose the client library and method that best suit your needs when creating production-level applications. Angular 2 Learn how to create an Angular 2 app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our SKY API. AngularJS Learn how to create an Angular app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our SKY API. Chrome Extension Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Implicit Flow. "
      }
     ],
     "text": " Code Samples App Showcase A collection of fully-formed applications that can assist in quick-starting your own SKY API applications Authorization Code Flow Quick-start code samples for Authorization Code Flow Implicit Flow Get up-and-running with our Implicit Flow code samples "
    },
    {
     "layout": "layout-tutorial",
     "name": "Applications",
     "description": "Learn how to successfully create an application with SKY API.",
     "order": 200,
     "published": true,
     "showInNav": true,
     "back_to_top": true,
     "title": "Create an Application Tutorial",
     "sidebarLayoutSecondaryColumn": "col-lg-2 col-md-3 col-sm-12 sidebar-tutorial",
     "sidebarLayoutPrimaryColumn": "col-lg-8 col-md-8 col-sm-12",
     "bootstrap_container": "bg-tutorial",
     "markdown": false,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Createapp",
     "abspath": "docs/createapp/index.md",
     "uri": "/docs/createapp/",
     "text": " Comments Edit in GitHub Create an App with SKY API To successfully create an application with SKY API, follow this step-by-step guide. Before you begin, be sure to complete the Getting Started guide, where you'll get your Blackbaud developer account, a subscription key, and learn how to explore the Endpoint Reference. Step 1 – Register your app To call the SKY API, first register your application to obtain its unique set of credentials, which your users will use to enable your app to access their data From My Applications, click Register app. Enter the name, description, and logo of your application, as well as your organization's name. This information appears for users when they enable access to your application during the authorization process or in their product. In the Application website URL field, enter where users can learn more about your application online. Specify the URIs to use to redirect users back to your application during the authorization process. Note: The URIs must be absolute and use HTTPS. However, we do support http://localhost:port or http://127.0.0.1:port for local development. Important! When your application requests authorization to access a Blackbaud user's data, it includes a redirect_uri parameter in its query string. To authorize your application, this value must match exactly against one of the URIs you provide, including any trailing slashes. For more information, see common authorization issues. Click Save. Step 2 – Review the app credentials After you register an app, note the ID and secret that appear under Application Credentials. These credentials are unique to your application, and verify its identity during the authorization process. ID -Your application's unique identifier. Your users will need this ID to enable your application to access their Blackbaud data. You can't modify this ID; if you need to change it for any reason, delete the application and re-register it. Secret -The key your application provides when it requests an access token to call the SKY API during the authorization process. This value is sensitive, so don't share it with anyone else! To display the secret, click Show. Very Important! Keep the application secret private and safe! If the secret is compromised, regenerate it. Blackbaud reserves the right to remove or deactivate your application to protect customer data. Step 3 – Activate your app For your application to access a user's Blackbaud data, the tenant's administrator must approve its use for their organization and activate it within their product. For Blackbaud customers, the tenant administrator is a user within their organization. To activate your application in a customer's tenant, provide the tenant administrator with your application ID and have the tenant administrator complete the following steps: Copy the Application ID that your Blackbaud developer provided to you. Visit the Control Panel, Applications area of your Blackbaud product. Select Add application and then paste in the Application ID. Select Save. The application will then appear in the list of activated applications for the tenant. Step 4 – Request authorization Once your application has been activated, you can then obtain consent from an authenticated user. Upon consent, an OAuth 2.0 access token will be issued to your application in the form of a JSON web token, or JWT. The token should be included on every API request as part of the standard Authorization header. It is tied to the authenticated user's account and organization, which means that your application can only access data to which the authenticated user can access within the system. Learn how to authorize API requests! Step 5 – Next steps You are now ready to go make API calls! Now that you've built and tested your application, here are a few things you should know. SKY UX SKY UX is Blackbaud’s next-generation user-experience framework. You can use it to bring the same consistent experience as Blackbaud products to your customizations and applications. Blackbaud Developer Community Participate and learn from other developers on how they are using the SKY API. Blackbaud Partner Network Learn how to be a part of our Blackbaud Partner Network. "
    },
    {
     "name": "Getting Started",
     "description": "Obtain the necessary knowledge to make API calls using our interactive <%= stache.config.dev_console_name %>",
     "order": 100,
     "layout": "layout-tutorial",
     "published": true,
     "back_to_top": true,
     "title": "Getting Started",
     "sidebarLayoutSecondaryColumn": "col-lg-2 col-md-3 col-sm-12 sidebar-tutorial",
     "sidebarLayoutPrimaryColumn": "col-lg-8 col-md-8 col-sm-12",
     "bootstrap_container": "bg-tutorial",
     "markdown": false,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInNav": true,
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Getting-started",
     "abspath": "docs/getting-started/index.md",
     "uri": "/docs/getting-started/",
     "nav_links": [
      {
       "name": "Getting Started with Payments API (Beta)",
       "description": "Obtain the necessary knowledge to make calls to the Payments API using our interactive <%= stache.config.dev_console_name %>",
       "order": 100,
       "layout": "layout-tutorial",
       "published": true,
       "back_to_top": true,
       "title": "Getting Started with Payments API",
       "sidebarLayoutSecondaryColumn": "col-lg-2 col-md-3 col-sm-12 sidebar-tutorial",
       "sidebarLayoutPrimaryColumn": "col-lg-8 col-md-8 col-sm-12",
       "bootstrap_container": "bg-tutorial",
       "markdown": false,
       "showInNav": false,
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": false,
       "showInFooter": false,
       "showInSearch": true,
       "breadcrumbs": "Docs Getting-started Payments",
       "abspath": "docs/getting-started/payments/index.md",
       "uri": "/docs/getting-started/payments/",
       "text": " Comments Edit in GitHub Getting Started with Payments API (Beta) To get started using the Payments API (Beta), follow this step-by-step guide. After you complete this tutorial, you'll have your Blackbaud developer account and API subscription keys, and you'll learn how to try our SKY API console.\nFor information about changes to the Payments API (Beta), see the changelog. Step 1 – Set up a developer account\nSign up for a Blackbaud developer account. This account represents you as a developer within the Blackbaud Developer Portal.\nAlready have an account? Sign in to continue with the Getting Started with Payments API (Beta). Step 2 – Join the Payments API Preview group\nTo view and use the Payments API during Closed Beta, you must be a member of the Payments API Preview group and signed in with your Blackbaud developer account. Otherwise, you will see an error page.\nContact us to request joining this group. Please include your name and your organization's name. We will reply to confirm when you’ve been added, so you can continue with next steps. Step 3 – Get Payments API subscription keys You must include a valid API subscription key with each request to the Payments API. This subscription key is associated with your Blackbaud developer account. How to get API subscription keys?\nTo request a subscription to the Payments API, from the Products page select Payments API Preview. Note: This option is not the same as the SKY API Standard Edition subscription. If you don't see the Payments API Preview option, make sure you completed step 2. Click Review terms and subscribe. The SKY API Terms of Use will appear in a pop-up window.\nReview and agree to the Terms of Use.\nTo submit your request, click Add subscription.\nBlackbaud approves all subscription requests for the Payments API. You will receive an email notification when your request is approved. After it is approved, you can view the subscription details within your developer profile. For developers using multiple APIs, note that the Payments API subscription is different than your other SKY API subscription. About your subscription Your developer profile provides details about your API subscriptions. Each subscription contains a Primary key and a Secondary key. You can use either key as the subscription key value for the Bb-Api-Subscription-Key request header in calls to the API. Step 4 – View the Endpoint reference Now, you are ready to explore the endpoints available to you. Open the Endpoint Reference and select Payments (Beta). A list of endpoints appears. If you are not logged in or are not part of the preview group, the Payments (Beta) option does not appear in the Endpoint Reference.\nSelect an endpoint from the list.\nReview the information in the reference, including the:\nRequest URL\nRequest parameters\nRequest headers\nResponse codes\nResponse body\nSample JSON data\nCode samples Step 5 – Try it When you are signed in, you can test the Payments API with the SKY API Console. From the Payments API Endpoint Reference, navigate to an endpoint such as GET Payment configuration list, and click Try it. This activates the SKY API Console.\nUnder Query parameters, enter a parameter. For example, enter true for the include_inactive parameter.\nUnder Headers, select the Show/Hide icon in the Bb-Api-Subscription-Key field. The value reflects one of your Payments API subscription keys.\nNote: The Request URL and HTTP request change based on the values for the parameter and request header field values. Under Authorization, select Authorization code in the Blackbaud OAuth 2.0 Service field. The Blackbaud OAuth 2.0 Service displays a SKY API Console pop-up window. Select your Blackbaud Merchant Services instance.Note: Your Blackbaud Merchant Services instance will not appear unless your admin has invited you to an environment and you have accepted the invite. Click Authorize.\nThe HTTP request is populated with the Authorization:Bearer header. This represents the access token for the request. Click Send to submit the API request.\nThe response includes a status, latency, and content including JSON data for the requested endpoint. Step 6 – Join the Developer Community Join our Developer Community to engage with Blackbaud and other developers.\nShare feedback about your initial experience, and ask ongoing questions, in the Payments API forum.\nSubscribe to receive notifications for recent SKY API Announcements and Developer Discussions. Submit new ideas for how we can improve the Payments API. Vote and comment on existing ideas. Step 7 – Create a Payments API user account The Payments API uses the OAuth 2.0 protocol to authorize API requests. This provides a secure mechanism for your application to access Blackbaud Merchant Services customer data and capabilities without exposing user credentials (username/password) to your application. Instead, users must authorize your application to call the API on their behalf. Refer to our Authorization section for more details.\nYour organization may wish to create a new, dedicated Blackbaud user account, to be used to authorize your application(s) to make Payments API requests on its behalf. During this Closed Beta phase, this step requires manual coordination with us.\nCreate a new Blackbaud user account that you will use as your Payments API user. Sign in as your new Payments API user. While signed in, click here or manually navigate to https://signin.blackbaud.com/api/user. You should see a page that looks like below. Copy the contents of this page and email it to us. We will reply to confirm when your API user has been properly configured, so you can continue with next steps. Step 8 – Next steps Once you’ve gotten started with the Payments API, you can use available resources to build an application using Payments API.\nLearn how to create an application with SKY API.\nNote: During this Closed Beta phase, you will not be able to complete Step 3 of this tutorial on your own for apps using Payments API. Instead, contact us with your application ID so we can activate it on your behalf.\nLearn how Authorization works, including the associated tutorials and code samples. Subscribe to SKY API status updates. "
      }
     ],
     "text": " Comments Edit in GitHub Getting Started To get started using SKY API, follow this step-by-step guide. After you complete this tutorial, you'll have your Blackbaud developer account, a subscription key, and you'll learn how to try our SKY API console. Step 1 – Set up a developer account\nSign up for a Blackbaud developer account. This account represents you as a developer within the Blackbaud Developer Portal.\nAlready have an account? Sign in to continue with the Getting Started. Step 2 – Get a subscription key\nWe require you to have an approved subscription key to a specific API product before you can use the SKY API. This subscription key is associated with your Blackbaud developer account.\nHow to get a subscription key? To request a subscription to an API product, from the Products page select SKY API Standard Edition.\nClick Subscribe. A confirmation screen appears.\nTo submit your request, click Confirm. Blackbaud approves the subscription requests. We will send you an email notification when your request is approved. After it is approved, you can view the subscription details within your developer profile. Important! In order to be approved for a subscription key, you must be an authorized user in at least one instance of Raiser's Edge NXT or Financial Edge NXT. This requirement ensures that you have a tenant to make API calls against. About your Subscription\nYour profile provides details about your subscriptions. Each subscription contains a Primary key and a Secondary key. You can use either key as the subscription key value for the Bb-Api-Subscription-Key request header in calls to the API. Step 3 – Activate the SKY API Console The SKY API Console is a Blackbaud application built into the Endpoint Reference that can be used to test the SKY API. Before jumping in to build your own applications, we recommend you add the SKY API Console to your or your customer's tenant to aid with testing and development. To access a tenant's data, the SKY API Console, must be approved by a tenant administrator. For Blackbaud customers, a tenant administrator is a user within the organization that is part of the Supervisor security group. This may include Partners or API subscribers that have their own dedicated tenant, or are Supervisor users in their customer's tenant. Administrators provide approval for applications, including the SKY API Console, by activating the application within the Applications area of the product. To activate the SKY API Console, the tenant administrator needs to do the following: Copy the SKY API Console Application ID:A056CA6B-A3A8-4AC7-B325-997666306E52 Visit the Control Panel, Applications area of the product. Select Add application, paste the SKY API Console Application ID, and select Save. Once added, The SKY API Console will appear in the list of activated applications for the tenant. Important! The same process can be followed to activate additional applications for your tenant. Simply substitute the application ID for the one provided in the My Applications area of your Developer Account to add your own application, or use the application ID provided to you by a Partner or third party developer that you know and trust. Step 4 – View the Endpoint Reference Now, you are ready to explore the endpoints available to you! Open the Endpoint Reference and select an API. A list of endpoints appears.\nSelect an endpoint from the list.\nReview the information in the reference, including the:\nRequest URL\nRequest parameters\nRequest headers\nResponse codes\nSample JSON data\nCode samples Step 5 – Try it! When you are signed in, you can test the SKY API with the SKY API Console. From an Endpoint Reference, click Try it. For example, in the Constituent Endpoint Reference, select the Constituent (Get) endpoint and click Try it. This activates the SKY API Console. Under Query parameters, enter a parameter. For example, enter 280 for the constituentId parameter.\nUnder Headers, select the show/hide icon in the Bb-Api-Subscription-Key field. The value reflects the selected subscription key from the Authorization section.\nNote: The Request URL and HTTP request change based on the values for the parameter and request header field values. Under Authorization, select Authorization code in the Blackbaud OAuth 2.0 Service field. The Blackbaud Authorization Service displays a SKY API Console pop-up window. Select a tenant. Approved API subscribers with access to their own dedicated tenant need to activate the SKY API Console as an approved application. Click Authorize. This gives the SKY API Console access to your SKY API data for the selected tenant.\nAfter you approve the SKY API Console to access the API data for your Blackbaud developer account, the HTTP request is populated with the `Authorization:Bearer ` header. This represents the access token for the request. After you have a bearer token and configure the values for the URI parameters, click Send to submit the request. The response includes a response status, latency, and content including JSON data for the requested endpoint. Step 6 – Next steps Learn how to create an application with SKY API. Learn how Authorization works, including the Authorization Code Flow and associated tutorials. Review our support resources including our Changelog, Issues, Ideas, and FAQ. Clone our code samples that demonstrate the Authorization Code Flow and SKY UX, Blackbaud’s next-generation user-experience framework. Join our Developer Community, and subscribe to stay up-to-date with the latest hot topics and announcements. "
    }
   ],
   "text": " "
  },
  {
   "layout": "layout-sidebar",
   "name": "Add-ins",
   "order": 250,
   "published": true,
   "showInNav": true,
   "title": "Add-ins",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Addins",
   "abspath": "docs/addins/index.md",
   "uri": "/docs/addins/",
   "nav_links": [
    {
     "layout": "layout-sidebar",
     "name": "Common issues with add-ins",
     "order": 60,
     "published": true,
     "showInNav": true,
     "title": "Common add-in issues",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Addins Common-issues",
     "abspath": "docs/addins/common-issues/index.md",
     "uri": "/docs/addins/common-issues/",
     "text": " Edit in GitHub Common issues with add-ins\nAdd-in does not appear\nAdd-ins support conditional visibility, which allows for an add-in to perform initialization logic to determine whether it should be shown or not. By default, add-ins are hidden and must inform the parent page when it's time to be shown. This happens as part of the init callback from the host application.\nUsing the information provided in the init arguments, the add-in should determine if and how it should be rendered. Then it should call the ready callback, informing the host page.\nvar client = new AddinClient({\ncallbacks: { init: (args) => { args.ready({ showUI: true, title: 'My Custom Tile Title' }); }\n}\n}); For more information, see the Add-in Client JavaScript library "
    },
    {
     "layout": "layout-sidebar",
     "name": "Concepts",
     "order": 30,
     "published": true,
     "showInNav": true,
     "back_to_top": true,
     "title": "Concepts",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Addins Concepts",
     "abspath": "docs/addins/concepts/index.md",
     "uri": "/docs/addins/concepts/",
     "nav_links": [
      {
       "layout": "layout-sidebar",
       "name": "Add-in single-sign-on (SSO)",
       "order": 40,
       "published": true,
       "showInNav": true,
       "title": "Add-in single-sign-on (SSO)",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Addins Concepts Addin-sso",
       "abspath": "docs/addins/concepts/addin-sso/index.md",
       "uri": "/docs/addins/concepts/addin-sso/",
       "text": " Edit in GitHub Add-in single-sign-on (SSO)\nSKY add-ins support a single-sign-on (SSO) mechanism that can be used to correlate the current Blackbaud user with a user in the add-in's native system.\nWithin the Add-in Client JavaScript library, the AddinClient class provides a getAuthtoken function for getting a short-lived \"user identity token\" from the host application. This token is a signed value that is issued to the SKY API application and represents the Blackbaud user's identity.\nThe general flow is that when an add-in is initiated, it can request a user identity token from the host page using the getAuthtoken function. The host will in turn request a user identity token from the SKY API OAuth 2.0 service. The user identity token (a JWT), will be addressed to the SKY API application and will contain the Blackbaud user's unique identifier. The OAuth service will return the token to the host, and the host will pass the token to the add-in. The add-in can then pass the user identity token (along with the environment ID provided as part of the initial context when the add-in is instantiated) to its own backend, where it can be validated and used to look up a user in the add-in's native system. If a user mapping exists, then the add-in can consider the user logged in and immediately display content to the user. If no user mapping exists, the add-in can prompt the user to login to the add-in's native system. Once the user's identity in the native system is known, the add-in can persist the user mapping so that on subsequent loads the user doesn't have to log in again (even across devices).\nNote that the user identity token is signed by the SKY API OAuth 2.0 service, but it cannot be used to make calls to the SKY API. It is purely used to convey the user's identity to the add-in. In order to make SKY API calls, a proper SKY API access token must be obtained.\nThis flow is illustrated below: Add-ins can make the following request upon initialization to obtain a user identity token (typically handled within the init callback):\nvar client = new AddinClient({...});\nclient.getAuthToken().then((token) => { var userIdentityToken = token; . . .\n}); The following string represents a sample user identity token returned by the getAuthToken function: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjREVjZzVkxIM0FtU1JTbUZqMk04Wm5wWHU3WSJ9.eyJuYW1laWQiOiIxMjM0ZjVjNC1iOGRhLTQxYWQtYjAzMy1hMGU5ZWY3ZGI3OTkiLCJpc3MiOiJodHRwczovL29hdXRoMi5za3kuYmxhY2tiYXVkLmNvbS8iLCJhdWQiOiJiOWEwMmE0OS0wNGNiLTRiOWMtYTkwYy1kMjYyODcxYjU0N2QiLCJleHAiOjE1MjE1NzUxNTAsIm5iZiI6MTUyMTU3NDg1MH0.Cfy4VkLUyP_tvvo8UqswiYtOdQ3Tlj0CJLgoW-up4Ns9p4R4qKBv8kJJ8WPRTKFlVNTuBWdMrQ1I07oSuiQ Here's a decoded version of the above user identity token:\n{ \"nameid\": \"1234f5c4-b8da-41ad-b033-a0e9ef7db799\", \"iss\": \"https://oauth2.sky.blackbaud.com/\", \"aud\": \"b9a02a49-04cb-4b9c-a90c-d262871b547d\", \"exp\": 1521575150, \"nbf\": 1521574850\n} Notice that the aud claim indicates the intended audience (the SKY API application that owns the add-in), and the nameid claim contains the user's Blackbaud ID.\nValidating the user identity token (UIT)\nBefore looking for a user mapping, add-in developers should first validate the signature of the UIT against the OpenIDConnect endpoint within SKY API OAuth 2.0 service. This prevents certain types of attack vectors and provides a mechanism for the add-in to securely convey the Blackbaud user's identity to its own backend. The SKY API OpenIDConnect configuration can be found at: https://oauth2.sky.blackbaud.com/.well-known/openid-configuration.\nDevelopers building add-ins in .NET can make use of a Blackbaud-provided library to assist with validating the user identity token. This library is distributed as a NuGet package named Blackbaud.Addin.TokenAuthentication.\nMore information on how to use this library can be found in the readme.txt:\nSample\nThe follow sample demonstrates code that validates the raw token value obtained from the host application using the Blackbaud.Addin.TokenAuthentication library:\n// this represents the user identity token returned from getAuthToken()\nvar rawToken = \"(raw token value)\"; // this is the ID of the developer's SKY API application\nvar applicationId = \"(some application ID)\"; // create and validate the user identity token\nUserIdentityToken uit;\ntry\n{ uit = await UserIdentityToken.ParseAsync(rawToken, applicationId); // if valid, the UserId property contains the Blackbaud user's ID var userId = uit.UserId;\n}\ncatch (TokenValidationException ex)\n{ // process the exception\n} Once the token has been validated, the add-in's backend will know the Blackbaud user ID and can determine if a user mapping exists for a user in the add-in's native system. If a mapping exists, then the add-in's backend can immediately present the content for the add-in. If no user mapping exists, the add-in can prompt the user to login.\nCorrelating Blackbaud users with external systems\nFor proper correlation with external systems, it is important to understand how Blackbaud models our customer base. The following list describes several concepts within the data model: Legal entity - We use the term legal entity to represent a top-level customer record in the system. This could be a specific non-profit organization, an individual change agent, or even a Partner ISV.\nEnvironment - An environment is a logical grouping of products and services that are available to a legal entity. You can think of an environment as a container of various Blackbaud products and services - it is the unifying construct that faciltiates the inter-communication between those products and services. A legal entity will typically have at least one environment, but some legal entities may have multiple environments used to serve various purposes (like testing, staging, production, regional chapters, etc.).\nUser - The term user refers to a specific Blackbaud ID user account. Within this data model, a single Blackbaud user can have access to multiple environments and potentially access to environments across multiple organizations. Therefore, it is important to properly consider both User and Environment when establishing a link with an external system. At runtime, the environment ID will be provided as part of the args object, and your add-in can request a user identity token using the getAuthToken method of the AddinClient class. Note that details about the legal entity, environment, and user are returned as part of the /token endpoint response when obtaining SKY API access token. For more information, see step 5 of the Authorization Code Flow documentation, or step 3 of the Implicit Flow documentation. Important! Be sure to properly account for these concepts when presenting related data from your system. "
      },
      {
       "layout": "layout-sidebar",
       "name": "Add-in capabilities",
       "order": 30,
       "published": true,
       "showInNav": true,
       "title": "Add-in capabilities",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Addins Concepts Capabilities",
       "abspath": "docs/addins/concepts/capabilities/index.md",
       "uri": "/docs/addins/concepts/capabilities/",
       "text": " Edit in GitHub Add-in capabilities\nShowing a modal\nUsing the Add-in Client JavaScript library, SKY Add-ins are capable of launching a \"modal\" user experience to show more details or gather additional input from the user. The modal will be rendered in a separate full-screen iframe to maximize the available real estate (meaning, it will not be scoped to the bounds of the add-in's initial iframe).\nTo launch a modal, call the showModal function on the client, passing the URL for the modal and any context data needed by the modal:\nvar client = new AddinClient({...}); // To launch a modal, call the showModal method\nclient.showModal({ url: '<modal-addin-url>', context: { /* arbitrary context object to pass to modal */ }\n}); The modal add-in\nThe host page will show a full-screen mask element to block user input, and then launch a full-screen iframe for the URL provided. The modal iframe will be loaded in the same way it does for other types of add-ins. The modal page must also pull in the SKY Add-in Client library and make use of the AddinClient class.\nThe modal add-in will be responsible for rendering the modal element itself (including any chrome around the modal content). To create a native-looking modal experience, the modal add-in may set the page body background to transparent and immediately launch a SKY UX modal within its full screen iframe.\nAs with a typical add-in, the modal add-in should register for the init callback and will receive the envId in the arguments. The context field for arguments will match the context object passed into the showModal call from the parent add-in. Note that this is crossing iframes so the object has been serialized and deserialized. It can be used for passing data but not functions.\nClosing the modal\nThe modal add-in (not the parent add-in) is responsible for closing itself using the closeModal function on the AddinClient. It is able to pass context information back to the parent add-in:\n// Modal add-in rendered in full screen iframe\nvar client = new AddinClient({...});\nclient.closeModal({ context: { /* arbitrary context object to pass to parent add-in */ }\n}); The parent add-in can listen to the close event via the modalClosed Promise returned from showModal. The Promise will resolve when the modal is closed, and will include the context data returned from the modal:\n// Parent add-in launching a modal\nvar client = new AddinClient({...}); // provide some context values from the parent add-in to the modal add-in\nvar modalContext = { someProperty: \"Foo\", anotherProperty: \"Bar\"\n}; client.showModal({ url: '<modal-addin-url>', context: modalContext\n}).modalClosed.then((context) => { // context represents data returned by the closeModal method\n}); Navigate the parent page\nAn add-in can choose to navigate the parent page based on user interactions. To do so, call the navigate method on the AddinClient object. This function takes an object argument with property url for where to navigate. A fully qualified url should be used:\nvar client = new AddinClient({...});\nclient.navigate({ url: '<target_url>' }); Opening the Blackbaud help window\nAn add-in can instruct the parent page to display the Help flyout window, and specify which page to display. To do this, call the openHelp method on the AddinClient object. This function takes an object argument with property helpKey for the name of the help tab to display. A single .html file should be named.\nvar client = new AddinClient({...});\nclient.openHelp({ helpKey: '<target_page>.html' }); "
      },
      {
       "layout": "layout-sidebar",
       "name": "Connecting to SKY API",
       "order": 50,
       "published": true,
       "showInNav": true,
       "back_to_top": true,
       "title": "Connecting to SKY API",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Addins Concepts Connecting-to-skyapi",
       "abspath": "docs/addins/concepts/connecting-to-skyapi/index.md",
       "uri": "/docs/addins/concepts/connecting-to-skyapi/",
       "text": " Edit in GitHub Connecting to SKY API\nIn some cases, the contextual information made available to your add-in at runtime (the user's ID, the environment ID, and the current extension point context object) may be sufficient for your needs. Your add-in can surface contextual information from your system based on those runtimes values.\nIn other cases however, your add-in may need to make calls to SKY API in order to function properly. To call the SKY API, your add-in will need a SKY API access token; this requirement is in place to ensure proper security and handling of customer data. If your web application already has an access token for the current user and environment (context values provided at runtime), then you can use it to make calls to the SKY API (refreshing the token if needed). If not, you have some options for how your add-in can obtain a SKY API access token. Degrade your add-in's user interface\nYou might choose to degrade your add-in's user experience if your application has not acquired a SKY API access token for the current user and environment. You can simply provide a link to your web application within your add-in's user interface, and when the user navigates to your web application you can present a \"Connect to SKY API\" button and initiate the OAuth process.\nPrompt to connect to SKY API\nAlternately, you might choose to have your add-in initiate the OAuth process by surfacing a \"Connect to SKY API\" button in the add-in's user interface. Choose the OAuth flow that is most applicable for your scenario - the Authorization Code Flow is intended for server-to-server communication and results in an access token that can be refreshed once it has expred. The Implicit Flow is intended for SKY API calls from the client, and access tokens obtained from this flow are not refresh-able once expired.\nWhile more complex, we recommend using the Authorization Code flow because of the more secure handling of your application's \"secret\", and the ability to refresh the access token once it has expired. In any case, obtaining a SKY API access token for the current user and environment can be a one-time user-interactive operation that mimics functionality available in your full-blown web site.\nInitiate OAuth\nTo properly initiate the SKY API OAuth process, your add-in should expect to include a state parameter that will be used to prevent against cross-site request forgery (CSRF) attacks. As discussed in the FAQ, this value will be echoed back to your application's redirect endpoint when the user provides consent, and your application should expect to validate that the value echoed originated from your system.\nThe following code sample shows a very basic technique of acquiring a SKY API access token. This code executes on the client and works by showing a popup window that navigates to a /skyapi/authorize page within the add-in's web application. Within this endpoint (server code not shown), a state parameter value is generated, and the response can return a 302 Redirect to the SKY API Authorization page (including the state parameter). The popup window will follow the redirect, and the user will be able to provide consent for your application. Upon consent, the browser will be redirected again - this time to your application's registered redirect URI. The response from this endpoint in your web application can include some script that closes the popup browser window:\nfunction connectToSkyApi() { // this code starts within the user interface of the add-in - it launches a popup // and navigates to an endpoint in the add-in's backend to properly establish a // state parameter and initiate the SKY API OAuth process. var url = \"/skyapi/authorize\" + \"?token=\" + userIdentityToken + \"&envid=\" + initialArgs.envId; var child = window.open(url, '_blank', 'toolbar=0,status=0,width=625,height=500'); var timer = setInterval(checkChild, 500); // when the user has provided consent, your application's redirect URI endpoint // can include script that will // close the browser window. function checkChild() { if (child.closed) { clearInterval(timer); // if the user provided consent, the add-in's backend will have an access token for the user } } } Note that the user identity token is provided as well, so that your add-in's backend can ensure that it is being called from your front-end code.\nLimit the scope of consent to the current environment\nAs mentioned in the Add-in single-sign-on documentation, a given Blackbaud user may have access to multiple environments, even spanning multiple organizations.\nWhen building the redirect to the SKY API Authorization page, you'll want to limit the scope of the user's consent to the \"current\" environment, which is made available at runtime via the args object provided to the init callback. The SKY API Authorization page supports an optional query parameter named environment_id that can be used to limit the scope of consent to the current environment. This query parameter simply provides a hint to the Authorization page to filter the list of eligble environments to the current environment.\nTo make use of this, when your add-in's web application builds the redirect to the SKY API Authorization page, be sure to include the environment_id parameter:\nhttps://oauth2.apim.blackbaud.com/authorization?\nresponse_type=code\n&client_id=YOURCLIENTID\n&redirect_uri=YOURREDIRECTURI\n&state=YOURSTATEVALUE\n&environment_id=YOURENVIRONMENTID Important! If you omit this parameter, all environments accessible by the user will appear on the consent page, which could result in the user choosing an environment other than the one your add-in in operating within.\nProtection against clickjacking\nTo protect against clickjacking attacks, the SKY API Authorization page will be updated to prevent being rendered within an iframe. This means your add-in will not be able to initiate the OAuth process within its own iframe. You'll need to initiate the OAuth process by launching a separate browser window as shown above.\nFor more information on initiating the OAuth process, see Authorization. "
      },
      {
       "layout": "layout-sidebar",
       "name": "Extension points",
       "order": 10,
       "published": true,
       "showInNav": true,
       "back_to_top": true,
       "title": "Extension points",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Addins Concepts Extension-points",
       "abspath": "docs/addins/concepts/extension-points/index.md",
       "uri": "/docs/addins/concepts/extension-points/",
       "text": " Edit in GitHub Extension points\nEach location within the Blackbaud application user interface that can be customized is known as an extension point. The extension point represents a named location in the product where add-ins can be rendered, and it defines both the \"class\" of add-in (tile, button, tab, etc.), as well as the shape of the context values that will be provided at runtime. As described in the SKY Addin Client library documentation, the context values for the extension point are made available to add-ins as part of the args object sent to the init callback function: // BBSkyAddinClient is global here. var client = new BBSkyAddinClient.AddinClient({ callbacks: { init: (args) => { // the context values are provided as part of the args object context = args.context; // most extension points provide the current record ID currentRecordId = context.recordId; ... } } }); Each extension point defines its own \"context\", which represents the initial set of values that will be made available at runtime. The context represents a contract with consumers (and thus it will be backwards compatible with future changes). For example, the Constituent Tile Dashboard defines the context as containing a recordId property representing the system record ID of the current constituent. This means that, for constituent tiles, the following JSON shape will be made available through the context object at runtime:\n{ \"recordId\": \"280\"\n} Additional contextual information about the current record can be obtained through SKY API as needed based on the initial set of context values.\nThe following section describes the extension points that have been defined to date:\nConstituent Extension point Notes Constituent Tile Dashboard Tile dashboard on the constituent record page The context object will contain the following properties: Property Description recordId The system record ID of the current constituent Gift Extension point Notes Gift Tile Dashboard Tile dashboard on the gift record page The context object will contain the following properties: Property Description recordId The system record ID of the current gift Payables Extension point Notes Invoice Tile Dashboard Tile dashboard on the invoice record page The context object will contain the following properties: Property Description recordId The system record ID of the current invoice Vendor Tile Dashboard Tile dashboard on the vendor record page The context object will contain the following properties: Property Description recordId The system record ID of the current vendor Purchase Order Tile Dashboard Tile dashboard on the purchase order record page The context object will contain the following properties: Property Description recordId The system record ID of the current purchase order General Ledger Extension point Notes Account Tile Dashboard Tile dashboard on the purchase order record page The context object will contain the following properties: Property Description recordId The system record ID of the current account Project Tile Dashboard Tile dashboard on the project record page The context object will contain the following properties: Property Description recordId The system record ID of the current project Journal Entry Batch Tile Dashboard Tile dashboard on the journal entry batch record page The context object will contain the following properties: Property Description recordId The system record ID of the current journal entry batch Treasury Extension point Notes Bank Account Tile Dashboard Tile dashboard on the bank account record page The context object will contain the following properties: Property Description recordId The system record ID of the current bank account "
      }
     ],
     "text": " "
    },
    {
     "layout": "layout-sidebar",
     "name": "Get started",
     "order": 20,
     "published": true,
     "showInNav": true,
     "title": "Get started",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Addins Get-started",
     "abspath": "docs/addins/get-started/index.md",
     "uri": "/docs/addins/get-started/",
     "nav_links": [
      {
       "layout": "layout-sidebar",
       "name": "Create an Add-in",
       "order": 100,
       "published": true,
       "showInNav": true,
       "title": "Create an Add-in",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Addins Get-started Createaddin",
       "abspath": "docs/addins/get-started/createaddin/index.md",
       "uri": "/docs/addins/get-started/createaddin/",
       "text": " Edit in GitHub Create an Add-in\nTo create a SKY Add-in, you'll need to build and deploy your add-in's web application and then register the URL of your add-in as part of your SKY API application. When Blackbaud customers enable your application, users will see the add-in(s) you've defined. Before you begin, make sure you've created a Blackbaud developer account as covered in the Getting Started guide. You'll also need a registered SKY API application, as covered in the Create an Application guide. Build your add-in\nSince add-ins are web applications, you can use any framework/tech stack desired, both client-side and server-side. For example, you can use ASP.NET, PHP, Node.js, MVC, Angular, React, etc. To see an example of an add-in that uses plain HTML, CSS, and JavaScript, see our Hello World sample add-in walk-through.\nA requirement for SKY Add-ins is that the web application must include the Add-in Client JavaScript library on the page and instantiate the AddinClient class in order to facilitate the interop with the host application. This library is available as an npm package, and more details can be found in the Readme.\nAt runtime, the add-in's web page will be rendered in a sandboxed iframe within the host application. Note that add-ins are hidden by default until they are ready to be shown. This gives the add-in an opportunity to perform any necessary initialization and logic to determine whether it should be visible or remain hidden. When the add-in is ready to be shown, it will call the ready method provided in the init callback: // BBSkyAddinClient is global here. var client = new BBSkyAddinClient.AddinClient({ callbacks: { init: (args) => { // perform any initialization work here... // inform the host page that the add-in is ready to be shown args.ready({ showUI: true, title: 'My Custom Tile' }); } } }); Deploy your add-in\nIn order to test your add-in, you can either deploy your web application to the cloud or serve it locally. Note that for local development, you’ll need to use HTTPS and have SSL configured to avoid mixed content problems in the browser. For production, your add-in's web application can be deployed to any cloud, and you control when and how your application is updated.\nRegister your add-in\nAdd-ins are associated with SKY API applications and are registered by providing some additional metadata about the add-in within the SKY API developer portal. Important! Performing this step will immediately make your add-in visible to any existing customers who've enabled your SKY API application. For development and testing purposes, we recommend using a non-production SKY API application to ensure your add-in functions properly before registering the add-in with your production application. From My Applications, navigate to the detail page for your application by clicking on the application name link.\nUnder Add-ins, select Add to launch the Add add-in dialog. Enter a unique name for the add-in. Currently, this value simply provides a reference for your use only - Blackbaud solution users will not see it.\nSpecify the extension point for where you want to insert your add-in into the Blackbaud solution. For more information about extension points, see the Extension points documentation.\nSpecify the URL of your add-in. This value must be an absolute and fully qualified URL, and can include static parameter values.\nClick Save to save your add-in definition. At this point, your add-in will be provisioned for any existing customers who've enabled your application, as well as any customers who enable your application in the future.\nNext steps Get an overview of the SKY Add-ins framework.\nView the Hello World sample to see a detailed walk-through of building an add-in.\nView additional concepts and capabilities associated with the SKY Add-ins framework.\nView our design guidelines to read about building an effective and compelling user experience for your add-in. "
      },
      {
       "layout": "layout-sidebar",
       "name": "Hello world sample add-in",
       "order": 200,
       "published": true,
       "showInNav": true,
       "title": "Hello world sample add-in",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Addins Get-started Hello-world",
       "abspath": "docs/addins/get-started/hello-world/index.md",
       "uri": "/docs/addins/get-started/hello-world/",
       "text": " Edit in GitHub Hello world sample add-in\nIn this article, we'll walk through the process of building a custom tile for the Constituent page using the SKY Add-in framework. This add-in will be a pure client-side implementation using only vanilla HTML, CSS, and JavaScript (note that you can use any language or tech-stack you'd like however).\nProject scaffolding\nFirst, we'll open Visual Studio (we're using VS 2017 here, but any version will work), and create a new ASP.NET Web Application. To keep things simple, we'll use the Empty template and enable Web API. Once Visual Studio has finished scaffolding the project, we'll manually add a few files (and for simplicity, we'll add them to the root folder). Specifically, we'll add: An HTML file to contain the markup for the add-in.\nA JavaScript file to contain the client-side code for the add-in (this could of course be embedded into the HTML file, but we'll separate them to keep things clean).\nA CSS file which we'll use to provide some basic styling for the tile. Create the add-in files\nFirst, let's add the HTML file. Next, add the JavaScript file. And finally, add the CSS file. Define the add-in markup\nVisual Studio will produce a very basic HTML file like this:\n<!DOCTYPE html>\n<html>\n<head> <meta charset=\"utf-8\" /> <title></title>\n</head>\n<body> </body>\n</html> We're going to be using a few jQuery statements in our JavaScript, so we'll also add jQuery to the page by referencing the latest version from the jQuery CDN, as documented on their website.\n<script src=\"https://code.jquery.com/jquery-3.2.1.min.js\" integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\" crossorigin=\"anonymous\"></script> Next, a requirement for SKY Add-ins is that they must include the Add-in Client JavaScript library on the page to facilitate the interop with the host application. This library is open source on GitHub and available as an npm package. You can add it to the page a few different ways, but for simplicity here, we'll just reference it from one of the npm CDNs:\n<script src=\"https://cdn.jsdelivr.net/npm/@blackbaud/sky-addin-client@1.0.0/bundles/sky-addin-client.umd.min.js\"></script> We'll also add a few lines to the <head> to include our tile's JavaScript and CSS files on the page:\n<script src=\"HelloWorld.js\"></script>\n<link href=\"HelloWorld.css\" rel=\"stylesheet\" /> Finally, we'll add the obligatory \"hello world\" text so we have something to show in the UI:\n<h2>Hello world!</h2>\n<span>This is a simple custom tile</span> So now, our initial HTML is complete:\n<!DOCTYPE html>\n<html>\n<head> <meta charset=\"utf-8\" /> <title></title> <script src=\"https://code.jquery.com/jquery-3.2.1.min.js\" integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/@blackbaud/sky-addin-client@1.0.0/bundles/sky-addin-client.umd.min.js\"></script> <script src=\"HelloWorld.js\"></script> <link href=\"HelloWorld.css\" rel=\"stylesheet\" />\n</head>\n<body> <h2>Hello world!</h2> <span>This is a simple custom tile</span>\n</body>\n</html> Style the add-in\nNext, let's shift focus to our stylesheet – not much to do here, just give the body a bit of padding. To note, we are still improving the default styling so this step may be optional in the future.\nbody { margin-top: 20px;\n} Basic add-in code\nNow, on to the JavaScript…\nFirst, we'll wrap our code in a self-executing function:\n(function () { // Add-in code goes here }()); As described in the sky-addin-client documentation, Add-ins must be instantiated using the following JavaScript, which registers a callback with the host page. This provides a mechanism for the host page to supply key contextual information to the add-in, and also provides a way for the add-in to inform the host page that it is ready to be rendered. This allows add-in authors to conditionally display add-ins based on the context (ex: only show a tile for individuals who are board members). We'll start with the basic minimal requirement to get a tile showing:\n(function () { // Add-in code goes here // BBSkyAddinClient is global here. var client = new BBSkyAddinClient.AddinClient({ callbacks: { init: (args) => { // perform any initialization needed for the add-in // when the tile is ready to be shown, inform the host page args.ready({ showUI: true, title: 'My Custom Tile' }); } } }); }()); Deploy the add-in\nAt this point, we can deploy our web application. We could serve it locally (ex: https://localhost:4000), but in this case, Visual Studio makes it easy to publish to an Azure App service. For the purpose of this walk-through, we'll publish the web application to: https://blackbaudaddinhelloworld.azurewebsites.net (of course, since we've already claimed this Azure App Service name, you'll need to publish your working sample application to a different url)\nAs you'd expect, we can view the tile at: https://blackbaudaddinhelloworld.azurewebsites.net/helloworld.html\nRegister the add-in\nNow that our web application has been deployed, we can register it as part of our SKY API application by navigating to the SKY API Developer Portal. From the Developer Account menu, select My Applications, and navigate to the SKY API application for which we want to register the add-in. Important! When you add add-in details to your SKY API application, the add-in will immediately become visible to any existing customers who've already enabled your SKY API application (as well as any customers who may enable your application in the future). For development and testing purposes, we recommend using a non-production SKY API application to ensure your add-in functions properly before registering the add-in with your production application.\nOn the application details page, select the Add button from within the Add-ins tile to create a new add-in definition: On this dialog, we can provide the metadata about our add-in, including a friendly name to help distinguish this add-in from others we might create in the future, as well as the extension point (the location within the system where the add-in will be rendered), and the URL for the add-in itself. In this case, we're building a custom tile for the constituent record page, so we'll choose the \"Constituent Tile Dashboard\" extension point.\nA few notes about the URL: It must be an absolute and fully qualified URL, but it can include static parameter values.\nIt must use HTTPS to avoid mixed content problems in the browser.\nWe do support local development, so if you're able to serve the web site locally, you can provide a localhost value for the URL (for example: https://localhost:4000). That all! Once defined, the add-in will be shown for any customers who've enabled the SKY API application.\nView the add-in\nTo view your add-in, visit the page or area within the system where the add-in will be rendered (according to the definition of the extension point).\nWhen the page loads, our custom tile will appear (likely at the bottom of the page): The tile looks and behaves like any native tile within the system - users can drag the tile around, and the position (left or ride side) and state (expanded or collapsed) will be persisted along with other tile details.\nShow contextual values\nNow, let's update the UI to display the various contextual values that are made available to add-ins.\nFirst, we'll start by displaying the \"environment ID\" – you'll hear more about \"environments\" in the future, but for now you can think of the environment as a replacement for the concept of \"tenant\". As described in the SKY Addin Client library documentation, the environment ID is provided as part of the args sent to the init callback function: // BBSkyAddinClient is global here. var client = new BBSkyAddinClient.AddinClient({ callbacks: { init: (args) => { // the environment ID is provided as part of the args object envId = args.envId; ... } } }); To show this value, we'll add the following markup to the HTML:\n<div> <p /> <div>The environment ID is a context value that is available to all add-ins:</div> <span id=\"environmentId\"></span>\n</div> Next, we'll display context values that are specific to the extension point itself. In the case of a \"Constituent Tile Dashboard\" extension point, the context value will be the ID of the constituent. This context value is provided along with the environment ID as part of the args sent to the init function, and we'll show it in the UI by adding the following markup:\n<div> <p /> <div>Additional context values vary for each extension point - for constituent tiles, the ID of the constituent is provided:</div> <span id=\"contextRecordId\"></span>\n</div> You can find complete documentation for each extension point on the extension points documentation page.\nSo now our HTML looks like this:\n<!DOCTYPE html>\n<html>\n<head> <meta charset=\"utf-8\" /> <title></title> <script src=\"https://code.jquery.com/jquery-3.2.1.min.js\" integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/@blackbaud/sky-addin-client@1.0.0/bundles/sky-addin-client.umd.min.js\"></script> <script src=\"HelloWorld.js\"></script> <link href=\"HelloWorld.css\" rel=\"stylesheet\" />\n</head>\n<body> <h2>Hello world!</h2> <span>This is a very simple custom tile</span> <div> <p /> <div>The environment ID is a context value that is available to all add-ins:</div> <span id=\"environmentId\"></span> </div> <div> <p /> <div>Additional context values vary for each extension point - for constituent tiles, the ID of the constituent is provided:</div> <span id=\"contextRecordId\"></span> </div> </body>\n</html> In our JavaScript file, we'll add the following lines to the init method before informing the host page to show the tile – this code will use jQuery to display the environment ID and context record ID.\n$('#environmentId').text(args.envId);\n$('#contextRecordId').text(args.context.recordId); The complete JavaScript is shown here.\n(function () { // BBSkyApiAddin is global here. var client = new BBSkyApiAddin.AddinClient({ callbacks: { init: (args) => { $('#environmentId').text(args.envId); $('#contextRecordId').text(args.context.recordId); // inform the host page that the addin is ready to be shown args.ready({ showUI: true, title: 'My Custom Tile' }); } } }); }()); Fetch a user identity token\nA final piece of contextual data that is available is the \"user identity token\". This value can be used to convey the Blackbaud user ID in a secure fashion to the add-in's backend (where it can be validated and decoded). Having this value on the server will provide a means of mapping the Blackbaud user to a user identity in the 3rd-party system. Add-ins can obtain a user identity token by requesting it from the host page via the getAuthToken method of the SKY Add-in Client JavaScript library.\nThe \"user identity token\" is not the same as the SKY API access token and cannot be used to make calls to the SKY API. For proper security, add-ins should expect to initiate the SKY API OAuth 2.0 Authorization Code flow by rendering a \"Connect to SKY API\" button in the add-in's user interface. The result of that operation will be a SKY API access token, which (along with the Blackbaud user ID and environment ID) can be persisted along with the native user identity in the 3rd-party system.\nFor the purpose of this simple demo, we'll simply fetch and display the user identity token value. Later tutorials will demonstrate how to pass this token to the add-in's backend for validation.\nLet's add the following markup to render a button in the UI for getting a user identity token:\n<div> <p /> <div>Click the button to request a user identity token for the currently logged-in user</div> <button id=\"getAuthToken\">Get auth token</button>\n</div> <div id=\"authToken\"> <p /> <div>The following string represents the identity of the current user, and can be provided to the add-in's backend for validation:</div> <span id=\"authTokenValue\"></span>\n</div> Let's hide the authToken div until the user clicks the button by adding some styling to the CSS:\n#authToken { display: none;\n} In the JavaScript, we'll wire up a click handler for the button in the init method:\n// wire up a click handler for the login button\n$(\"#getAuthToken\").click(getAuthToken); …and provide the implementation to fetch and display the token:\nfunction getAuthToken() { $(\"#authToken\").hide(); $(\"#authTokenValue\").text(\"\"); client.getAuthToken().then((token) => { $(\"#authTokenValue\").text(token); $(\"#authToken\").show(); });\n} Now, our markup looks like this:\n<!DOCTYPE html>\n<html>\n<head> <meta charset=\"utf-8\" /> <title></title> <script src=\"https://code.jquery.com/jquery-3.2.1.min.js\" integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/@blackbaud/sky-addin-client@1.0.0/bundles/sky-addin-client.umd.min.js\"></script> <script src=\"HelloWorld.js\"></script> <link href=\"HelloWorld.css\" rel=\"stylesheet\" />\n</head>\n<body> <h2>Hello world!</h2> <span>This is a very simple custom tile</span> <div> <p /> <div>The environment ID is a context value that is available to all add-ins:</div> <span id=\"environmentId\"></span> </div> <div> <p /> <div>Additional context values vary for each extension point - for constituent tiles, the ID of the constituent is provided:</div> <span id=\"contextRecordId\"></span> </div> <div> <p /> <div>Click the button to request a user identity token for the currently logged-in user</div> <button id=\"getAuthToken\">Get auth token</button> </div> <div id=\"authToken\"> <p /> <div>The following string represents the identity of the current user, and can be provided to the add-in's backend for validation:</div> <span id=\"authTokenValue\"></span> </div> </body>\n</html> The complete JavaScript is shown here:\n(function () { // BBSkyApiAddin is global here. var client = new BBSkyApiAddin.AddinClient({ callbacks: { init: (args) => { $('#environmentId').text(args.envId); $('#contextRecordId').text(args.context.recordId); // wire up a click handler for the login button $(\"#getAuthToken\").click(getAuthToken); // inform the host page that the addin is ready to be shown args.ready({ showUI: true, title: 'My Custom Tile' }); } } }); function getAuthToken() { $(\"#authToken\").hide(); $(\"#authTokenValue\").text(\"\"); client.getAuthToken().then((token) => { $(\"#authTokenValue\").text(token); $(\"#authToken\").show(); }); } }()); View the updated add-in\nAfter redeploying the add-in and refreshing the constituent page, the context values will be shown: Clicking the button will fetch and display the user identity token, which should be treated as an opaque string on the client: Next steps Get an overview of the SKY Add-ins framework.\nView the Getting started tutorial to learn more about how to build a SKY Add-in.\nView additional concepts and capabilities associated with the SKY Add-ins framework.\nView our design guidelines to read about building an effective and compelling user experience for your add-in. "
      }
     ],
     "text": " Edit in GitHub "
    },
    {
     "layout": "layout-sidebar",
     "name": "How-to guides",
     "order": 40,
     "published": true,
     "showInNav": true,
     "back_to_top": true,
     "title": "How-to guides",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Addins How-to-guides",
     "abspath": "docs/addins/how-to-guides/index.md",
     "uri": "/docs/addins/how-to-guides/",
     "nav_links": [
      {
       "layout": "layout-sidebar",
       "name": "Add-in design",
       "order": 10,
       "published": true,
       "showInNav": true,
       "title": "Add-in design",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Addins How-to-guides Addin-design",
       "abspath": "docs/addins/how-to-guides/addin-design/index.md",
       "uri": "/docs/addins/how-to-guides/addin-design/",
       "text": " Edit in GitHub Design your add-in\nSKY Add-ins extend the Blackbaud solution experience by providing contextual functionality that can be accessed within selected areas of the user interface. Add-ins provide a natural extension to the user experience and facilitate a deeper integration by empowering users to work seemlessly with third-party features and content without having to context switch between applications.\nYour add-in's UX design must integrate seamlessly with the Blackbaud user interface to provide an efficient, natural interaction model for your users.\nSKY Add-in design principles\nBlackbaud applications follow a general set of interaction guidelines, with consistent presentation metaphors used across every aspect of the system. This commonality is built on a set of principles designed to support end users' tasks. Understanding and following these principles will help you create positive add-in experiences for users: Design explicitly for SKY. The functionality, look and feel of a SKY Add-in should harmoniously complement the rest of the Blackbaud user's experience. Add-ins should feel native and behave like other native features. A well-designed add-in will be an appropriate blend of your experience, the Add-in framework, and the Blackbaud native application functionality. While we do not require any particular client-side user interface framework, consider using SKY UX to achieve a consistent look and feel where appropriate.\nFor more information, view the SKY UX design guidelines. Focus on a few key tasks; do them well. Help users be productive by focusing on common use cases and workflows without being too general-purpose. Don't try to replicate your entire application's functionality within an add-in. Instead, provide contextually relevant functionality, with links to your web site as appropriate. Use branding appropriately. Allow your content and functionality to be the focus of the experience, and brand your add-in wisely. Strike a balance between providing users with a unique and recognizable experience from your system with the existing look and feel within the native Blackbaud system. Avoid distracting users with unnecessary marketing material and instead keep the focus on content and task completion. Design for broad access. Like all Blackbaud solutions, add-ins are designed to work across platforms, across browsers, and even across devices. Your add-in's user interface should be optimized for the specific extension point metaphor (tab, tile, etc.), with a responsive look and feel across form factors. "
      },
      {
       "layout": "layout-sidebar",
       "name": "Add-in development",
       "order": 20,
       "published": true,
       "showInNav": true,
       "title": "Add-in development",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Addins How-to-guides Addin-development",
       "abspath": "docs/addins/how-to-guides/addin-development/index.md",
       "uri": "/docs/addins/how-to-guides/addin-development/",
       "text": " Edit in GitHub Add-in development\nUse a non-production SKY API application for development\nAs mentioned in the Register your add-in documentation, all SKY Add-ins are associated with your registered application.\nThis means that whenever you register your add-in metadata, any customers who've already enabled your application (or who do so in the future) will immedately see your add-in(s).\nFor this reason, we recommend making use of a separate, non-production SKY API application while testing your add-in behavior. Once you are happy with the results, you can register your add-in with your production SKY API application.\nThis technique can be used to introduce new add-ins in the future as well. For example, if Blackbaud adds support for new extension points in the future, you can develop against those new extension points using your non-production application, and then when ready you can update your existing, production SKY API application with your additional add-in metadata.\nControl your add-in's visibility\nRemember that add-ins are instantiated as hidden iframes on the page and are only made visible when your code informs the host page. You can use this to your advantage when building and testing by introducing logic that is only visible based on some contextually available value. For example, you can limit visibility to your environment only, or you can whitelist user IDs (by correlating from the current Blackbaud user ID). "
      }
     ],
     "text": " "
    },
    {
     "layout": "layout-sidebar",
     "name": "Overview",
     "order": 10,
     "published": true,
     "showInNav": true,
     "back_to_top": true,
     "title": "Overview",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Addins Overview",
     "abspath": "docs/addins/overview/index.md",
     "uri": "/docs/addins/overview/",
     "text": " Edit in GitHub Add-ins Overview\nSKY Add-ins allow developers to build complementary features that integrate deeply within the user interface of Blackbaud's solutions. With add-ins, developers can use familiar web development technologies such as HTML, CSS, and JavaScript to augment out-of-box product areas with new functionality.\nFor example, with add-ins you can: Add custom tiles to selected pages in the system - bring in data from external systems that is contextually relevant to the current record and provide streamlined workflows for business logic. Create rich, interactive user experiences - expose new 3rd-party visualizations Add-ins are implemented as web applications that run external to the Blackbaud host application, so they can do almost anything that a webpage can do inside a browser. At runtime, the host application provides an isolated sandbox iframe that contains the add-in page, and provides context values needed to load the add-in. Key features\nThe add-ins framework provides the following: A \"write-once, run anywhere\" model - SKY add-ins provide cross-platform/browser/device support, so they appear on and work great from mobile devices as well as desktop browsers.\nUses standard web technologies - add-ins are web applications, so you can use any framework/tech stack/libraries desired, both client-side and server-side. For example, use ASP.NET, PHP, Node.js, MVC, Angular, React, etc.\nEasy deployment - add-ins are deployed to your cloud, so you control how and when your add-in is updated.\nSingle sign-on (SSO) - add-ins integrate easily with 3rd-party systems.\nCommunicate with the host application using SKY API.\nAssociated with SKY applications - when customers enable your SKY application, they'll see the add-ins you've defined. Components of an add-in\nAdd-ins are defined as part of your SKY application within the SKY API developer portal. There are two basic components of an add-in: an extension point (described below) and the URL of your own web application. Types of add-ins\nAdd-ins are associated with specific locations within the Blackbaud user interface, known as extension points. The extension point represents a named location in the user interface where add-ins can be rendered, and it defines both the \"class\" of add-in (tile, button, tab, etc.) as well as the shape of the context values that will be provided at runtime.\nTile add-ins\nTile add-ins can be created for for selected pages within the system that support a dashboard of tiles. Custom tiles will persist state and location on a per-user basis along with other native tiles. Button add-ins (coming soon)\nButton add-ins can be created for selected pages within the system that support page-level actions. Tab add-ins (coming soon)\nTab add-ins can be created for selected pages within the system that use tabs. Future add-ins\nOver time, we'll introduce support for new types of add-ins and new extension points within the system.\nNote! Stay informed as new extension points are introduced by following the SKY Add-ins changelog page, and feel free to submit Ideas for new types of add-ins and extension points.\nNext steps View the Getting started tutorial to learn more about how to build a SKY Add-in.\nView the Hello World sample to see a detailed walk-through of building an add-in.\nView additional concepts and capabilities associated with the SKY Add-ins framework.\nView our design guidelines to read about building an effective and compelling user experience for your add-in. "
    },
    {
     "layout": "layout-sidebar",
     "name": "Reference",
     "order": 50,
     "published": true,
     "showInNav": true,
     "back_to_top": true,
     "title": "Reference",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Addins Reference",
     "abspath": "docs/addins/reference/index.md",
     "uri": "/docs/addins/reference/",
     "text": " Edit in GitHub Reference\nThese resources provide additional information and support for developing SKY Add-ins:\nSKY Add-in client\nAdd-ins make use of a JavaScript library to facilitate the interop between the add-in iframe and the host application. The library is available on GitHub, and more information on how to use the library can be found in the readme.txt. SKY Add-in Client JavaScript library\nUser identity tokens\nTo facilitate the single-sign-on experience, add-ins can obtain a user identity token (UIT) from the host applidcation. This token can be used to securely correlate Blackbaud users with user accounts in the add-in's native system. Add-in developers should first validate the signature of the UIT against the OpenIDConnect endpoint within SKY API OAuth 2.0 service. The OpenIDConnect configuration can be found at: SKY API OAuth 2.0 service OpenIDConnect configuration endpoint\nDevelopers building add-ins in .NET can make use of a Blackbaud-provided library to assist with validating the UIT. This library is distributed as a NuGet package named Blackbaud.Addin.tokenAuthentication on NuGet.org.\nMore information on how to use this library can be found in the readme.txt: Blackbaud.Addin.TokenAuthentication "
    }
   ],
   "text": " Edit in GitHub Add-ins\nNote! This content is preview documentation for an upcoming capability that is limited to SKY Add-in beta participants. If you are interested in participating in the beta program, please contact us.\nSKY Add-ins enable developers to build complementary features that integrate deeply within the user interface of Blackbaud solutions. With add-ins, developers can use familiar web development technologies such as HTML, CSS, and JavaScript to augment selected areas of the product with new functionality. Add-ins run in the browser, so they work well in both desktop and mobile scenarios.\nLearn how to create SKY Add-ins with our quick starts, how-to guides, and reference documentation.\nOverview\nGet an overview of the SKY Add-ins framework.\nQuick starts\nLearn how to create your first add-in: Get started tutorial Hello world sample How-to guides Design the user interface of an add-in\nAdd-in development Reference SKY Add-in Client JavaScript library SKY API OAuth 2.0 service OpenIDConnect configuration endpoint Blackbaud.Addin.TokenAuthentication "
  },
  {
   "layout": "layout-sidebar",
   "name": "Common issues with add-ins",
   "order": 60,
   "published": true,
   "showInNav": true,
   "title": "Common add-in issues",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Addins Common-issues",
   "abspath": "docs/addins/common-issues/index.md",
   "uri": "/docs/addins/common-issues/",
   "text": " Edit in GitHub Common issues with add-ins\nAdd-in does not appear\nAdd-ins support conditional visibility, which allows for an add-in to perform initialization logic to determine whether it should be shown or not. By default, add-ins are hidden and must inform the parent page when it's time to be shown. This happens as part of the init callback from the host application.\nUsing the information provided in the init arguments, the add-in should determine if and how it should be rendered. Then it should call the ready callback, informing the host page.\nvar client = new AddinClient({\ncallbacks: { init: (args) => { args.ready({ showUI: true, title: 'My Custom Tile Title' }); }\n}\n}); For more information, see the Add-in Client JavaScript library "
  },
  {
   "layout": "layout-sidebar",
   "name": "Concepts",
   "order": 30,
   "published": true,
   "showInNav": true,
   "back_to_top": true,
   "title": "Concepts",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Addins Concepts",
   "abspath": "docs/addins/concepts/index.md",
   "uri": "/docs/addins/concepts/",
   "nav_links": [
    {
     "layout": "layout-sidebar",
     "name": "Add-in single-sign-on (SSO)",
     "order": 40,
     "published": true,
     "showInNav": true,
     "title": "Add-in single-sign-on (SSO)",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Addins Concepts Addin-sso",
     "abspath": "docs/addins/concepts/addin-sso/index.md",
     "uri": "/docs/addins/concepts/addin-sso/",
     "text": " Edit in GitHub Add-in single-sign-on (SSO)\nSKY add-ins support a single-sign-on (SSO) mechanism that can be used to correlate the current Blackbaud user with a user in the add-in's native system.\nWithin the Add-in Client JavaScript library, the AddinClient class provides a getAuthtoken function for getting a short-lived \"user identity token\" from the host application. This token is a signed value that is issued to the SKY API application and represents the Blackbaud user's identity.\nThe general flow is that when an add-in is initiated, it can request a user identity token from the host page using the getAuthtoken function. The host will in turn request a user identity token from the SKY API OAuth 2.0 service. The user identity token (a JWT), will be addressed to the SKY API application and will contain the Blackbaud user's unique identifier. The OAuth service will return the token to the host, and the host will pass the token to the add-in. The add-in can then pass the user identity token (along with the environment ID provided as part of the initial context when the add-in is instantiated) to its own backend, where it can be validated and used to look up a user in the add-in's native system. If a user mapping exists, then the add-in can consider the user logged in and immediately display content to the user. If no user mapping exists, the add-in can prompt the user to login to the add-in's native system. Once the user's identity in the native system is known, the add-in can persist the user mapping so that on subsequent loads the user doesn't have to log in again (even across devices).\nNote that the user identity token is signed by the SKY API OAuth 2.0 service, but it cannot be used to make calls to the SKY API. It is purely used to convey the user's identity to the add-in. In order to make SKY API calls, a proper SKY API access token must be obtained.\nThis flow is illustrated below: Add-ins can make the following request upon initialization to obtain a user identity token (typically handled within the init callback):\nvar client = new AddinClient({...});\nclient.getAuthToken().then((token) => { var userIdentityToken = token; . . .\n}); The following string represents a sample user identity token returned by the getAuthToken function: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjREVjZzVkxIM0FtU1JTbUZqMk04Wm5wWHU3WSJ9.eyJuYW1laWQiOiIxMjM0ZjVjNC1iOGRhLTQxYWQtYjAzMy1hMGU5ZWY3ZGI3OTkiLCJpc3MiOiJodHRwczovL29hdXRoMi5za3kuYmxhY2tiYXVkLmNvbS8iLCJhdWQiOiJiOWEwMmE0OS0wNGNiLTRiOWMtYTkwYy1kMjYyODcxYjU0N2QiLCJleHAiOjE1MjE1NzUxNTAsIm5iZiI6MTUyMTU3NDg1MH0.Cfy4VkLUyP_tvvo8UqswiYtOdQ3Tlj0CJLgoW-up4Ns9p4R4qKBv8kJJ8WPRTKFlVNTuBWdMrQ1I07oSuiQ Here's a decoded version of the above user identity token:\n{ \"nameid\": \"1234f5c4-b8da-41ad-b033-a0e9ef7db799\", \"iss\": \"https://oauth2.sky.blackbaud.com/\", \"aud\": \"b9a02a49-04cb-4b9c-a90c-d262871b547d\", \"exp\": 1521575150, \"nbf\": 1521574850\n} Notice that the aud claim indicates the intended audience (the SKY API application that owns the add-in), and the nameid claim contains the user's Blackbaud ID.\nValidating the user identity token (UIT)\nBefore looking for a user mapping, add-in developers should first validate the signature of the UIT against the OpenIDConnect endpoint within SKY API OAuth 2.0 service. This prevents certain types of attack vectors and provides a mechanism for the add-in to securely convey the Blackbaud user's identity to its own backend. The SKY API OpenIDConnect configuration can be found at: https://oauth2.sky.blackbaud.com/.well-known/openid-configuration.\nDevelopers building add-ins in .NET can make use of a Blackbaud-provided library to assist with validating the user identity token. This library is distributed as a NuGet package named Blackbaud.Addin.TokenAuthentication.\nMore information on how to use this library can be found in the readme.txt:\nSample\nThe follow sample demonstrates code that validates the raw token value obtained from the host application using the Blackbaud.Addin.TokenAuthentication library:\n// this represents the user identity token returned from getAuthToken()\nvar rawToken = \"(raw token value)\"; // this is the ID of the developer's SKY API application\nvar applicationId = \"(some application ID)\"; // create and validate the user identity token\nUserIdentityToken uit;\ntry\n{ uit = await UserIdentityToken.ParseAsync(rawToken, applicationId); // if valid, the UserId property contains the Blackbaud user's ID var userId = uit.UserId;\n}\ncatch (TokenValidationException ex)\n{ // process the exception\n} Once the token has been validated, the add-in's backend will know the Blackbaud user ID and can determine if a user mapping exists for a user in the add-in's native system. If a mapping exists, then the add-in's backend can immediately present the content for the add-in. If no user mapping exists, the add-in can prompt the user to login.\nCorrelating Blackbaud users with external systems\nFor proper correlation with external systems, it is important to understand how Blackbaud models our customer base. The following list describes several concepts within the data model: Legal entity - We use the term legal entity to represent a top-level customer record in the system. This could be a specific non-profit organization, an individual change agent, or even a Partner ISV.\nEnvironment - An environment is a logical grouping of products and services that are available to a legal entity. You can think of an environment as a container of various Blackbaud products and services - it is the unifying construct that faciltiates the inter-communication between those products and services. A legal entity will typically have at least one environment, but some legal entities may have multiple environments used to serve various purposes (like testing, staging, production, regional chapters, etc.).\nUser - The term user refers to a specific Blackbaud ID user account. Within this data model, a single Blackbaud user can have access to multiple environments and potentially access to environments across multiple organizations. Therefore, it is important to properly consider both User and Environment when establishing a link with an external system. At runtime, the environment ID will be provided as part of the args object, and your add-in can request a user identity token using the getAuthToken method of the AddinClient class. Note that details about the legal entity, environment, and user are returned as part of the /token endpoint response when obtaining SKY API access token. For more information, see step 5 of the Authorization Code Flow documentation, or step 3 of the Implicit Flow documentation. Important! Be sure to properly account for these concepts when presenting related data from your system. "
    },
    {
     "layout": "layout-sidebar",
     "name": "Add-in capabilities",
     "order": 30,
     "published": true,
     "showInNav": true,
     "title": "Add-in capabilities",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Addins Concepts Capabilities",
     "abspath": "docs/addins/concepts/capabilities/index.md",
     "uri": "/docs/addins/concepts/capabilities/",
     "text": " Edit in GitHub Add-in capabilities\nShowing a modal\nUsing the Add-in Client JavaScript library, SKY Add-ins are capable of launching a \"modal\" user experience to show more details or gather additional input from the user. The modal will be rendered in a separate full-screen iframe to maximize the available real estate (meaning, it will not be scoped to the bounds of the add-in's initial iframe).\nTo launch a modal, call the showModal function on the client, passing the URL for the modal and any context data needed by the modal:\nvar client = new AddinClient({...}); // To launch a modal, call the showModal method\nclient.showModal({ url: '<modal-addin-url>', context: { /* arbitrary context object to pass to modal */ }\n}); The modal add-in\nThe host page will show a full-screen mask element to block user input, and then launch a full-screen iframe for the URL provided. The modal iframe will be loaded in the same way it does for other types of add-ins. The modal page must also pull in the SKY Add-in Client library and make use of the AddinClient class.\nThe modal add-in will be responsible for rendering the modal element itself (including any chrome around the modal content). To create a native-looking modal experience, the modal add-in may set the page body background to transparent and immediately launch a SKY UX modal within its full screen iframe.\nAs with a typical add-in, the modal add-in should register for the init callback and will receive the envId in the arguments. The context field for arguments will match the context object passed into the showModal call from the parent add-in. Note that this is crossing iframes so the object has been serialized and deserialized. It can be used for passing data but not functions.\nClosing the modal\nThe modal add-in (not the parent add-in) is responsible for closing itself using the closeModal function on the AddinClient. It is able to pass context information back to the parent add-in:\n// Modal add-in rendered in full screen iframe\nvar client = new AddinClient({...});\nclient.closeModal({ context: { /* arbitrary context object to pass to parent add-in */ }\n}); The parent add-in can listen to the close event via the modalClosed Promise returned from showModal. The Promise will resolve when the modal is closed, and will include the context data returned from the modal:\n// Parent add-in launching a modal\nvar client = new AddinClient({...}); // provide some context values from the parent add-in to the modal add-in\nvar modalContext = { someProperty: \"Foo\", anotherProperty: \"Bar\"\n}; client.showModal({ url: '<modal-addin-url>', context: modalContext\n}).modalClosed.then((context) => { // context represents data returned by the closeModal method\n}); Navigate the parent page\nAn add-in can choose to navigate the parent page based on user interactions. To do so, call the navigate method on the AddinClient object. This function takes an object argument with property url for where to navigate. A fully qualified url should be used:\nvar client = new AddinClient({...});\nclient.navigate({ url: '<target_url>' }); Opening the Blackbaud help window\nAn add-in can instruct the parent page to display the Help flyout window, and specify which page to display. To do this, call the openHelp method on the AddinClient object. This function takes an object argument with property helpKey for the name of the help tab to display. A single .html file should be named.\nvar client = new AddinClient({...});\nclient.openHelp({ helpKey: '<target_page>.html' }); "
    },
    {
     "layout": "layout-sidebar",
     "name": "Connecting to SKY API",
     "order": 50,
     "published": true,
     "showInNav": true,
     "back_to_top": true,
     "title": "Connecting to SKY API",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Addins Concepts Connecting-to-skyapi",
     "abspath": "docs/addins/concepts/connecting-to-skyapi/index.md",
     "uri": "/docs/addins/concepts/connecting-to-skyapi/",
     "text": " Edit in GitHub Connecting to SKY API\nIn some cases, the contextual information made available to your add-in at runtime (the user's ID, the environment ID, and the current extension point context object) may be sufficient for your needs. Your add-in can surface contextual information from your system based on those runtimes values.\nIn other cases however, your add-in may need to make calls to SKY API in order to function properly. To call the SKY API, your add-in will need a SKY API access token; this requirement is in place to ensure proper security and handling of customer data. If your web application already has an access token for the current user and environment (context values provided at runtime), then you can use it to make calls to the SKY API (refreshing the token if needed). If not, you have some options for how your add-in can obtain a SKY API access token. Degrade your add-in's user interface\nYou might choose to degrade your add-in's user experience if your application has not acquired a SKY API access token for the current user and environment. You can simply provide a link to your web application within your add-in's user interface, and when the user navigates to your web application you can present a \"Connect to SKY API\" button and initiate the OAuth process.\nPrompt to connect to SKY API\nAlternately, you might choose to have your add-in initiate the OAuth process by surfacing a \"Connect to SKY API\" button in the add-in's user interface. Choose the OAuth flow that is most applicable for your scenario - the Authorization Code Flow is intended for server-to-server communication and results in an access token that can be refreshed once it has expred. The Implicit Flow is intended for SKY API calls from the client, and access tokens obtained from this flow are not refresh-able once expired.\nWhile more complex, we recommend using the Authorization Code flow because of the more secure handling of your application's \"secret\", and the ability to refresh the access token once it has expired. In any case, obtaining a SKY API access token for the current user and environment can be a one-time user-interactive operation that mimics functionality available in your full-blown web site.\nInitiate OAuth\nTo properly initiate the SKY API OAuth process, your add-in should expect to include a state parameter that will be used to prevent against cross-site request forgery (CSRF) attacks. As discussed in the FAQ, this value will be echoed back to your application's redirect endpoint when the user provides consent, and your application should expect to validate that the value echoed originated from your system.\nThe following code sample shows a very basic technique of acquiring a SKY API access token. This code executes on the client and works by showing a popup window that navigates to a /skyapi/authorize page within the add-in's web application. Within this endpoint (server code not shown), a state parameter value is generated, and the response can return a 302 Redirect to the SKY API Authorization page (including the state parameter). The popup window will follow the redirect, and the user will be able to provide consent for your application. Upon consent, the browser will be redirected again - this time to your application's registered redirect URI. The response from this endpoint in your web application can include some script that closes the popup browser window:\nfunction connectToSkyApi() { // this code starts within the user interface of the add-in - it launches a popup // and navigates to an endpoint in the add-in's backend to properly establish a // state parameter and initiate the SKY API OAuth process. var url = \"/skyapi/authorize\" + \"?token=\" + userIdentityToken + \"&envid=\" + initialArgs.envId; var child = window.open(url, '_blank', 'toolbar=0,status=0,width=625,height=500'); var timer = setInterval(checkChild, 500); // when the user has provided consent, your application's redirect URI endpoint // can include script that will // close the browser window. function checkChild() { if (child.closed) { clearInterval(timer); // if the user provided consent, the add-in's backend will have an access token for the user } } } Note that the user identity token is provided as well, so that your add-in's backend can ensure that it is being called from your front-end code.\nLimit the scope of consent to the current environment\nAs mentioned in the Add-in single-sign-on documentation, a given Blackbaud user may have access to multiple environments, even spanning multiple organizations.\nWhen building the redirect to the SKY API Authorization page, you'll want to limit the scope of the user's consent to the \"current\" environment, which is made available at runtime via the args object provided to the init callback. The SKY API Authorization page supports an optional query parameter named environment_id that can be used to limit the scope of consent to the current environment. This query parameter simply provides a hint to the Authorization page to filter the list of eligble environments to the current environment.\nTo make use of this, when your add-in's web application builds the redirect to the SKY API Authorization page, be sure to include the environment_id parameter:\nhttps://oauth2.apim.blackbaud.com/authorization?\nresponse_type=code\n&client_id=YOURCLIENTID\n&redirect_uri=YOURREDIRECTURI\n&state=YOURSTATEVALUE\n&environment_id=YOURENVIRONMENTID Important! If you omit this parameter, all environments accessible by the user will appear on the consent page, which could result in the user choosing an environment other than the one your add-in in operating within.\nProtection against clickjacking\nTo protect against clickjacking attacks, the SKY API Authorization page will be updated to prevent being rendered within an iframe. This means your add-in will not be able to initiate the OAuth process within its own iframe. You'll need to initiate the OAuth process by launching a separate browser window as shown above.\nFor more information on initiating the OAuth process, see Authorization. "
    },
    {
     "layout": "layout-sidebar",
     "name": "Extension points",
     "order": 10,
     "published": true,
     "showInNav": true,
     "back_to_top": true,
     "title": "Extension points",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Addins Concepts Extension-points",
     "abspath": "docs/addins/concepts/extension-points/index.md",
     "uri": "/docs/addins/concepts/extension-points/",
     "text": " Edit in GitHub Extension points\nEach location within the Blackbaud application user interface that can be customized is known as an extension point. The extension point represents a named location in the product where add-ins can be rendered, and it defines both the \"class\" of add-in (tile, button, tab, etc.), as well as the shape of the context values that will be provided at runtime. As described in the SKY Addin Client library documentation, the context values for the extension point are made available to add-ins as part of the args object sent to the init callback function: // BBSkyAddinClient is global here. var client = new BBSkyAddinClient.AddinClient({ callbacks: { init: (args) => { // the context values are provided as part of the args object context = args.context; // most extension points provide the current record ID currentRecordId = context.recordId; ... } } }); Each extension point defines its own \"context\", which represents the initial set of values that will be made available at runtime. The context represents a contract with consumers (and thus it will be backwards compatible with future changes). For example, the Constituent Tile Dashboard defines the context as containing a recordId property representing the system record ID of the current constituent. This means that, for constituent tiles, the following JSON shape will be made available through the context object at runtime:\n{ \"recordId\": \"280\"\n} Additional contextual information about the current record can be obtained through SKY API as needed based on the initial set of context values.\nThe following section describes the extension points that have been defined to date:\nConstituent Extension point Notes Constituent Tile Dashboard Tile dashboard on the constituent record page The context object will contain the following properties: Property Description recordId The system record ID of the current constituent Gift Extension point Notes Gift Tile Dashboard Tile dashboard on the gift record page The context object will contain the following properties: Property Description recordId The system record ID of the current gift Payables Extension point Notes Invoice Tile Dashboard Tile dashboard on the invoice record page The context object will contain the following properties: Property Description recordId The system record ID of the current invoice Vendor Tile Dashboard Tile dashboard on the vendor record page The context object will contain the following properties: Property Description recordId The system record ID of the current vendor Purchase Order Tile Dashboard Tile dashboard on the purchase order record page The context object will contain the following properties: Property Description recordId The system record ID of the current purchase order General Ledger Extension point Notes Account Tile Dashboard Tile dashboard on the purchase order record page The context object will contain the following properties: Property Description recordId The system record ID of the current account Project Tile Dashboard Tile dashboard on the project record page The context object will contain the following properties: Property Description recordId The system record ID of the current project Journal Entry Batch Tile Dashboard Tile dashboard on the journal entry batch record page The context object will contain the following properties: Property Description recordId The system record ID of the current journal entry batch Treasury Extension point Notes Bank Account Tile Dashboard Tile dashboard on the bank account record page The context object will contain the following properties: Property Description recordId The system record ID of the current bank account "
    }
   ],
   "text": " "
  },
  {
   "layout": "layout-sidebar",
   "name": "Add-in single-sign-on (SSO)",
   "order": 40,
   "published": true,
   "showInNav": true,
   "title": "Add-in single-sign-on (SSO)",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Addins Concepts Addin-sso",
   "abspath": "docs/addins/concepts/addin-sso/index.md",
   "uri": "/docs/addins/concepts/addin-sso/",
   "text": " Edit in GitHub Add-in single-sign-on (SSO)\nSKY add-ins support a single-sign-on (SSO) mechanism that can be used to correlate the current Blackbaud user with a user in the add-in's native system.\nWithin the Add-in Client JavaScript library, the AddinClient class provides a getAuthtoken function for getting a short-lived \"user identity token\" from the host application. This token is a signed value that is issued to the SKY API application and represents the Blackbaud user's identity.\nThe general flow is that when an add-in is initiated, it can request a user identity token from the host page using the getAuthtoken function. The host will in turn request a user identity token from the SKY API OAuth 2.0 service. The user identity token (a JWT), will be addressed to the SKY API application and will contain the Blackbaud user's unique identifier. The OAuth service will return the token to the host, and the host will pass the token to the add-in. The add-in can then pass the user identity token (along with the environment ID provided as part of the initial context when the add-in is instantiated) to its own backend, where it can be validated and used to look up a user in the add-in's native system. If a user mapping exists, then the add-in can consider the user logged in and immediately display content to the user. If no user mapping exists, the add-in can prompt the user to login to the add-in's native system. Once the user's identity in the native system is known, the add-in can persist the user mapping so that on subsequent loads the user doesn't have to log in again (even across devices).\nNote that the user identity token is signed by the SKY API OAuth 2.0 service, but it cannot be used to make calls to the SKY API. It is purely used to convey the user's identity to the add-in. In order to make SKY API calls, a proper SKY API access token must be obtained.\nThis flow is illustrated below: Add-ins can make the following request upon initialization to obtain a user identity token (typically handled within the init callback):\nvar client = new AddinClient({...});\nclient.getAuthToken().then((token) => { var userIdentityToken = token; . . .\n}); The following string represents a sample user identity token returned by the getAuthToken function: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjREVjZzVkxIM0FtU1JTbUZqMk04Wm5wWHU3WSJ9.eyJuYW1laWQiOiIxMjM0ZjVjNC1iOGRhLTQxYWQtYjAzMy1hMGU5ZWY3ZGI3OTkiLCJpc3MiOiJodHRwczovL29hdXRoMi5za3kuYmxhY2tiYXVkLmNvbS8iLCJhdWQiOiJiOWEwMmE0OS0wNGNiLTRiOWMtYTkwYy1kMjYyODcxYjU0N2QiLCJleHAiOjE1MjE1NzUxNTAsIm5iZiI6MTUyMTU3NDg1MH0.Cfy4VkLUyP_tvvo8UqswiYtOdQ3Tlj0CJLgoW-up4Ns9p4R4qKBv8kJJ8WPRTKFlVNTuBWdMrQ1I07oSuiQ Here's a decoded version of the above user identity token:\n{ \"nameid\": \"1234f5c4-b8da-41ad-b033-a0e9ef7db799\", \"iss\": \"https://oauth2.sky.blackbaud.com/\", \"aud\": \"b9a02a49-04cb-4b9c-a90c-d262871b547d\", \"exp\": 1521575150, \"nbf\": 1521574850\n} Notice that the aud claim indicates the intended audience (the SKY API application that owns the add-in), and the nameid claim contains the user's Blackbaud ID.\nValidating the user identity token (UIT)\nBefore looking for a user mapping, add-in developers should first validate the signature of the UIT against the OpenIDConnect endpoint within SKY API OAuth 2.0 service. This prevents certain types of attack vectors and provides a mechanism for the add-in to securely convey the Blackbaud user's identity to its own backend. The SKY API OpenIDConnect configuration can be found at: https://oauth2.sky.blackbaud.com/.well-known/openid-configuration.\nDevelopers building add-ins in .NET can make use of a Blackbaud-provided library to assist with validating the user identity token. This library is distributed as a NuGet package named Blackbaud.Addin.TokenAuthentication.\nMore information on how to use this library can be found in the readme.txt:\nSample\nThe follow sample demonstrates code that validates the raw token value obtained from the host application using the Blackbaud.Addin.TokenAuthentication library:\n// this represents the user identity token returned from getAuthToken()\nvar rawToken = \"(raw token value)\"; // this is the ID of the developer's SKY API application\nvar applicationId = \"(some application ID)\"; // create and validate the user identity token\nUserIdentityToken uit;\ntry\n{ uit = await UserIdentityToken.ParseAsync(rawToken, applicationId); // if valid, the UserId property contains the Blackbaud user's ID var userId = uit.UserId;\n}\ncatch (TokenValidationException ex)\n{ // process the exception\n} Once the token has been validated, the add-in's backend will know the Blackbaud user ID and can determine if a user mapping exists for a user in the add-in's native system. If a mapping exists, then the add-in's backend can immediately present the content for the add-in. If no user mapping exists, the add-in can prompt the user to login.\nCorrelating Blackbaud users with external systems\nFor proper correlation with external systems, it is important to understand how Blackbaud models our customer base. The following list describes several concepts within the data model: Legal entity - We use the term legal entity to represent a top-level customer record in the system. This could be a specific non-profit organization, an individual change agent, or even a Partner ISV.\nEnvironment - An environment is a logical grouping of products and services that are available to a legal entity. You can think of an environment as a container of various Blackbaud products and services - it is the unifying construct that faciltiates the inter-communication between those products and services. A legal entity will typically have at least one environment, but some legal entities may have multiple environments used to serve various purposes (like testing, staging, production, regional chapters, etc.).\nUser - The term user refers to a specific Blackbaud ID user account. Within this data model, a single Blackbaud user can have access to multiple environments and potentially access to environments across multiple organizations. Therefore, it is important to properly consider both User and Environment when establishing a link with an external system. At runtime, the environment ID will be provided as part of the args object, and your add-in can request a user identity token using the getAuthToken method of the AddinClient class. Note that details about the legal entity, environment, and user are returned as part of the /token endpoint response when obtaining SKY API access token. For more information, see step 5 of the Authorization Code Flow documentation, or step 3 of the Implicit Flow documentation. Important! Be sure to properly account for these concepts when presenting related data from your system. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Add-in capabilities",
   "order": 30,
   "published": true,
   "showInNav": true,
   "title": "Add-in capabilities",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Addins Concepts Capabilities",
   "abspath": "docs/addins/concepts/capabilities/index.md",
   "uri": "/docs/addins/concepts/capabilities/",
   "text": " Edit in GitHub Add-in capabilities\nShowing a modal\nUsing the Add-in Client JavaScript library, SKY Add-ins are capable of launching a \"modal\" user experience to show more details or gather additional input from the user. The modal will be rendered in a separate full-screen iframe to maximize the available real estate (meaning, it will not be scoped to the bounds of the add-in's initial iframe).\nTo launch a modal, call the showModal function on the client, passing the URL for the modal and any context data needed by the modal:\nvar client = new AddinClient({...}); // To launch a modal, call the showModal method\nclient.showModal({ url: '<modal-addin-url>', context: { /* arbitrary context object to pass to modal */ }\n}); The modal add-in\nThe host page will show a full-screen mask element to block user input, and then launch a full-screen iframe for the URL provided. The modal iframe will be loaded in the same way it does for other types of add-ins. The modal page must also pull in the SKY Add-in Client library and make use of the AddinClient class.\nThe modal add-in will be responsible for rendering the modal element itself (including any chrome around the modal content). To create a native-looking modal experience, the modal add-in may set the page body background to transparent and immediately launch a SKY UX modal within its full screen iframe.\nAs with a typical add-in, the modal add-in should register for the init callback and will receive the envId in the arguments. The context field for arguments will match the context object passed into the showModal call from the parent add-in. Note that this is crossing iframes so the object has been serialized and deserialized. It can be used for passing data but not functions.\nClosing the modal\nThe modal add-in (not the parent add-in) is responsible for closing itself using the closeModal function on the AddinClient. It is able to pass context information back to the parent add-in:\n// Modal add-in rendered in full screen iframe\nvar client = new AddinClient({...});\nclient.closeModal({ context: { /* arbitrary context object to pass to parent add-in */ }\n}); The parent add-in can listen to the close event via the modalClosed Promise returned from showModal. The Promise will resolve when the modal is closed, and will include the context data returned from the modal:\n// Parent add-in launching a modal\nvar client = new AddinClient({...}); // provide some context values from the parent add-in to the modal add-in\nvar modalContext = { someProperty: \"Foo\", anotherProperty: \"Bar\"\n}; client.showModal({ url: '<modal-addin-url>', context: modalContext\n}).modalClosed.then((context) => { // context represents data returned by the closeModal method\n}); Navigate the parent page\nAn add-in can choose to navigate the parent page based on user interactions. To do so, call the navigate method on the AddinClient object. This function takes an object argument with property url for where to navigate. A fully qualified url should be used:\nvar client = new AddinClient({...});\nclient.navigate({ url: '<target_url>' }); Opening the Blackbaud help window\nAn add-in can instruct the parent page to display the Help flyout window, and specify which page to display. To do this, call the openHelp method on the AddinClient object. This function takes an object argument with property helpKey for the name of the help tab to display. A single .html file should be named.\nvar client = new AddinClient({...});\nclient.openHelp({ helpKey: '<target_page>.html' }); "
  },
  {
   "layout": "layout-sidebar",
   "name": "Connecting to SKY API",
   "order": 50,
   "published": true,
   "showInNav": true,
   "back_to_top": true,
   "title": "Connecting to SKY API",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Addins Concepts Connecting-to-skyapi",
   "abspath": "docs/addins/concepts/connecting-to-skyapi/index.md",
   "uri": "/docs/addins/concepts/connecting-to-skyapi/",
   "text": " Edit in GitHub Connecting to SKY API\nIn some cases, the contextual information made available to your add-in at runtime (the user's ID, the environment ID, and the current extension point context object) may be sufficient for your needs. Your add-in can surface contextual information from your system based on those runtimes values.\nIn other cases however, your add-in may need to make calls to SKY API in order to function properly. To call the SKY API, your add-in will need a SKY API access token; this requirement is in place to ensure proper security and handling of customer data. If your web application already has an access token for the current user and environment (context values provided at runtime), then you can use it to make calls to the SKY API (refreshing the token if needed). If not, you have some options for how your add-in can obtain a SKY API access token. Degrade your add-in's user interface\nYou might choose to degrade your add-in's user experience if your application has not acquired a SKY API access token for the current user and environment. You can simply provide a link to your web application within your add-in's user interface, and when the user navigates to your web application you can present a \"Connect to SKY API\" button and initiate the OAuth process.\nPrompt to connect to SKY API\nAlternately, you might choose to have your add-in initiate the OAuth process by surfacing a \"Connect to SKY API\" button in the add-in's user interface. Choose the OAuth flow that is most applicable for your scenario - the Authorization Code Flow is intended for server-to-server communication and results in an access token that can be refreshed once it has expred. The Implicit Flow is intended for SKY API calls from the client, and access tokens obtained from this flow are not refresh-able once expired.\nWhile more complex, we recommend using the Authorization Code flow because of the more secure handling of your application's \"secret\", and the ability to refresh the access token once it has expired. In any case, obtaining a SKY API access token for the current user and environment can be a one-time user-interactive operation that mimics functionality available in your full-blown web site.\nInitiate OAuth\nTo properly initiate the SKY API OAuth process, your add-in should expect to include a state parameter that will be used to prevent against cross-site request forgery (CSRF) attacks. As discussed in the FAQ, this value will be echoed back to your application's redirect endpoint when the user provides consent, and your application should expect to validate that the value echoed originated from your system.\nThe following code sample shows a very basic technique of acquiring a SKY API access token. This code executes on the client and works by showing a popup window that navigates to a /skyapi/authorize page within the add-in's web application. Within this endpoint (server code not shown), a state parameter value is generated, and the response can return a 302 Redirect to the SKY API Authorization page (including the state parameter). The popup window will follow the redirect, and the user will be able to provide consent for your application. Upon consent, the browser will be redirected again - this time to your application's registered redirect URI. The response from this endpoint in your web application can include some script that closes the popup browser window:\nfunction connectToSkyApi() { // this code starts within the user interface of the add-in - it launches a popup // and navigates to an endpoint in the add-in's backend to properly establish a // state parameter and initiate the SKY API OAuth process. var url = \"/skyapi/authorize\" + \"?token=\" + userIdentityToken + \"&envid=\" + initialArgs.envId; var child = window.open(url, '_blank', 'toolbar=0,status=0,width=625,height=500'); var timer = setInterval(checkChild, 500); // when the user has provided consent, your application's redirect URI endpoint // can include script that will // close the browser window. function checkChild() { if (child.closed) { clearInterval(timer); // if the user provided consent, the add-in's backend will have an access token for the user } } } Note that the user identity token is provided as well, so that your add-in's backend can ensure that it is being called from your front-end code.\nLimit the scope of consent to the current environment\nAs mentioned in the Add-in single-sign-on documentation, a given Blackbaud user may have access to multiple environments, even spanning multiple organizations.\nWhen building the redirect to the SKY API Authorization page, you'll want to limit the scope of the user's consent to the \"current\" environment, which is made available at runtime via the args object provided to the init callback. The SKY API Authorization page supports an optional query parameter named environment_id that can be used to limit the scope of consent to the current environment. This query parameter simply provides a hint to the Authorization page to filter the list of eligble environments to the current environment.\nTo make use of this, when your add-in's web application builds the redirect to the SKY API Authorization page, be sure to include the environment_id parameter:\nhttps://oauth2.apim.blackbaud.com/authorization?\nresponse_type=code\n&client_id=YOURCLIENTID\n&redirect_uri=YOURREDIRECTURI\n&state=YOURSTATEVALUE\n&environment_id=YOURENVIRONMENTID Important! If you omit this parameter, all environments accessible by the user will appear on the consent page, which could result in the user choosing an environment other than the one your add-in in operating within.\nProtection against clickjacking\nTo protect against clickjacking attacks, the SKY API Authorization page will be updated to prevent being rendered within an iframe. This means your add-in will not be able to initiate the OAuth process within its own iframe. You'll need to initiate the OAuth process by launching a separate browser window as shown above.\nFor more information on initiating the OAuth process, see Authorization. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Extension points",
   "order": 10,
   "published": true,
   "showInNav": true,
   "back_to_top": true,
   "title": "Extension points",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Addins Concepts Extension-points",
   "abspath": "docs/addins/concepts/extension-points/index.md",
   "uri": "/docs/addins/concepts/extension-points/",
   "text": " Edit in GitHub Extension points\nEach location within the Blackbaud application user interface that can be customized is known as an extension point. The extension point represents a named location in the product where add-ins can be rendered, and it defines both the \"class\" of add-in (tile, button, tab, etc.), as well as the shape of the context values that will be provided at runtime. As described in the SKY Addin Client library documentation, the context values for the extension point are made available to add-ins as part of the args object sent to the init callback function: // BBSkyAddinClient is global here. var client = new BBSkyAddinClient.AddinClient({ callbacks: { init: (args) => { // the context values are provided as part of the args object context = args.context; // most extension points provide the current record ID currentRecordId = context.recordId; ... } } }); Each extension point defines its own \"context\", which represents the initial set of values that will be made available at runtime. The context represents a contract with consumers (and thus it will be backwards compatible with future changes). For example, the Constituent Tile Dashboard defines the context as containing a recordId property representing the system record ID of the current constituent. This means that, for constituent tiles, the following JSON shape will be made available through the context object at runtime:\n{ \"recordId\": \"280\"\n} Additional contextual information about the current record can be obtained through SKY API as needed based on the initial set of context values.\nThe following section describes the extension points that have been defined to date:\nConstituent Extension point Notes Constituent Tile Dashboard Tile dashboard on the constituent record page The context object will contain the following properties: Property Description recordId The system record ID of the current constituent Gift Extension point Notes Gift Tile Dashboard Tile dashboard on the gift record page The context object will contain the following properties: Property Description recordId The system record ID of the current gift Payables Extension point Notes Invoice Tile Dashboard Tile dashboard on the invoice record page The context object will contain the following properties: Property Description recordId The system record ID of the current invoice Vendor Tile Dashboard Tile dashboard on the vendor record page The context object will contain the following properties: Property Description recordId The system record ID of the current vendor Purchase Order Tile Dashboard Tile dashboard on the purchase order record page The context object will contain the following properties: Property Description recordId The system record ID of the current purchase order General Ledger Extension point Notes Account Tile Dashboard Tile dashboard on the purchase order record page The context object will contain the following properties: Property Description recordId The system record ID of the current account Project Tile Dashboard Tile dashboard on the project record page The context object will contain the following properties: Property Description recordId The system record ID of the current project Journal Entry Batch Tile Dashboard Tile dashboard on the journal entry batch record page The context object will contain the following properties: Property Description recordId The system record ID of the current journal entry batch Treasury Extension point Notes Bank Account Tile Dashboard Tile dashboard on the bank account record page The context object will contain the following properties: Property Description recordId The system record ID of the current bank account "
  },
  {
   "layout": "layout-sidebar",
   "name": "Get started",
   "order": 20,
   "published": true,
   "showInNav": true,
   "title": "Get started",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Addins Get-started",
   "abspath": "docs/addins/get-started/index.md",
   "uri": "/docs/addins/get-started/",
   "nav_links": [
    {
     "layout": "layout-sidebar",
     "name": "Create an Add-in",
     "order": 100,
     "published": true,
     "showInNav": true,
     "title": "Create an Add-in",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Addins Get-started Createaddin",
     "abspath": "docs/addins/get-started/createaddin/index.md",
     "uri": "/docs/addins/get-started/createaddin/",
     "text": " Edit in GitHub Create an Add-in\nTo create a SKY Add-in, you'll need to build and deploy your add-in's web application and then register the URL of your add-in as part of your SKY API application. When Blackbaud customers enable your application, users will see the add-in(s) you've defined. Before you begin, make sure you've created a Blackbaud developer account as covered in the Getting Started guide. You'll also need a registered SKY API application, as covered in the Create an Application guide. Build your add-in\nSince add-ins are web applications, you can use any framework/tech stack desired, both client-side and server-side. For example, you can use ASP.NET, PHP, Node.js, MVC, Angular, React, etc. To see an example of an add-in that uses plain HTML, CSS, and JavaScript, see our Hello World sample add-in walk-through.\nA requirement for SKY Add-ins is that the web application must include the Add-in Client JavaScript library on the page and instantiate the AddinClient class in order to facilitate the interop with the host application. This library is available as an npm package, and more details can be found in the Readme.\nAt runtime, the add-in's web page will be rendered in a sandboxed iframe within the host application. Note that add-ins are hidden by default until they are ready to be shown. This gives the add-in an opportunity to perform any necessary initialization and logic to determine whether it should be visible or remain hidden. When the add-in is ready to be shown, it will call the ready method provided in the init callback: // BBSkyAddinClient is global here. var client = new BBSkyAddinClient.AddinClient({ callbacks: { init: (args) => { // perform any initialization work here... // inform the host page that the add-in is ready to be shown args.ready({ showUI: true, title: 'My Custom Tile' }); } } }); Deploy your add-in\nIn order to test your add-in, you can either deploy your web application to the cloud or serve it locally. Note that for local development, you’ll need to use HTTPS and have SSL configured to avoid mixed content problems in the browser. For production, your add-in's web application can be deployed to any cloud, and you control when and how your application is updated.\nRegister your add-in\nAdd-ins are associated with SKY API applications and are registered by providing some additional metadata about the add-in within the SKY API developer portal. Important! Performing this step will immediately make your add-in visible to any existing customers who've enabled your SKY API application. For development and testing purposes, we recommend using a non-production SKY API application to ensure your add-in functions properly before registering the add-in with your production application. From My Applications, navigate to the detail page for your application by clicking on the application name link.\nUnder Add-ins, select Add to launch the Add add-in dialog. Enter a unique name for the add-in. Currently, this value simply provides a reference for your use only - Blackbaud solution users will not see it.\nSpecify the extension point for where you want to insert your add-in into the Blackbaud solution. For more information about extension points, see the Extension points documentation.\nSpecify the URL of your add-in. This value must be an absolute and fully qualified URL, and can include static parameter values.\nClick Save to save your add-in definition. At this point, your add-in will be provisioned for any existing customers who've enabled your application, as well as any customers who enable your application in the future.\nNext steps Get an overview of the SKY Add-ins framework.\nView the Hello World sample to see a detailed walk-through of building an add-in.\nView additional concepts and capabilities associated with the SKY Add-ins framework.\nView our design guidelines to read about building an effective and compelling user experience for your add-in. "
    },
    {
     "layout": "layout-sidebar",
     "name": "Hello world sample add-in",
     "order": 200,
     "published": true,
     "showInNav": true,
     "title": "Hello world sample add-in",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Addins Get-started Hello-world",
     "abspath": "docs/addins/get-started/hello-world/index.md",
     "uri": "/docs/addins/get-started/hello-world/",
     "text": " Edit in GitHub Hello world sample add-in\nIn this article, we'll walk through the process of building a custom tile for the Constituent page using the SKY Add-in framework. This add-in will be a pure client-side implementation using only vanilla HTML, CSS, and JavaScript (note that you can use any language or tech-stack you'd like however).\nProject scaffolding\nFirst, we'll open Visual Studio (we're using VS 2017 here, but any version will work), and create a new ASP.NET Web Application. To keep things simple, we'll use the Empty template and enable Web API. Once Visual Studio has finished scaffolding the project, we'll manually add a few files (and for simplicity, we'll add them to the root folder). Specifically, we'll add: An HTML file to contain the markup for the add-in.\nA JavaScript file to contain the client-side code for the add-in (this could of course be embedded into the HTML file, but we'll separate them to keep things clean).\nA CSS file which we'll use to provide some basic styling for the tile. Create the add-in files\nFirst, let's add the HTML file. Next, add the JavaScript file. And finally, add the CSS file. Define the add-in markup\nVisual Studio will produce a very basic HTML file like this:\n<!DOCTYPE html>\n<html>\n<head> <meta charset=\"utf-8\" /> <title></title>\n</head>\n<body> </body>\n</html> We're going to be using a few jQuery statements in our JavaScript, so we'll also add jQuery to the page by referencing the latest version from the jQuery CDN, as documented on their website.\n<script src=\"https://code.jquery.com/jquery-3.2.1.min.js\" integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\" crossorigin=\"anonymous\"></script> Next, a requirement for SKY Add-ins is that they must include the Add-in Client JavaScript library on the page to facilitate the interop with the host application. This library is open source on GitHub and available as an npm package. You can add it to the page a few different ways, but for simplicity here, we'll just reference it from one of the npm CDNs:\n<script src=\"https://cdn.jsdelivr.net/npm/@blackbaud/sky-addin-client@1.0.0/bundles/sky-addin-client.umd.min.js\"></script> We'll also add a few lines to the <head> to include our tile's JavaScript and CSS files on the page:\n<script src=\"HelloWorld.js\"></script>\n<link href=\"HelloWorld.css\" rel=\"stylesheet\" /> Finally, we'll add the obligatory \"hello world\" text so we have something to show in the UI:\n<h2>Hello world!</h2>\n<span>This is a simple custom tile</span> So now, our initial HTML is complete:\n<!DOCTYPE html>\n<html>\n<head> <meta charset=\"utf-8\" /> <title></title> <script src=\"https://code.jquery.com/jquery-3.2.1.min.js\" integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/@blackbaud/sky-addin-client@1.0.0/bundles/sky-addin-client.umd.min.js\"></script> <script src=\"HelloWorld.js\"></script> <link href=\"HelloWorld.css\" rel=\"stylesheet\" />\n</head>\n<body> <h2>Hello world!</h2> <span>This is a simple custom tile</span>\n</body>\n</html> Style the add-in\nNext, let's shift focus to our stylesheet – not much to do here, just give the body a bit of padding. To note, we are still improving the default styling so this step may be optional in the future.\nbody { margin-top: 20px;\n} Basic add-in code\nNow, on to the JavaScript…\nFirst, we'll wrap our code in a self-executing function:\n(function () { // Add-in code goes here }()); As described in the sky-addin-client documentation, Add-ins must be instantiated using the following JavaScript, which registers a callback with the host page. This provides a mechanism for the host page to supply key contextual information to the add-in, and also provides a way for the add-in to inform the host page that it is ready to be rendered. This allows add-in authors to conditionally display add-ins based on the context (ex: only show a tile for individuals who are board members). We'll start with the basic minimal requirement to get a tile showing:\n(function () { // Add-in code goes here // BBSkyAddinClient is global here. var client = new BBSkyAddinClient.AddinClient({ callbacks: { init: (args) => { // perform any initialization needed for the add-in // when the tile is ready to be shown, inform the host page args.ready({ showUI: true, title: 'My Custom Tile' }); } } }); }()); Deploy the add-in\nAt this point, we can deploy our web application. We could serve it locally (ex: https://localhost:4000), but in this case, Visual Studio makes it easy to publish to an Azure App service. For the purpose of this walk-through, we'll publish the web application to: https://blackbaudaddinhelloworld.azurewebsites.net (of course, since we've already claimed this Azure App Service name, you'll need to publish your working sample application to a different url)\nAs you'd expect, we can view the tile at: https://blackbaudaddinhelloworld.azurewebsites.net/helloworld.html\nRegister the add-in\nNow that our web application has been deployed, we can register it as part of our SKY API application by navigating to the SKY API Developer Portal. From the Developer Account menu, select My Applications, and navigate to the SKY API application for which we want to register the add-in. Important! When you add add-in details to your SKY API application, the add-in will immediately become visible to any existing customers who've already enabled your SKY API application (as well as any customers who may enable your application in the future). For development and testing purposes, we recommend using a non-production SKY API application to ensure your add-in functions properly before registering the add-in with your production application.\nOn the application details page, select the Add button from within the Add-ins tile to create a new add-in definition: On this dialog, we can provide the metadata about our add-in, including a friendly name to help distinguish this add-in from others we might create in the future, as well as the extension point (the location within the system where the add-in will be rendered), and the URL for the add-in itself. In this case, we're building a custom tile for the constituent record page, so we'll choose the \"Constituent Tile Dashboard\" extension point.\nA few notes about the URL: It must be an absolute and fully qualified URL, but it can include static parameter values.\nIt must use HTTPS to avoid mixed content problems in the browser.\nWe do support local development, so if you're able to serve the web site locally, you can provide a localhost value for the URL (for example: https://localhost:4000). That all! Once defined, the add-in will be shown for any customers who've enabled the SKY API application.\nView the add-in\nTo view your add-in, visit the page or area within the system where the add-in will be rendered (according to the definition of the extension point).\nWhen the page loads, our custom tile will appear (likely at the bottom of the page): The tile looks and behaves like any native tile within the system - users can drag the tile around, and the position (left or ride side) and state (expanded or collapsed) will be persisted along with other tile details.\nShow contextual values\nNow, let's update the UI to display the various contextual values that are made available to add-ins.\nFirst, we'll start by displaying the \"environment ID\" – you'll hear more about \"environments\" in the future, but for now you can think of the environment as a replacement for the concept of \"tenant\". As described in the SKY Addin Client library documentation, the environment ID is provided as part of the args sent to the init callback function: // BBSkyAddinClient is global here. var client = new BBSkyAddinClient.AddinClient({ callbacks: { init: (args) => { // the environment ID is provided as part of the args object envId = args.envId; ... } } }); To show this value, we'll add the following markup to the HTML:\n<div> <p /> <div>The environment ID is a context value that is available to all add-ins:</div> <span id=\"environmentId\"></span>\n</div> Next, we'll display context values that are specific to the extension point itself. In the case of a \"Constituent Tile Dashboard\" extension point, the context value will be the ID of the constituent. This context value is provided along with the environment ID as part of the args sent to the init function, and we'll show it in the UI by adding the following markup:\n<div> <p /> <div>Additional context values vary for each extension point - for constituent tiles, the ID of the constituent is provided:</div> <span id=\"contextRecordId\"></span>\n</div> You can find complete documentation for each extension point on the extension points documentation page.\nSo now our HTML looks like this:\n<!DOCTYPE html>\n<html>\n<head> <meta charset=\"utf-8\" /> <title></title> <script src=\"https://code.jquery.com/jquery-3.2.1.min.js\" integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/@blackbaud/sky-addin-client@1.0.0/bundles/sky-addin-client.umd.min.js\"></script> <script src=\"HelloWorld.js\"></script> <link href=\"HelloWorld.css\" rel=\"stylesheet\" />\n</head>\n<body> <h2>Hello world!</h2> <span>This is a very simple custom tile</span> <div> <p /> <div>The environment ID is a context value that is available to all add-ins:</div> <span id=\"environmentId\"></span> </div> <div> <p /> <div>Additional context values vary for each extension point - for constituent tiles, the ID of the constituent is provided:</div> <span id=\"contextRecordId\"></span> </div> </body>\n</html> In our JavaScript file, we'll add the following lines to the init method before informing the host page to show the tile – this code will use jQuery to display the environment ID and context record ID.\n$('#environmentId').text(args.envId);\n$('#contextRecordId').text(args.context.recordId); The complete JavaScript is shown here.\n(function () { // BBSkyApiAddin is global here. var client = new BBSkyApiAddin.AddinClient({ callbacks: { init: (args) => { $('#environmentId').text(args.envId); $('#contextRecordId').text(args.context.recordId); // inform the host page that the addin is ready to be shown args.ready({ showUI: true, title: 'My Custom Tile' }); } } }); }()); Fetch a user identity token\nA final piece of contextual data that is available is the \"user identity token\". This value can be used to convey the Blackbaud user ID in a secure fashion to the add-in's backend (where it can be validated and decoded). Having this value on the server will provide a means of mapping the Blackbaud user to a user identity in the 3rd-party system. Add-ins can obtain a user identity token by requesting it from the host page via the getAuthToken method of the SKY Add-in Client JavaScript library.\nThe \"user identity token\" is not the same as the SKY API access token and cannot be used to make calls to the SKY API. For proper security, add-ins should expect to initiate the SKY API OAuth 2.0 Authorization Code flow by rendering a \"Connect to SKY API\" button in the add-in's user interface. The result of that operation will be a SKY API access token, which (along with the Blackbaud user ID and environment ID) can be persisted along with the native user identity in the 3rd-party system.\nFor the purpose of this simple demo, we'll simply fetch and display the user identity token value. Later tutorials will demonstrate how to pass this token to the add-in's backend for validation.\nLet's add the following markup to render a button in the UI for getting a user identity token:\n<div> <p /> <div>Click the button to request a user identity token for the currently logged-in user</div> <button id=\"getAuthToken\">Get auth token</button>\n</div> <div id=\"authToken\"> <p /> <div>The following string represents the identity of the current user, and can be provided to the add-in's backend for validation:</div> <span id=\"authTokenValue\"></span>\n</div> Let's hide the authToken div until the user clicks the button by adding some styling to the CSS:\n#authToken { display: none;\n} In the JavaScript, we'll wire up a click handler for the button in the init method:\n// wire up a click handler for the login button\n$(\"#getAuthToken\").click(getAuthToken); …and provide the implementation to fetch and display the token:\nfunction getAuthToken() { $(\"#authToken\").hide(); $(\"#authTokenValue\").text(\"\"); client.getAuthToken().then((token) => { $(\"#authTokenValue\").text(token); $(\"#authToken\").show(); });\n} Now, our markup looks like this:\n<!DOCTYPE html>\n<html>\n<head> <meta charset=\"utf-8\" /> <title></title> <script src=\"https://code.jquery.com/jquery-3.2.1.min.js\" integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/@blackbaud/sky-addin-client@1.0.0/bundles/sky-addin-client.umd.min.js\"></script> <script src=\"HelloWorld.js\"></script> <link href=\"HelloWorld.css\" rel=\"stylesheet\" />\n</head>\n<body> <h2>Hello world!</h2> <span>This is a very simple custom tile</span> <div> <p /> <div>The environment ID is a context value that is available to all add-ins:</div> <span id=\"environmentId\"></span> </div> <div> <p /> <div>Additional context values vary for each extension point - for constituent tiles, the ID of the constituent is provided:</div> <span id=\"contextRecordId\"></span> </div> <div> <p /> <div>Click the button to request a user identity token for the currently logged-in user</div> <button id=\"getAuthToken\">Get auth token</button> </div> <div id=\"authToken\"> <p /> <div>The following string represents the identity of the current user, and can be provided to the add-in's backend for validation:</div> <span id=\"authTokenValue\"></span> </div> </body>\n</html> The complete JavaScript is shown here:\n(function () { // BBSkyApiAddin is global here. var client = new BBSkyApiAddin.AddinClient({ callbacks: { init: (args) => { $('#environmentId').text(args.envId); $('#contextRecordId').text(args.context.recordId); // wire up a click handler for the login button $(\"#getAuthToken\").click(getAuthToken); // inform the host page that the addin is ready to be shown args.ready({ showUI: true, title: 'My Custom Tile' }); } } }); function getAuthToken() { $(\"#authToken\").hide(); $(\"#authTokenValue\").text(\"\"); client.getAuthToken().then((token) => { $(\"#authTokenValue\").text(token); $(\"#authToken\").show(); }); } }()); View the updated add-in\nAfter redeploying the add-in and refreshing the constituent page, the context values will be shown: Clicking the button will fetch and display the user identity token, which should be treated as an opaque string on the client: Next steps Get an overview of the SKY Add-ins framework.\nView the Getting started tutorial to learn more about how to build a SKY Add-in.\nView additional concepts and capabilities associated with the SKY Add-ins framework.\nView our design guidelines to read about building an effective and compelling user experience for your add-in. "
    }
   ],
   "text": " Edit in GitHub "
  },
  {
   "layout": "layout-sidebar",
   "name": "Create an Add-in",
   "order": 100,
   "published": true,
   "showInNav": true,
   "title": "Create an Add-in",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Addins Get-started Createaddin",
   "abspath": "docs/addins/get-started/createaddin/index.md",
   "uri": "/docs/addins/get-started/createaddin/",
   "text": " Edit in GitHub Create an Add-in\nTo create a SKY Add-in, you'll need to build and deploy your add-in's web application and then register the URL of your add-in as part of your SKY API application. When Blackbaud customers enable your application, users will see the add-in(s) you've defined. Before you begin, make sure you've created a Blackbaud developer account as covered in the Getting Started guide. You'll also need a registered SKY API application, as covered in the Create an Application guide. Build your add-in\nSince add-ins are web applications, you can use any framework/tech stack desired, both client-side and server-side. For example, you can use ASP.NET, PHP, Node.js, MVC, Angular, React, etc. To see an example of an add-in that uses plain HTML, CSS, and JavaScript, see our Hello World sample add-in walk-through.\nA requirement for SKY Add-ins is that the web application must include the Add-in Client JavaScript library on the page and instantiate the AddinClient class in order to facilitate the interop with the host application. This library is available as an npm package, and more details can be found in the Readme.\nAt runtime, the add-in's web page will be rendered in a sandboxed iframe within the host application. Note that add-ins are hidden by default until they are ready to be shown. This gives the add-in an opportunity to perform any necessary initialization and logic to determine whether it should be visible or remain hidden. When the add-in is ready to be shown, it will call the ready method provided in the init callback: // BBSkyAddinClient is global here. var client = new BBSkyAddinClient.AddinClient({ callbacks: { init: (args) => { // perform any initialization work here... // inform the host page that the add-in is ready to be shown args.ready({ showUI: true, title: 'My Custom Tile' }); } } }); Deploy your add-in\nIn order to test your add-in, you can either deploy your web application to the cloud or serve it locally. Note that for local development, you’ll need to use HTTPS and have SSL configured to avoid mixed content problems in the browser. For production, your add-in's web application can be deployed to any cloud, and you control when and how your application is updated.\nRegister your add-in\nAdd-ins are associated with SKY API applications and are registered by providing some additional metadata about the add-in within the SKY API developer portal. Important! Performing this step will immediately make your add-in visible to any existing customers who've enabled your SKY API application. For development and testing purposes, we recommend using a non-production SKY API application to ensure your add-in functions properly before registering the add-in with your production application. From My Applications, navigate to the detail page for your application by clicking on the application name link.\nUnder Add-ins, select Add to launch the Add add-in dialog. Enter a unique name for the add-in. Currently, this value simply provides a reference for your use only - Blackbaud solution users will not see it.\nSpecify the extension point for where you want to insert your add-in into the Blackbaud solution. For more information about extension points, see the Extension points documentation.\nSpecify the URL of your add-in. This value must be an absolute and fully qualified URL, and can include static parameter values.\nClick Save to save your add-in definition. At this point, your add-in will be provisioned for any existing customers who've enabled your application, as well as any customers who enable your application in the future.\nNext steps Get an overview of the SKY Add-ins framework.\nView the Hello World sample to see a detailed walk-through of building an add-in.\nView additional concepts and capabilities associated with the SKY Add-ins framework.\nView our design guidelines to read about building an effective and compelling user experience for your add-in. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Hello world sample add-in",
   "order": 200,
   "published": true,
   "showInNav": true,
   "title": "Hello world sample add-in",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Addins Get-started Hello-world",
   "abspath": "docs/addins/get-started/hello-world/index.md",
   "uri": "/docs/addins/get-started/hello-world/",
   "text": " Edit in GitHub Hello world sample add-in\nIn this article, we'll walk through the process of building a custom tile for the Constituent page using the SKY Add-in framework. This add-in will be a pure client-side implementation using only vanilla HTML, CSS, and JavaScript (note that you can use any language or tech-stack you'd like however).\nProject scaffolding\nFirst, we'll open Visual Studio (we're using VS 2017 here, but any version will work), and create a new ASP.NET Web Application. To keep things simple, we'll use the Empty template and enable Web API. Once Visual Studio has finished scaffolding the project, we'll manually add a few files (and for simplicity, we'll add them to the root folder). Specifically, we'll add: An HTML file to contain the markup for the add-in.\nA JavaScript file to contain the client-side code for the add-in (this could of course be embedded into the HTML file, but we'll separate them to keep things clean).\nA CSS file which we'll use to provide some basic styling for the tile. Create the add-in files\nFirst, let's add the HTML file. Next, add the JavaScript file. And finally, add the CSS file. Define the add-in markup\nVisual Studio will produce a very basic HTML file like this:\n<!DOCTYPE html>\n<html>\n<head> <meta charset=\"utf-8\" /> <title></title>\n</head>\n<body> </body>\n</html> We're going to be using a few jQuery statements in our JavaScript, so we'll also add jQuery to the page by referencing the latest version from the jQuery CDN, as documented on their website.\n<script src=\"https://code.jquery.com/jquery-3.2.1.min.js\" integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\" crossorigin=\"anonymous\"></script> Next, a requirement for SKY Add-ins is that they must include the Add-in Client JavaScript library on the page to facilitate the interop with the host application. This library is open source on GitHub and available as an npm package. You can add it to the page a few different ways, but for simplicity here, we'll just reference it from one of the npm CDNs:\n<script src=\"https://cdn.jsdelivr.net/npm/@blackbaud/sky-addin-client@1.0.0/bundles/sky-addin-client.umd.min.js\"></script> We'll also add a few lines to the <head> to include our tile's JavaScript and CSS files on the page:\n<script src=\"HelloWorld.js\"></script>\n<link href=\"HelloWorld.css\" rel=\"stylesheet\" /> Finally, we'll add the obligatory \"hello world\" text so we have something to show in the UI:\n<h2>Hello world!</h2>\n<span>This is a simple custom tile</span> So now, our initial HTML is complete:\n<!DOCTYPE html>\n<html>\n<head> <meta charset=\"utf-8\" /> <title></title> <script src=\"https://code.jquery.com/jquery-3.2.1.min.js\" integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/@blackbaud/sky-addin-client@1.0.0/bundles/sky-addin-client.umd.min.js\"></script> <script src=\"HelloWorld.js\"></script> <link href=\"HelloWorld.css\" rel=\"stylesheet\" />\n</head>\n<body> <h2>Hello world!</h2> <span>This is a simple custom tile</span>\n</body>\n</html> Style the add-in\nNext, let's shift focus to our stylesheet – not much to do here, just give the body a bit of padding. To note, we are still improving the default styling so this step may be optional in the future.\nbody { margin-top: 20px;\n} Basic add-in code\nNow, on to the JavaScript…\nFirst, we'll wrap our code in a self-executing function:\n(function () { // Add-in code goes here }()); As described in the sky-addin-client documentation, Add-ins must be instantiated using the following JavaScript, which registers a callback with the host page. This provides a mechanism for the host page to supply key contextual information to the add-in, and also provides a way for the add-in to inform the host page that it is ready to be rendered. This allows add-in authors to conditionally display add-ins based on the context (ex: only show a tile for individuals who are board members). We'll start with the basic minimal requirement to get a tile showing:\n(function () { // Add-in code goes here // BBSkyAddinClient is global here. var client = new BBSkyAddinClient.AddinClient({ callbacks: { init: (args) => { // perform any initialization needed for the add-in // when the tile is ready to be shown, inform the host page args.ready({ showUI: true, title: 'My Custom Tile' }); } } }); }()); Deploy the add-in\nAt this point, we can deploy our web application. We could serve it locally (ex: https://localhost:4000), but in this case, Visual Studio makes it easy to publish to an Azure App service. For the purpose of this walk-through, we'll publish the web application to: https://blackbaudaddinhelloworld.azurewebsites.net (of course, since we've already claimed this Azure App Service name, you'll need to publish your working sample application to a different url)\nAs you'd expect, we can view the tile at: https://blackbaudaddinhelloworld.azurewebsites.net/helloworld.html\nRegister the add-in\nNow that our web application has been deployed, we can register it as part of our SKY API application by navigating to the SKY API Developer Portal. From the Developer Account menu, select My Applications, and navigate to the SKY API application for which we want to register the add-in. Important! When you add add-in details to your SKY API application, the add-in will immediately become visible to any existing customers who've already enabled your SKY API application (as well as any customers who may enable your application in the future). For development and testing purposes, we recommend using a non-production SKY API application to ensure your add-in functions properly before registering the add-in with your production application.\nOn the application details page, select the Add button from within the Add-ins tile to create a new add-in definition: On this dialog, we can provide the metadata about our add-in, including a friendly name to help distinguish this add-in from others we might create in the future, as well as the extension point (the location within the system where the add-in will be rendered), and the URL for the add-in itself. In this case, we're building a custom tile for the constituent record page, so we'll choose the \"Constituent Tile Dashboard\" extension point.\nA few notes about the URL: It must be an absolute and fully qualified URL, but it can include static parameter values.\nIt must use HTTPS to avoid mixed content problems in the browser.\nWe do support local development, so if you're able to serve the web site locally, you can provide a localhost value for the URL (for example: https://localhost:4000). That all! Once defined, the add-in will be shown for any customers who've enabled the SKY API application.\nView the add-in\nTo view your add-in, visit the page or area within the system where the add-in will be rendered (according to the definition of the extension point).\nWhen the page loads, our custom tile will appear (likely at the bottom of the page): The tile looks and behaves like any native tile within the system - users can drag the tile around, and the position (left or ride side) and state (expanded or collapsed) will be persisted along with other tile details.\nShow contextual values\nNow, let's update the UI to display the various contextual values that are made available to add-ins.\nFirst, we'll start by displaying the \"environment ID\" – you'll hear more about \"environments\" in the future, but for now you can think of the environment as a replacement for the concept of \"tenant\". As described in the SKY Addin Client library documentation, the environment ID is provided as part of the args sent to the init callback function: // BBSkyAddinClient is global here. var client = new BBSkyAddinClient.AddinClient({ callbacks: { init: (args) => { // the environment ID is provided as part of the args object envId = args.envId; ... } } }); To show this value, we'll add the following markup to the HTML:\n<div> <p /> <div>The environment ID is a context value that is available to all add-ins:</div> <span id=\"environmentId\"></span>\n</div> Next, we'll display context values that are specific to the extension point itself. In the case of a \"Constituent Tile Dashboard\" extension point, the context value will be the ID of the constituent. This context value is provided along with the environment ID as part of the args sent to the init function, and we'll show it in the UI by adding the following markup:\n<div> <p /> <div>Additional context values vary for each extension point - for constituent tiles, the ID of the constituent is provided:</div> <span id=\"contextRecordId\"></span>\n</div> You can find complete documentation for each extension point on the extension points documentation page.\nSo now our HTML looks like this:\n<!DOCTYPE html>\n<html>\n<head> <meta charset=\"utf-8\" /> <title></title> <script src=\"https://code.jquery.com/jquery-3.2.1.min.js\" integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/@blackbaud/sky-addin-client@1.0.0/bundles/sky-addin-client.umd.min.js\"></script> <script src=\"HelloWorld.js\"></script> <link href=\"HelloWorld.css\" rel=\"stylesheet\" />\n</head>\n<body> <h2>Hello world!</h2> <span>This is a very simple custom tile</span> <div> <p /> <div>The environment ID is a context value that is available to all add-ins:</div> <span id=\"environmentId\"></span> </div> <div> <p /> <div>Additional context values vary for each extension point - for constituent tiles, the ID of the constituent is provided:</div> <span id=\"contextRecordId\"></span> </div> </body>\n</html> In our JavaScript file, we'll add the following lines to the init method before informing the host page to show the tile – this code will use jQuery to display the environment ID and context record ID.\n$('#environmentId').text(args.envId);\n$('#contextRecordId').text(args.context.recordId); The complete JavaScript is shown here.\n(function () { // BBSkyApiAddin is global here. var client = new BBSkyApiAddin.AddinClient({ callbacks: { init: (args) => { $('#environmentId').text(args.envId); $('#contextRecordId').text(args.context.recordId); // inform the host page that the addin is ready to be shown args.ready({ showUI: true, title: 'My Custom Tile' }); } } }); }()); Fetch a user identity token\nA final piece of contextual data that is available is the \"user identity token\". This value can be used to convey the Blackbaud user ID in a secure fashion to the add-in's backend (where it can be validated and decoded). Having this value on the server will provide a means of mapping the Blackbaud user to a user identity in the 3rd-party system. Add-ins can obtain a user identity token by requesting it from the host page via the getAuthToken method of the SKY Add-in Client JavaScript library.\nThe \"user identity token\" is not the same as the SKY API access token and cannot be used to make calls to the SKY API. For proper security, add-ins should expect to initiate the SKY API OAuth 2.0 Authorization Code flow by rendering a \"Connect to SKY API\" button in the add-in's user interface. The result of that operation will be a SKY API access token, which (along with the Blackbaud user ID and environment ID) can be persisted along with the native user identity in the 3rd-party system.\nFor the purpose of this simple demo, we'll simply fetch and display the user identity token value. Later tutorials will demonstrate how to pass this token to the add-in's backend for validation.\nLet's add the following markup to render a button in the UI for getting a user identity token:\n<div> <p /> <div>Click the button to request a user identity token for the currently logged-in user</div> <button id=\"getAuthToken\">Get auth token</button>\n</div> <div id=\"authToken\"> <p /> <div>The following string represents the identity of the current user, and can be provided to the add-in's backend for validation:</div> <span id=\"authTokenValue\"></span>\n</div> Let's hide the authToken div until the user clicks the button by adding some styling to the CSS:\n#authToken { display: none;\n} In the JavaScript, we'll wire up a click handler for the button in the init method:\n// wire up a click handler for the login button\n$(\"#getAuthToken\").click(getAuthToken); …and provide the implementation to fetch and display the token:\nfunction getAuthToken() { $(\"#authToken\").hide(); $(\"#authTokenValue\").text(\"\"); client.getAuthToken().then((token) => { $(\"#authTokenValue\").text(token); $(\"#authToken\").show(); });\n} Now, our markup looks like this:\n<!DOCTYPE html>\n<html>\n<head> <meta charset=\"utf-8\" /> <title></title> <script src=\"https://code.jquery.com/jquery-3.2.1.min.js\" integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\" crossorigin=\"anonymous\"></script> <script src=\"https://cdn.jsdelivr.net/npm/@blackbaud/sky-addin-client@1.0.0/bundles/sky-addin-client.umd.min.js\"></script> <script src=\"HelloWorld.js\"></script> <link href=\"HelloWorld.css\" rel=\"stylesheet\" />\n</head>\n<body> <h2>Hello world!</h2> <span>This is a very simple custom tile</span> <div> <p /> <div>The environment ID is a context value that is available to all add-ins:</div> <span id=\"environmentId\"></span> </div> <div> <p /> <div>Additional context values vary for each extension point - for constituent tiles, the ID of the constituent is provided:</div> <span id=\"contextRecordId\"></span> </div> <div> <p /> <div>Click the button to request a user identity token for the currently logged-in user</div> <button id=\"getAuthToken\">Get auth token</button> </div> <div id=\"authToken\"> <p /> <div>The following string represents the identity of the current user, and can be provided to the add-in's backend for validation:</div> <span id=\"authTokenValue\"></span> </div> </body>\n</html> The complete JavaScript is shown here:\n(function () { // BBSkyApiAddin is global here. var client = new BBSkyApiAddin.AddinClient({ callbacks: { init: (args) => { $('#environmentId').text(args.envId); $('#contextRecordId').text(args.context.recordId); // wire up a click handler for the login button $(\"#getAuthToken\").click(getAuthToken); // inform the host page that the addin is ready to be shown args.ready({ showUI: true, title: 'My Custom Tile' }); } } }); function getAuthToken() { $(\"#authToken\").hide(); $(\"#authTokenValue\").text(\"\"); client.getAuthToken().then((token) => { $(\"#authTokenValue\").text(token); $(\"#authToken\").show(); }); } }()); View the updated add-in\nAfter redeploying the add-in and refreshing the constituent page, the context values will be shown: Clicking the button will fetch and display the user identity token, which should be treated as an opaque string on the client: Next steps Get an overview of the SKY Add-ins framework.\nView the Getting started tutorial to learn more about how to build a SKY Add-in.\nView additional concepts and capabilities associated with the SKY Add-ins framework.\nView our design guidelines to read about building an effective and compelling user experience for your add-in. "
  },
  {
   "layout": "layout-sidebar",
   "name": "How-to guides",
   "order": 40,
   "published": true,
   "showInNav": true,
   "back_to_top": true,
   "title": "How-to guides",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Addins How-to-guides",
   "abspath": "docs/addins/how-to-guides/index.md",
   "uri": "/docs/addins/how-to-guides/",
   "nav_links": [
    {
     "layout": "layout-sidebar",
     "name": "Add-in design",
     "order": 10,
     "published": true,
     "showInNav": true,
     "title": "Add-in design",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Addins How-to-guides Addin-design",
     "abspath": "docs/addins/how-to-guides/addin-design/index.md",
     "uri": "/docs/addins/how-to-guides/addin-design/",
     "text": " Edit in GitHub Design your add-in\nSKY Add-ins extend the Blackbaud solution experience by providing contextual functionality that can be accessed within selected areas of the user interface. Add-ins provide a natural extension to the user experience and facilitate a deeper integration by empowering users to work seemlessly with third-party features and content without having to context switch between applications.\nYour add-in's UX design must integrate seamlessly with the Blackbaud user interface to provide an efficient, natural interaction model for your users.\nSKY Add-in design principles\nBlackbaud applications follow a general set of interaction guidelines, with consistent presentation metaphors used across every aspect of the system. This commonality is built on a set of principles designed to support end users' tasks. Understanding and following these principles will help you create positive add-in experiences for users: Design explicitly for SKY. The functionality, look and feel of a SKY Add-in should harmoniously complement the rest of the Blackbaud user's experience. Add-ins should feel native and behave like other native features. A well-designed add-in will be an appropriate blend of your experience, the Add-in framework, and the Blackbaud native application functionality. While we do not require any particular client-side user interface framework, consider using SKY UX to achieve a consistent look and feel where appropriate.\nFor more information, view the SKY UX design guidelines. Focus on a few key tasks; do them well. Help users be productive by focusing on common use cases and workflows without being too general-purpose. Don't try to replicate your entire application's functionality within an add-in. Instead, provide contextually relevant functionality, with links to your web site as appropriate. Use branding appropriately. Allow your content and functionality to be the focus of the experience, and brand your add-in wisely. Strike a balance between providing users with a unique and recognizable experience from your system with the existing look and feel within the native Blackbaud system. Avoid distracting users with unnecessary marketing material and instead keep the focus on content and task completion. Design for broad access. Like all Blackbaud solutions, add-ins are designed to work across platforms, across browsers, and even across devices. Your add-in's user interface should be optimized for the specific extension point metaphor (tab, tile, etc.), with a responsive look and feel across form factors. "
    },
    {
     "layout": "layout-sidebar",
     "name": "Add-in development",
     "order": 20,
     "published": true,
     "showInNav": true,
     "title": "Add-in development",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Addins How-to-guides Addin-development",
     "abspath": "docs/addins/how-to-guides/addin-development/index.md",
     "uri": "/docs/addins/how-to-guides/addin-development/",
     "text": " Edit in GitHub Add-in development\nUse a non-production SKY API application for development\nAs mentioned in the Register your add-in documentation, all SKY Add-ins are associated with your registered application.\nThis means that whenever you register your add-in metadata, any customers who've already enabled your application (or who do so in the future) will immedately see your add-in(s).\nFor this reason, we recommend making use of a separate, non-production SKY API application while testing your add-in behavior. Once you are happy with the results, you can register your add-in with your production SKY API application.\nThis technique can be used to introduce new add-ins in the future as well. For example, if Blackbaud adds support for new extension points in the future, you can develop against those new extension points using your non-production application, and then when ready you can update your existing, production SKY API application with your additional add-in metadata.\nControl your add-in's visibility\nRemember that add-ins are instantiated as hidden iframes on the page and are only made visible when your code informs the host page. You can use this to your advantage when building and testing by introducing logic that is only visible based on some contextually available value. For example, you can limit visibility to your environment only, or you can whitelist user IDs (by correlating from the current Blackbaud user ID). "
    }
   ],
   "text": " "
  },
  {
   "layout": "layout-sidebar",
   "name": "Add-in design",
   "order": 10,
   "published": true,
   "showInNav": true,
   "title": "Add-in design",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Addins How-to-guides Addin-design",
   "abspath": "docs/addins/how-to-guides/addin-design/index.md",
   "uri": "/docs/addins/how-to-guides/addin-design/",
   "text": " Edit in GitHub Design your add-in\nSKY Add-ins extend the Blackbaud solution experience by providing contextual functionality that can be accessed within selected areas of the user interface. Add-ins provide a natural extension to the user experience and facilitate a deeper integration by empowering users to work seemlessly with third-party features and content without having to context switch between applications.\nYour add-in's UX design must integrate seamlessly with the Blackbaud user interface to provide an efficient, natural interaction model for your users.\nSKY Add-in design principles\nBlackbaud applications follow a general set of interaction guidelines, with consistent presentation metaphors used across every aspect of the system. This commonality is built on a set of principles designed to support end users' tasks. Understanding and following these principles will help you create positive add-in experiences for users: Design explicitly for SKY. The functionality, look and feel of a SKY Add-in should harmoniously complement the rest of the Blackbaud user's experience. Add-ins should feel native and behave like other native features. A well-designed add-in will be an appropriate blend of your experience, the Add-in framework, and the Blackbaud native application functionality. While we do not require any particular client-side user interface framework, consider using SKY UX to achieve a consistent look and feel where appropriate.\nFor more information, view the SKY UX design guidelines. Focus on a few key tasks; do them well. Help users be productive by focusing on common use cases and workflows without being too general-purpose. Don't try to replicate your entire application's functionality within an add-in. Instead, provide contextually relevant functionality, with links to your web site as appropriate. Use branding appropriately. Allow your content and functionality to be the focus of the experience, and brand your add-in wisely. Strike a balance between providing users with a unique and recognizable experience from your system with the existing look and feel within the native Blackbaud system. Avoid distracting users with unnecessary marketing material and instead keep the focus on content and task completion. Design for broad access. Like all Blackbaud solutions, add-ins are designed to work across platforms, across browsers, and even across devices. Your add-in's user interface should be optimized for the specific extension point metaphor (tab, tile, etc.), with a responsive look and feel across form factors. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Add-in development",
   "order": 20,
   "published": true,
   "showInNav": true,
   "title": "Add-in development",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Addins How-to-guides Addin-development",
   "abspath": "docs/addins/how-to-guides/addin-development/index.md",
   "uri": "/docs/addins/how-to-guides/addin-development/",
   "text": " Edit in GitHub Add-in development\nUse a non-production SKY API application for development\nAs mentioned in the Register your add-in documentation, all SKY Add-ins are associated with your registered application.\nThis means that whenever you register your add-in metadata, any customers who've already enabled your application (or who do so in the future) will immedately see your add-in(s).\nFor this reason, we recommend making use of a separate, non-production SKY API application while testing your add-in behavior. Once you are happy with the results, you can register your add-in with your production SKY API application.\nThis technique can be used to introduce new add-ins in the future as well. For example, if Blackbaud adds support for new extension points in the future, you can develop against those new extension points using your non-production application, and then when ready you can update your existing, production SKY API application with your additional add-in metadata.\nControl your add-in's visibility\nRemember that add-ins are instantiated as hidden iframes on the page and are only made visible when your code informs the host page. You can use this to your advantage when building and testing by introducing logic that is only visible based on some contextually available value. For example, you can limit visibility to your environment only, or you can whitelist user IDs (by correlating from the current Blackbaud user ID). "
  },
  {
   "layout": "layout-sidebar",
   "name": "Overview",
   "order": 10,
   "published": true,
   "showInNav": true,
   "back_to_top": true,
   "title": "Overview",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Addins Overview",
   "abspath": "docs/addins/overview/index.md",
   "uri": "/docs/addins/overview/",
   "text": " Edit in GitHub Add-ins Overview\nSKY Add-ins allow developers to build complementary features that integrate deeply within the user interface of Blackbaud's solutions. With add-ins, developers can use familiar web development technologies such as HTML, CSS, and JavaScript to augment out-of-box product areas with new functionality.\nFor example, with add-ins you can: Add custom tiles to selected pages in the system - bring in data from external systems that is contextually relevant to the current record and provide streamlined workflows for business logic. Create rich, interactive user experiences - expose new 3rd-party visualizations Add-ins are implemented as web applications that run external to the Blackbaud host application, so they can do almost anything that a webpage can do inside a browser. At runtime, the host application provides an isolated sandbox iframe that contains the add-in page, and provides context values needed to load the add-in. Key features\nThe add-ins framework provides the following: A \"write-once, run anywhere\" model - SKY add-ins provide cross-platform/browser/device support, so they appear on and work great from mobile devices as well as desktop browsers.\nUses standard web technologies - add-ins are web applications, so you can use any framework/tech stack/libraries desired, both client-side and server-side. For example, use ASP.NET, PHP, Node.js, MVC, Angular, React, etc.\nEasy deployment - add-ins are deployed to your cloud, so you control how and when your add-in is updated.\nSingle sign-on (SSO) - add-ins integrate easily with 3rd-party systems.\nCommunicate with the host application using SKY API.\nAssociated with SKY applications - when customers enable your SKY application, they'll see the add-ins you've defined. Components of an add-in\nAdd-ins are defined as part of your SKY application within the SKY API developer portal. There are two basic components of an add-in: an extension point (described below) and the URL of your own web application. Types of add-ins\nAdd-ins are associated with specific locations within the Blackbaud user interface, known as extension points. The extension point represents a named location in the user interface where add-ins can be rendered, and it defines both the \"class\" of add-in (tile, button, tab, etc.) as well as the shape of the context values that will be provided at runtime.\nTile add-ins\nTile add-ins can be created for for selected pages within the system that support a dashboard of tiles. Custom tiles will persist state and location on a per-user basis along with other native tiles. Button add-ins (coming soon)\nButton add-ins can be created for selected pages within the system that support page-level actions. Tab add-ins (coming soon)\nTab add-ins can be created for selected pages within the system that use tabs. Future add-ins\nOver time, we'll introduce support for new types of add-ins and new extension points within the system.\nNote! Stay informed as new extension points are introduced by following the SKY Add-ins changelog page, and feel free to submit Ideas for new types of add-ins and extension points.\nNext steps View the Getting started tutorial to learn more about how to build a SKY Add-in.\nView the Hello World sample to see a detailed walk-through of building an add-in.\nView additional concepts and capabilities associated with the SKY Add-ins framework.\nView our design guidelines to read about building an effective and compelling user experience for your add-in. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Reference",
   "order": 50,
   "published": true,
   "showInNav": true,
   "back_to_top": true,
   "title": "Reference",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Addins Reference",
   "abspath": "docs/addins/reference/index.md",
   "uri": "/docs/addins/reference/",
   "text": " Edit in GitHub Reference\nThese resources provide additional information and support for developing SKY Add-ins:\nSKY Add-in client\nAdd-ins make use of a JavaScript library to facilitate the interop between the add-in iframe and the host application. The library is available on GitHub, and more information on how to use the library can be found in the readme.txt. SKY Add-in Client JavaScript library\nUser identity tokens\nTo facilitate the single-sign-on experience, add-ins can obtain a user identity token (UIT) from the host applidcation. This token can be used to securely correlate Blackbaud users with user accounts in the add-in's native system. Add-in developers should first validate the signature of the UIT against the OpenIDConnect endpoint within SKY API OAuth 2.0 service. The OpenIDConnect configuration can be found at: SKY API OAuth 2.0 service OpenIDConnect configuration endpoint\nDevelopers building add-ins in .NET can make use of a Blackbaud-provided library to assist with validating the UIT. This library is distributed as a NuGet package named Blackbaud.Addin.tokenAuthentication on NuGet.org.\nMore information on how to use this library can be found in the readme.txt: Blackbaud.Addin.TokenAuthentication "
  },
  {
   "layout": "layout-container",
   "name": "Managing your apps",
   "published": true,
   "showInNav": false,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": false,
   "showInFooter": false,
   "showInSearch": true,
   "breadcrumbs": "Docs Apps",
   "abspath": "docs/apps/index.md",
   "uri": "/docs/apps/",
   "text": " "
  },
  {
   "layout": "layout-sidebar",
   "name": "Authorization",
   "description": "Description",
   "order": 300,
   "published": true,
   "showInNav": true,
   "showInHeader": true,
   "showInFooter": true,
   "priority": "high",
   "title": "Authorization",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInSearch": true,
   "breadcrumbs": "Docs Authorization",
   "abspath": "docs/authorization/index.md",
   "uri": "/docs/authorization/",
   "nav_links": [
    {
     "name": "Authorization Code Flow",
     "description": "The Authorization Code Flow is appropriate for applications that the user logs into once. Since this flow involves an exchange of your **Application secret* for an access token, it is suitable for applications than run from secure locations such as server-side web application or back-end service.",
     "layout": "layout-tutorial",
     "order": 100,
     "published": true,
     "showInNav": true,
     "title": "Authorization Code Flow",
     "sidebarLayoutSecondaryColumn": "col-lg-2 col-md-3 col-sm-12 sidebar-tutorial",
     "sidebarLayoutPrimaryColumn": "col-lg-8 col-md-8 col-sm-12",
     "bootstrap_container": "bg-tutorial",
     "markdown": false,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Authorization Auth-code-flow",
     "abspath": "docs/authorization/auth-code-flow/index.md",
     "uri": "/docs/authorization/auth-code-flow/",
     "text": " Comments Edit in GitHub Authorization Code Flow Introduction The authorization code grant is meant for web applications where API calls are made from the server. It is the most secure as it involves server-to-server communication, and is also the most functional as it also provides refresh tokens. This allows your application to have indefinite connectivity to the SKY API after the one-time user-interactive consent process.\nThe flow starts by redirecting the user's browser from your application to our Authorization URL. The user will login (using their Blackbaud or Google credentials), confirm that it's OK for your application to access their data, and then we'll redirect back to you with an authorization code that you can exchange for an access token. You can store this access token (and the refresh token) in your application, and use it when making API calls on that user's behalf.\nSince this is a redirection-based flow, your application must be able to interact with a web browser and receive incoming requests (via redirection) from our OAuth endpoints.\nWe demonstrate this flow in our tutorials and code samples. Step 1 – Request authorization Initiate the authorization process by redirecting the user's browser to our authorization endpoint. You can choose to do this as a step in your application's login process or in response to some user action in your app (like a button click):\nhttps://oauth2.apim.blackbaud.com/authorization When navigating, you'll need to include a few parameters in the query string. These parameters are fully described in RFC-6749 section 4.1.1: Query parameter Description client_id Required. The Application ID value that we provide when you register your application. This value uniquely identifies your application. See RFC-6749 section 2.2. response_type Required. The value must be set to code. redirect_uri Required. The URI to redirect to after the user grants or denies permission to your app. This value must exactly match one of the Redirect URI values you specify when you register your application, including any capitalization, trailing slashes, etc. See RFC-6749 section 3.1.2. state Optional, but recommended. The state parameter is an opaque value that you can provide when requesting authorization that will be echoed back to you when the user grants or denies permission to your app. You can then validate this parameter to ensure that an incoming redirect is the result of an authentication request that originated in your application. This provides protection against Cross-Site Request Forgery (CSRF) attacks. You can also use this parameter to maintain some state between the authorization request you initiate and the incoming navigation to your redirect URI for the purposes of returning the user to tbe most appropriate location within your app. See RFC-6749 section 10.12 environment_id Optional. The environment_id parameter can be used to filter the list of eligible environments shown during the user authorization step. This filter is useful when the user is already operating in the context of an environment, such as within a SKY API user interface add-in. We'll have more information on environments and add-ins in the near future. Note: to facilitate local development, we allow the use of http and localhost or the localhost IP (127.0.0.1). In production however, we require the use of https for proper security when redirecting. A sample authorization request looks like this (with extra line breaks for display purposes only):\nhttps://oauth2.apim.blackbaud.com/authorization?\nclient_id=E140BF29-A528-4048-91A9-83BCB01B7FE2\n&response_type=code\n&redirect_uri=https://www.example.com/oauth2/callback\n&state=fdf80155 Step 2 – User authorization In this step, we'll ask the user to log in (using their Blackbaud or Google credentials). We'll then ask them if it's ok for your application to access their Blackbaud data: If the user has access to more than one customer's data, they'll select the customer (tenant) to which they are giving your app permission. Step 3 – User is redirected back After the user grants (or denies) your authorization request, we'll redirect the browser to the redirect_uri that you specified in the request (in the above example, we'll redirect the browser back to your application at https://www.example.com/oauth2/callback).\nIf the user granted your app permission, the query string will contain the following parameters: Query parameter Description code An authorization code that can be exchanged for an access token. state The value of the state parameter you supplied in the initial authorization request. For example (with extra line breaks for display purposes only):\nhttps://www.example.com/oauth2/callback?\ncode=3BB723FF-74C9-4AED-B4F6-7E8A192CBA21\n&state=fdf80155 If the user denied your permission request, the query string will contain the following parameters: Query parameter Description error The reason that authorization failed (for example, access_denied). state The value of the state parameter you supplied in the initial authorization request. For example (with extra line breaks for display purposes only):\nhttps://www.example.com/oauth2/callback?\nerror=access_denied\n&state=fdf80155 For more information on commonly encountered authorization problems, see common authorization issues. Step 4 – Request tokens When your application receives an authorization code, you will need to exchange it for an access token by making a POST request to our token endpoint:\nhttps://oauth2.apim.blackbaud.com/token The body of the request must contain the following fields: Field Description grant_type Required. This field must contain the value authorization_code. code Required. The authorization code supplied to your application's redirect_uri. redirect_uri Required. This parameter is used for validation only (there is no actual redirection). The value of this parameter must exactly match the value of the redirect_uri parameter you supplied when initiating authorization. In addition, the request must include the following headers: Header Description Authorization Required. Your application's basic authentication credentials. The value of this header must be a base 64-encoded string that contains the application ID and secret that were provided when you registered your application. The value must have the format: Basic <base64 encoded Application ID:Application secret>. Note: As an alternative to using the Authorization header, you may supply your application ID and secret as part of the request body as client_id and client_secret parameters, respectively. Since this request uses your Application secret, it should be made from the server to avoid exposing the value to the public. Content-Type Required. The value should be application/x-www-form-urlencoded. For example:\nPOST https://oauth2.apim.blackbaud.com/token HTTP/1.1\nAuthorization: Basic czZCaGRS...WDFmQmF0M2JW\nContent-Type: application/x-www-form-urlencoded grant_type=authorization_code&redirect_uri=https%3A%2F%2Fwww.example.com%2Foauth2%2Fcallback&code=bd2d702f47bc453580098c8076d471b4 Note: The authorization code expires in 5 minutes. Be sure to quickly exchange it for an access token. Step 5 – Tokens returned If the access token request is successful, the response body will contain a JSON object that has the following fields: Field Type Description access_token string An access token to be used when making calls to the SKY API. The access token should be provided in the standard Authorization header in the form of Bearer token (note the separating space). token_type string Indicates the type of token issued, and will always contain the value bearer. expires_in integer The time period (in seconds) in which the access token is valid. refresh_token string A value that can be used to refresh the access token when it expires. When you exchange a refresh token, you'll receive a new access token (and a new refresh token) that you can use when making subsequent calls to the SKY API. (See refresh access token). tenant_id string The ID of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. tenant_name string The name of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. legal_entity_id string The legal entity identifier. A legal entity represents a Blackbaud client (organization or individual) who can try out or purchase the products, services, and solutions Blackbaud provides. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. legal_entity_name string The name of the legal entity. environment_id string The environment identifier. An environment is a logical group of products and service instances that a legal entity is entitled to. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. environment_name string The name of the environment. user_id string The unique identifer of the authenticated Blackbaud user in whose context the access token is issued. This value can be used to correlate Blackbaud users with users in external systems. Sample response:\nHTTP/1.1 200 OK\nCache-Control: no-cache\nPragma: no-cache\nContent-Length: 918\nContent-Type: application/json;charset=UTF-8\nExpires: -1\nDate: Thu, 10 Sep 2015 15:46:56 GMT { \"access_token\":\"eyJ0eXAiOiJKV1...CTtP0CQ\", \"token_type\": \"bearer\", \"expires_in\": 1199, \"refresh_token\":\"eb78ffd...7cb7b\", \"tenant_id\": \"E27DD7B6-6B71-4689-8B2C-60A74F243966\", \"tenant_name\":\"Raiser's Edge NXT - Blackbaud (Developer Sandbox)\", \"legal_entity_id\":\"p-AaBbCcDdEeFfGg987654321\", \"legal_entity_name\":\"Blackbaud Developer Sandbox\" \"environment_id\":\"p-abcdef1234567890ABCDEFG\", \"environment_name\":\"Blackbaud Developer Sandbox Environment\"\n} If the token request is not successful, the response status code and body will provide details. For more information on commonly encountered authorization problems, see common authorization issues. Step 6 – Call the SKY API The access token allows you to make requests to the SKY API on a behalf of a user. When calling the API, provide the access token using the standard Authorization request header with a value of Bearer, followed by a space and the access_token value.\nYou will also need to provide your subscription key to the SKY API via the Bb-Api-Subscription-Key header. You can use either the primary or the secondary key (both are equally functional), and both can be found on your developer profile page.\nFor more information on providing these headers, see request headers.\nSample Request\nGET https://api.sky.blackbaud.com/constituent/v1/constituents/280 HTTP/1.1\nHost: api.sky.blackbaud.com\nAuthorization: Bearer eyJ0eXAiOiJKV1...CTtP0CQ\nBb-Api-Subscription-Key: 77f137116...480d633 Step 7 – Refresh access token For security purposes, access tokens will expire after 60 minutes. When this happens, calls to the SKY API will respond with a status code of 401 Not Authorized along with the message \"The required Authorization header was missing or invalid, or the token has expired\". To continue making calls to the API, you will need to exchange the value you received in the refresh_token field for a new access token.\nThis exchange happens on the server, and does not involve any user interactivity. In this way, your application can have indefinite connectivity to after the initial one-time user-interactive consent.\nTo refresh your access token, make a POST request to our token endpoint:\nhttps://oauth2.apim.blackbaud.com/token The body of the request must contain the following fields: Field Description grant_type Required. This field must contain the value refresh_token. refresh_token Required. The refresh token supplied to your application's redirect_uri. In addition, the request must include the following headers: Header Description Authorization Required. Your application's basic authentication credentials. The value of this header must be a base 64-encoded string that contains the application ID and secret that were provided when you registered your application. The value must have the format: Basic <base64 encoded Application ID:Application secret>. Note: As an alternative to using the Authorization header, you may supply your application ID and secret as part of the request body as client_id and client_secret parameters, respectively. Since this request uses your Application secret, it should be made from the server to avoid exposing the value to the public. Content-Type Required. The value should be application/x-www-form-urlencoded. For example:\nPOST https://oauth2.apim.blackbaud.com/token HTTP/1.1\nAuthorization: Basic czZCaGRS...WDFmQmF0M2JW\nContent-Type: application/x-www-form-urlencoded grant_type=refresh_token&refresh_token=eb78ffdabc7cb7b If the refresh token request is successful, the response body will contain a JSON object that has the following fields: Field Type Description access_token string An access token to be used when making calls to the SKY API. The access token should be provided in the standard Authorization header in the form of Bearer token (note the separating space). token_type string Indicates the type of token issued, and will always contain the value bearer. expires_in integer The time period (in seconds) in which the access token is valid. refresh_token string A value that can be used to refresh the access token when it expires. When you exchange a refresh token, you'll receive a new access token (and a new refresh token) that you can use when making subsequent calls to the SKY API. (See refresh access token). tenant_id string The ID of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. legal_entity_id string The legal entity identifier. A legal entity represents a Blackbaud client (organization or individual) who can try out or purchase the products, services, and solutions Blackbaud provides. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. legal_entity_name string The name of the legal entity. environment_id string The environment identifier. An environment is a logical group of products and service instances that a legal entity is entitled to. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. environment_name string The name of the environment. Sample response:\nHTTP/1.1 200 OK\nCache-Control: no-cache\nPragma: no-cache\nContent-Length: 918\nContent-Type: application/json;charset=UTF-8\nExpires: -1\nDate: Thu, 10 Sep 2015 15:46:56 GMT { \"access_token\":\"azH0eXAiOiJKV1...DTxS1DR\", \"token_type\": \"bearer\", \"expires_in\": 1199, \"refresh_token\":\"ab478xsd...7ab6c\", \"tenant_id\": \"E27DD7B6-6B71-4689-8B2C-60A74F243966\", \"legal_entity_id\":\"p-AaBbCcDdEeFfGg987654321\", \"legal_entity_name\":\"Blackbaud Developer Sandbox\" \"environment_id\":\"p-abcdef1234567890ABCDEFG\", \"environment_name\":\"Blackbaud Developer Sandbox Environment\"\n} If the refresh token request is not successful, the response status code and body will provide details. For more information on commonly encountered authorization problems, see common authorization issues. Step 8 – Next steps For more information on implementing the authorization code flow, check out our code samples. "
    },
    {
     "layout": "layout-sidebar",
     "name": "Common Authorization Issues",
     "description": "Common errors encountered when interacting with the OAuth endpoints.",
     "order": 200,
     "published": true,
     "showInNav": true,
     "back_to_top": true,
     "title": "Common Authorization Issues",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Authorization Common-auth-issues",
     "abspath": "docs/authorization/common-auth-issues/index.md",
     "uri": "/docs/authorization/common-auth-issues/",
     "text": " Comments Edit in GitHub Common Authorization Issues\nYou may encounter one of the following common issues when initiating authorization, requesting access tokens, or calling the SKY API.\nInitiating Authorization\nApplications initiate the OAuth process by directing the user's browser to our Authorization page with various parameters that identify the application and the type of authorization being requested. Important! Pop up blockers may interfere with obtaining access tokens if the authorization page is launched in a separate window (as is done in the SKY API Console). Please enable pop ups when using the SKY API Console to obtain access tokens. Invalid client_id\nThe client_id parameter is required and used to identify the application requesting authorization. If omitted, the following error will be shown: If an invalid client_id parameter is specified, the following error will be shown: To resolve these issues, ensure that the authorization URL includes the client_id parameter, which is displayed in the Application Credentials column of the My Applications page. Application ID is the unique identifier for your application, and should be specified as the client_id parameter when initiating the authorization process.\nInvalid redirect_uri\nThe redirect_uri parameter is required and used to confirm the application's identity and communicate where to send the browser after the user provides consent. If omitted, the following error will be shown: If an invalid or malformed redirect_uri parameter is specified, the following error will be shown: If the value provided for the redirect_uri parameter does not match one of the values provided when the application was registered, the following error will be shown: To resolve these issues, ensure that the value provided for the redirect_uri parameter is one of the whitelisted values that you specified when registering your application. The value must match exactly, including capitalization, terminating slashes, etc.\nInvalid response_type\nThe response_type parameter is required, and indicates the the type of authorization being requested by the application. The value must be set to code when using the Authorization Code Flow or token when using the Implicit Flow.\nIf the response_type parameter is omitted, the user's browser will be redirected to the specified redirect_uri location with an error query parameter of invalid_request. If the value specified is invalid or unsupported, the error query parameter will be unsupported_response_type.\nUser cannot access any SKY API enabled products\nIf the authenticated user cannot access any SKY API enabled Blackbaud products, the following error will be shown: In order to provide consent for an application to access any Blackbaud data, the authenticating user must have access to a SKY API enabled Blackbaud product. This requirement allows SKY API to respect and enforce the user's security permissions. If the user does not have access, they should contact the organization administrator and request an invitation.\nApplication not approved\nBefore an application can request authorization and make calls to the SKY API, an organization administrator must approve the application. If the application has not been approved, the following error will be shown: Note that organization administrators can also remove an application when they no longer want it to have access to their Blackbaud data. For more information, see Activate your application.\nUser denied access\nDuring the OAuth process, the user can choose to deny consent to the application. When this happens, the user's browser will be redirected to the specified redirect_uri location with an error query parameter of access_denied and an error_message query parameter value of The user chose not to give your app access to their Blackbaud data..\nOther parameters\nNote that any query parameters not directly supported will be ignored during the OAuth process. For more information on initiating the OAuth process, see Authorization.\nRequesting Tokens\nApplications using the Authorization Code Flow will call the /token endpoint to exchange authorization codes for access tokens and to refresh access tokens when they expire. Calls to the /token endpoint require authentication and a request body that describes the operation being performed.\nError responses from the /token endpoint match the shape defined by Section 5.2 of the OAuth 2.0 spec, and will be returned as a JSON object containing error and error_description properties:\n{ \"error\": \"invalid_client\", \"error_description\": \"The specified credentials were not valid.\"\n} invalid_client error\nThis error indicates that we were unable to retrieve and verify the application's credentials (application ID and secret) from either the authorization header or the request body. To resolve this, ensure that you are providing the application credentials as either base64-encoded values within the Authorization header (preferred), or as form-url-encoded values client_id and client_secret in the request body. Note: When specifying credentials using the Authorization header, the value must have the format: Basic <base64 encoded Application ID:Application secret>. Make sure to include a space after the \"Basic\" prefix. After you register an application, the credentials are displayed in the Application Credentials column of the My Applications page. Application ID is the unique identifier for your application, and should be specified as the client_id parameter value. Use the Application Secret as the client_secret parameter value.\nFor more information, see step 4 of Authorization Code Flow documentation.\nVariations of this error condition can take the following forms: \"The required credentials were not supplied.\" \"The required client_id parameter was not provided.\" \"The specified credentials were not valid.\" \"The value specified for the client_id parameter 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXX' was not valid.\" Ensure that the application's credentials were properly specified as either base64-encoded values within the Authorization header (preferred), or as form-url-encoded values client_id and client_secret in the request body. invalid_redirect_uri error \"The specified value for the redirect_uri parameter 'xxxxxxx' did not match any pre-registered values.\" The value provided for the redirect_uri field in the request body must be one of the whitelisted values that you specified when registering your application. The value must match exactly, including capitalization, terminating slashes, etc.\nNote that within the /token endpoint this value is only used for validation purposes (no redirect actually happens). The value must exactly match the value of the redirect_uri parameter that was specified when originally requesting the authorization code.\nunsupported_grant_type error \"unsupported_grant_type\" error When requesting an access token from the /token endpoint, you must pass an appropriate value for the grant_type request body parameter as per the OAuth 2.0 specification. When initially exchanging an authorization code for an access token, the value specified should be authorization_code. When refreshing an access token, the value specified should be refresh_token. Check the spelling of the grant_type parameter name, and ensure that the value provided is supported. invalid_grant error \"invalid_grant\" error This error can be returned for a variety of reasons when requesting an access token.\nFor example, when exchanging an authorization code for an access token, you will see this error when providing an invalid, expired, or previously used authorization code. In this case, you must restart the authorization process and obtain a new authorization code from the /authorization page. The authorization codes expire in a short period of time (currently, 5 minutes) and are not reusable. Your application should exchange them for access tokens promptly.\nA redirect_uri that does not match the one used when making the initial authorization request can also cause this error. To resolve this, use the same redirect_uri in both operations.\nYou may also see this when you refresh an access token if you provide an expired, revoked, or otherwise invalid refresh token.\nCalling the SKY API\ninvalid subscription key \"Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription.\" When making calls to the SKY API, be sure to provide either your primary or secondary subscription key with the request.\nThe subscription key represents a subscription to a specific SKY API product and is associated with your developer account. To get a subscription key, you'll need to sign up for a Blackbaud developer account and get an approved subscription. Once you have an approved subscription, you can view the subscription keys within your profile. The subscription key value is passed with each request to the SKY API via the Bb-Api-Subscription-Key request header. See Getting Started for instructions on how to obtain a subscription key and an example of using the subscription key in a call to the API.\nmissing/invalid authorization header \"The required Authorization header was missing or invalid, or the token has expired\" Missing Token\nWhen making calls to the API, you need to provide an access token obtained using OAuth 2.0. The access token allows you to make requests to the SKY API on a behalf of a user. When calling the API, be sure to supply the Authorization request header with a value of Bearer, followed by a space and the access_token value.\nIt's a common mistake to forget to prepend the access_token value with Bearer. Be sure to include a space between Bearer and the access_token value.\nSample request:\nGET https://api.sky.blackbaud.com/constituent/constituents/280 HTTP/1.1\nHost: api.sky.blackbaud.com\nAuthorization: Bearer eyJ0eXAiOiJKV1...CTtP0CQ\nBb-Api-Subscription-Key: 77f137116...480d633 Expired Token\nThe access token expires in 60 minutes. With the Authorization Code Flow, each time you refresh your tokens, you'll get a new access and refresh token. Refresh tokens will also expire, but after a much longer period of time (currently, 60 days). Using a sliding window, each time you exchange your refresh token for a new access token, we will issue a new refresh token as well. As long as your application connects to the SKY API at least once within the window, you will be able to continue to access the Blackbaud customer's data indefinitely (or until they deactivate your application).\nIf your access token and refresh token have expired, the user will have to re-authenticate and consent. "
    },
    {
     "name": "Implicit Flow",
     "description": "The Implicit Flow is carried out client-side within a browser-based app. Since the code is available to the browser, the <%= stache.config.guide_apps_client_secret_name %> cannot be kept a secret and is not used to request an access token.  As a result, the access tokens that are issued are short-lived and there are no refresh tokens to extend them when they expire.",
     "layout": "layout-tutorial",
     "order": 150,
     "published": true,
     "showInNav": true,
     "title": "Implicit Flow",
     "sidebarLayoutSecondaryColumn": "col-lg-2 col-md-3 col-sm-12 sidebar-tutorial",
     "sidebarLayoutPrimaryColumn": "col-lg-8 col-md-8 col-sm-12",
     "bootstrap_container": "bg-tutorial",
     "markdown": false,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Authorization Implicit-flow",
     "abspath": "docs/authorization/implicit-flow/index.md",
     "uri": "/docs/authorization/implicit-flow/",
     "text": " Comments Edit in GitHub Implicit Flow Introduction The implicit grant is meant for applications where API calls are made from the client, typically within a browser using JavaScript. Since API calls are made from the client, they are inherently less secure and do not involve the exchange of an application secret. The access tokens that are issued are short-lived and no refresh tokens are provided, so the user must re-authorize your application when the token expires.\nLike the Authorization Code Flow, the implicit flow starts by redirecting the user's browser from your application to our Authorization URL. The user will login (using the Blackbaud or Google credentials), confirm that it's OK for your application to access their data, and then we'll redirect back to you with an access token that you can immediately use when making API calls on that user's behalf.\nSince this is a redirection-based flow, your application must be able to interact with a web browser and receive incoming requests (via redirection) from our OAuth endpoints. Step 1 – Request authorization Initiate the authorization process by redirecting the user's browser to our authorization endpoint. You can choose to do this as a step in your application's login process or in response to some user action in your app (like a button click):\nhttps://oauth2.apim.blackbaud.com/authorization When navigating, you'll need to include a few parameters in the query string. These parameters are fully described in RFC-6749 section 4.1.1: Query parameter Description client_id Required. The Application ID value that we provide when you register your application. This value uniquely identifies your application. See RFC-6749 section 2.2. response_type Required. The value must be set to token. This indicates that the access token should be returned in the fragment of the redirect URI. redirect_uri Required. The URI to redirect to after the user grants or denies permission to your app. This value must exactly match one of the Redirect URI values you specify when you register your application, including any capitalization, trailing slashes, etc. See RFC-6749 section 3.1.2. state Optional, but recommended. The state parameter is an opaque value that you can provide when requesting authorization that will be echoed back to you when the user grants or denies permission to your app. You can then validate this parameter to ensure that an incoming redirect is the result of an authentication request that originated in your application. This provides protection against Cross-Site Request Forgery (CSRF) attacks. You can also use this parameter to maintain some state between the authorization request you initiate and the incoming navigation to your redirect URI for the purposes of returning the user to tbe most appropriate location within your app. See RFC-6749 section 10.12 environment_id Optional. The environment_id parameter can be used to filter the list of eligible environments shown during the user authorization step. This filter is useful when the user is already operating in the context of an environment, such as within a SKY API user interface add-in. We'll have more information on environments and add-ins in the near future. Note: to facilitate local development, we allow the use of http and localhost or the localhost IP (127.0.0.1). In production however, we require the use of https for proper security when redirecting. A sample authorization request looks like this (with extra line breaks for display purposes only):\nhttps://oauth2.apim.blackbaud.com/authorization?\nclient_id=E140BF29-A528-4048-91A9-83BCB01B7FE2\n&response_type=token\n&redirect_uri=https://www.example.com/oauth2/callback\n&state=fdf80155 Step 2 – User authorization In this step, we'll ask the user to log in (using their Blackbaud or Google credentials). We'll then ask them if it's ok for your application to access their Blackbaud data: If the user has access to more than one customer's data, they'll select the customer (tenant) to which they are giving your app permission. Step 3 – Access token provided After the user grants (or denies) your authorization request, we'll redirect the browser to the redirect_uri that you specified in the request (in the above example, we'll redirect the browser back to your application at https://www.example.com/oauth2/callback).\nIf the user granted your app permission, the URL fragment will contain the following fields: Field Type Description access_token string An access token to be used when making calls to the SKY API. The access token should be provided in the standard Authorization header in the form of Bearer token (note the separating space). token_type string Indicates the type of token issued, and will always contain the value bearer. expires_in integer The time period (in seconds) in which the access token is valid. state string The value of the state parameter you supplied in the initial authorization request. tenant_id string The ID of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. tenant_name string The name of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. legal_entity_id string The legal entity identifier. A legal entity represents a Blackbaud client (organization or individual) who can try out or purchase the products, services, and solutions Blackbaud provides. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. legal_entity_name string The name of the legal entity. environment_id string The environment identifier. An environment is a logical group of products and service instances that a legal entity is entitled to. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. environment_name string The name of the environment. user_id string The unique identifer of the authenticated Blackbaud user in whose context the access token is issued. This value can be used to correlate Blackbaud users with users in external systems. Reminder: The Implicit Grant Flow provides a short-lived access token that expires in 60 minutes. A refresh token is not provided, so when the token expires your application should re-authorize the user again. Successful redirect response example (with extra line breaks for display purposes only):\nhttps://www.example.com/oauth2/callback#\naccess_token=1d57284f025...4975d\n&token_type=bearer\n&expires_in=3600\n&state=fdf80155\n&tenant_id=E27DD7B6-6B71-4689-8B2C-60A74F243966\n&tenant_name=Raiser%27s%20Edge%20NXT%20-%20Blackbaud%20%28Developer%20Sandbox%29\n&legal_entity_id=p-AaBbCcDdEeFfGg987654321\",\n&legal_entity_name=Blackbaud%20Developer%20Sandbox\n&environment_id\":\"p-abcdef1234567890ABCDEFG\",\n&environment_name=Blackbaud%20Developer%20Sandbox%20Environment If the user denied your permission request, the query string will contain the following parameters: Query parameter Description error The reason that authorization failed (for example, access_denied). state The value of the state parameter you supplied in the initial authorization request. For example (with extra line breaks for display purposes only):\nhttps://www.example.com/oauth2/callback?\nerror=access_denied\n&state=fdf80155 For more information on commonly encountered authorization problems, see common authorization issues. Step 4 – Call the SKY API The access token allows you to make requests to the SKY API on a behalf of a user. When calling the API, provide the access token using the standard Authorization request header with a value of Bearer, followed by a space and the access_token value.\nYou will also need to provide your subscription key to the SKY API via the Bb-Api-Subscription-Key header. You can use either the primary or the secondary key (both are equally functional), and both can be found on your developer profile page.\nFor more information on providing these headers, see request headers.\nSample Request\nGET https://api.sky.blackbaud.com/constituent/constituents/280 HTTP/1.1\nHost: api.sky.blackbaud.com\nAuthorization: Bearer eyJ0eXAiOiJKV1...CTtP0CQ\nBb-Api-Subscription-Key: 77f137116...480d633 Step 5 – Next steps For more information on implementing the implicit flow, check out our code samples. "
    }
   ],
   "text": " Comments Edit in GitHub Authorization\nSKY API uses the OAuth 2.0 protocol to authorize API requests. This provides a mechanism for your application to access Blackbaud customer data without exposing any user credentials (username/password) to your application. Instead, users must provide consent to your application to access data on their behalf.\nSKY API OAuth 2.0 endpoints: Endpoint URL Authorization https://oauth2.apim.blackbaud.com/authorization Token https://oauth2.apim.blackbaud.com/token In order to call the SKY API, you must first register your application within the My Applications area of the developer portal. This registration provides your application with a unique set of credentials to use when asking a user for consent.\nBefore your application can access a given Blackbaud customer's data, it must first be approved by an administrator within the customer's organization. The administrator provides this approval by activating your application within the Applications area of the product. This allows Blackbaud customers to control which applications have access to their data, and at any time an administrator can de-activate your application and prevent future access via the API.\nAfter your application is activated, you can then obtain consent from an authenticated Blackbaud user. Upon consent, an OAuth 2.0 access token will be issued to your application in the form of a JSON web token, or JWT. The token should be included on every API request as part of the standard Authorization header. It is tied to the authenticated user's account and organization, which means that your application can only access data to which the authenticated user can access within the system.\nSupported OAuth 2.0 flows\nThe SKY API supports the following grant types: Authorization Code Flow (aka the Web Server flow). This flow is meant for web applications where API calls are made from the server. It is the most secure as it involves server-to-server communication, and is also the most functional as it also provides refresh tokens. This allows your application to have indefinite connectivity to the SKY API after the one-time user-interactive consent process. Implicit Flow. This flow is meant for client-side applications, such as browser-based, native, and mobile applications. Since API calls are made from the client, they are inherently less secure and do not involve the exchange of an application secret. The access tokens that are issued are short-lived and no refresh tokens are provided, so the user must re-authorize your application when the token expires. User experience\nThe Authorization Code Flow starts by redirecting the user's browser from your application to our Authorization URL. The user will login (using their Blackbaud or Google credentials), confirm that it's OK for your application to access their data, and then we'll redirect back to you with a authorization code that you can exchange for an access token. You can store this access token (and the refresh token) in your application, and use it when making API calls on that user's behalf.\nThe Implicit Flow starts by redirecting the user's browser from your application to our Authorization URL. The user will login (using their Blackbaud or Google credentials), confirm that it's OK for your application to access their data, and then we'll redirect back to you with an access token that you can use when making API calls on that user's behalf.\nToken expiration\nAs a security best-practice, access tokens will expire after a period of time (currently, 60 minutes). When this happens, your application should exchange the refresh token it received with the original access token for a new access token in order to make additional API calls. The refresh token exchange happens on the server and does not involve any interaction with the user.\nIf your access token was obtained using the Implicit Flow, you won't have a refresh token and you'll need the user to re-authorize your application before making additional API calls.\nNote: Refresh tokens will also expire, but after a much longer period of time (currently, 60 days). Using a sliding window, each time you exchange your refresh token for a new access token, we will issue a new refresh token as well. As long as your application connects to the SKY API at least once within the window, you will be able to continue accessing the Blackbaud customer's data indefinitely (or until they deactivate your application).\nScopes\nOAuth 2.0 scopes are not yet supported within SKY API. In the future, applications may be able to express intent via scopes, but for now API access is always in the context of an authenticated user, which means that API access respects the user's security permissions defined within the product. "
  },
  {
   "name": "Authorization Code Flow",
   "description": "The Authorization Code Flow is appropriate for applications that the user logs into once. Since this flow involves an exchange of your **Application secret* for an access token, it is suitable for applications than run from secure locations such as server-side web application or back-end service.",
   "layout": "layout-tutorial",
   "order": 100,
   "published": true,
   "showInNav": true,
   "title": "Authorization Code Flow",
   "sidebarLayoutSecondaryColumn": "col-lg-2 col-md-3 col-sm-12 sidebar-tutorial",
   "sidebarLayoutPrimaryColumn": "col-lg-8 col-md-8 col-sm-12",
   "bootstrap_container": "bg-tutorial",
   "markdown": false,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Authorization Auth-code-flow",
   "abspath": "docs/authorization/auth-code-flow/index.md",
   "uri": "/docs/authorization/auth-code-flow/",
   "text": " Comments Edit in GitHub Authorization Code Flow Introduction The authorization code grant is meant for web applications where API calls are made from the server. It is the most secure as it involves server-to-server communication, and is also the most functional as it also provides refresh tokens. This allows your application to have indefinite connectivity to the SKY API after the one-time user-interactive consent process.\nThe flow starts by redirecting the user's browser from your application to our Authorization URL. The user will login (using their Blackbaud or Google credentials), confirm that it's OK for your application to access their data, and then we'll redirect back to you with an authorization code that you can exchange for an access token. You can store this access token (and the refresh token) in your application, and use it when making API calls on that user's behalf.\nSince this is a redirection-based flow, your application must be able to interact with a web browser and receive incoming requests (via redirection) from our OAuth endpoints.\nWe demonstrate this flow in our tutorials and code samples. Step 1 – Request authorization Initiate the authorization process by redirecting the user's browser to our authorization endpoint. You can choose to do this as a step in your application's login process or in response to some user action in your app (like a button click):\nhttps://oauth2.apim.blackbaud.com/authorization When navigating, you'll need to include a few parameters in the query string. These parameters are fully described in RFC-6749 section 4.1.1: Query parameter Description client_id Required. The Application ID value that we provide when you register your application. This value uniquely identifies your application. See RFC-6749 section 2.2. response_type Required. The value must be set to code. redirect_uri Required. The URI to redirect to after the user grants or denies permission to your app. This value must exactly match one of the Redirect URI values you specify when you register your application, including any capitalization, trailing slashes, etc. See RFC-6749 section 3.1.2. state Optional, but recommended. The state parameter is an opaque value that you can provide when requesting authorization that will be echoed back to you when the user grants or denies permission to your app. You can then validate this parameter to ensure that an incoming redirect is the result of an authentication request that originated in your application. This provides protection against Cross-Site Request Forgery (CSRF) attacks. You can also use this parameter to maintain some state between the authorization request you initiate and the incoming navigation to your redirect URI for the purposes of returning the user to tbe most appropriate location within your app. See RFC-6749 section 10.12 environment_id Optional. The environment_id parameter can be used to filter the list of eligible environments shown during the user authorization step. This filter is useful when the user is already operating in the context of an environment, such as within a SKY API user interface add-in. We'll have more information on environments and add-ins in the near future. Note: to facilitate local development, we allow the use of http and localhost or the localhost IP (127.0.0.1). In production however, we require the use of https for proper security when redirecting. A sample authorization request looks like this (with extra line breaks for display purposes only):\nhttps://oauth2.apim.blackbaud.com/authorization?\nclient_id=E140BF29-A528-4048-91A9-83BCB01B7FE2\n&response_type=code\n&redirect_uri=https://www.example.com/oauth2/callback\n&state=fdf80155 Step 2 – User authorization In this step, we'll ask the user to log in (using their Blackbaud or Google credentials). We'll then ask them if it's ok for your application to access their Blackbaud data: If the user has access to more than one customer's data, they'll select the customer (tenant) to which they are giving your app permission. Step 3 – User is redirected back After the user grants (or denies) your authorization request, we'll redirect the browser to the redirect_uri that you specified in the request (in the above example, we'll redirect the browser back to your application at https://www.example.com/oauth2/callback).\nIf the user granted your app permission, the query string will contain the following parameters: Query parameter Description code An authorization code that can be exchanged for an access token. state The value of the state parameter you supplied in the initial authorization request. For example (with extra line breaks for display purposes only):\nhttps://www.example.com/oauth2/callback?\ncode=3BB723FF-74C9-4AED-B4F6-7E8A192CBA21\n&state=fdf80155 If the user denied your permission request, the query string will contain the following parameters: Query parameter Description error The reason that authorization failed (for example, access_denied). state The value of the state parameter you supplied in the initial authorization request. For example (with extra line breaks for display purposes only):\nhttps://www.example.com/oauth2/callback?\nerror=access_denied\n&state=fdf80155 For more information on commonly encountered authorization problems, see common authorization issues. Step 4 – Request tokens When your application receives an authorization code, you will need to exchange it for an access token by making a POST request to our token endpoint:\nhttps://oauth2.apim.blackbaud.com/token The body of the request must contain the following fields: Field Description grant_type Required. This field must contain the value authorization_code. code Required. The authorization code supplied to your application's redirect_uri. redirect_uri Required. This parameter is used for validation only (there is no actual redirection). The value of this parameter must exactly match the value of the redirect_uri parameter you supplied when initiating authorization. In addition, the request must include the following headers: Header Description Authorization Required. Your application's basic authentication credentials. The value of this header must be a base 64-encoded string that contains the application ID and secret that were provided when you registered your application. The value must have the format: Basic <base64 encoded Application ID:Application secret>. Note: As an alternative to using the Authorization header, you may supply your application ID and secret as part of the request body as client_id and client_secret parameters, respectively. Since this request uses your Application secret, it should be made from the server to avoid exposing the value to the public. Content-Type Required. The value should be application/x-www-form-urlencoded. For example:\nPOST https://oauth2.apim.blackbaud.com/token HTTP/1.1\nAuthorization: Basic czZCaGRS...WDFmQmF0M2JW\nContent-Type: application/x-www-form-urlencoded grant_type=authorization_code&redirect_uri=https%3A%2F%2Fwww.example.com%2Foauth2%2Fcallback&code=bd2d702f47bc453580098c8076d471b4 Note: The authorization code expires in 5 minutes. Be sure to quickly exchange it for an access token. Step 5 – Tokens returned If the access token request is successful, the response body will contain a JSON object that has the following fields: Field Type Description access_token string An access token to be used when making calls to the SKY API. The access token should be provided in the standard Authorization header in the form of Bearer token (note the separating space). token_type string Indicates the type of token issued, and will always contain the value bearer. expires_in integer The time period (in seconds) in which the access token is valid. refresh_token string A value that can be used to refresh the access token when it expires. When you exchange a refresh token, you'll receive a new access token (and a new refresh token) that you can use when making subsequent calls to the SKY API. (See refresh access token). tenant_id string The ID of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. tenant_name string The name of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. legal_entity_id string The legal entity identifier. A legal entity represents a Blackbaud client (organization or individual) who can try out or purchase the products, services, and solutions Blackbaud provides. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. legal_entity_name string The name of the legal entity. environment_id string The environment identifier. An environment is a logical group of products and service instances that a legal entity is entitled to. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. environment_name string The name of the environment. user_id string The unique identifer of the authenticated Blackbaud user in whose context the access token is issued. This value can be used to correlate Blackbaud users with users in external systems. Sample response:\nHTTP/1.1 200 OK\nCache-Control: no-cache\nPragma: no-cache\nContent-Length: 918\nContent-Type: application/json;charset=UTF-8\nExpires: -1\nDate: Thu, 10 Sep 2015 15:46:56 GMT { \"access_token\":\"eyJ0eXAiOiJKV1...CTtP0CQ\", \"token_type\": \"bearer\", \"expires_in\": 1199, \"refresh_token\":\"eb78ffd...7cb7b\", \"tenant_id\": \"E27DD7B6-6B71-4689-8B2C-60A74F243966\", \"tenant_name\":\"Raiser's Edge NXT - Blackbaud (Developer Sandbox)\", \"legal_entity_id\":\"p-AaBbCcDdEeFfGg987654321\", \"legal_entity_name\":\"Blackbaud Developer Sandbox\" \"environment_id\":\"p-abcdef1234567890ABCDEFG\", \"environment_name\":\"Blackbaud Developer Sandbox Environment\"\n} If the token request is not successful, the response status code and body will provide details. For more information on commonly encountered authorization problems, see common authorization issues. Step 6 – Call the SKY API The access token allows you to make requests to the SKY API on a behalf of a user. When calling the API, provide the access token using the standard Authorization request header with a value of Bearer, followed by a space and the access_token value.\nYou will also need to provide your subscription key to the SKY API via the Bb-Api-Subscription-Key header. You can use either the primary or the secondary key (both are equally functional), and both can be found on your developer profile page.\nFor more information on providing these headers, see request headers.\nSample Request\nGET https://api.sky.blackbaud.com/constituent/v1/constituents/280 HTTP/1.1\nHost: api.sky.blackbaud.com\nAuthorization: Bearer eyJ0eXAiOiJKV1...CTtP0CQ\nBb-Api-Subscription-Key: 77f137116...480d633 Step 7 – Refresh access token For security purposes, access tokens will expire after 60 minutes. When this happens, calls to the SKY API will respond with a status code of 401 Not Authorized along with the message \"The required Authorization header was missing or invalid, or the token has expired\". To continue making calls to the API, you will need to exchange the value you received in the refresh_token field for a new access token.\nThis exchange happens on the server, and does not involve any user interactivity. In this way, your application can have indefinite connectivity to after the initial one-time user-interactive consent.\nTo refresh your access token, make a POST request to our token endpoint:\nhttps://oauth2.apim.blackbaud.com/token The body of the request must contain the following fields: Field Description grant_type Required. This field must contain the value refresh_token. refresh_token Required. The refresh token supplied to your application's redirect_uri. In addition, the request must include the following headers: Header Description Authorization Required. Your application's basic authentication credentials. The value of this header must be a base 64-encoded string that contains the application ID and secret that were provided when you registered your application. The value must have the format: Basic <base64 encoded Application ID:Application secret>. Note: As an alternative to using the Authorization header, you may supply your application ID and secret as part of the request body as client_id and client_secret parameters, respectively. Since this request uses your Application secret, it should be made from the server to avoid exposing the value to the public. Content-Type Required. The value should be application/x-www-form-urlencoded. For example:\nPOST https://oauth2.apim.blackbaud.com/token HTTP/1.1\nAuthorization: Basic czZCaGRS...WDFmQmF0M2JW\nContent-Type: application/x-www-form-urlencoded grant_type=refresh_token&refresh_token=eb78ffdabc7cb7b If the refresh token request is successful, the response body will contain a JSON object that has the following fields: Field Type Description access_token string An access token to be used when making calls to the SKY API. The access token should be provided in the standard Authorization header in the form of Bearer token (note the separating space). token_type string Indicates the type of token issued, and will always contain the value bearer. expires_in integer The time period (in seconds) in which the access token is valid. refresh_token string A value that can be used to refresh the access token when it expires. When you exchange a refresh token, you'll receive a new access token (and a new refresh token) that you can use when making subsequent calls to the SKY API. (See refresh access token). tenant_id string The ID of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. legal_entity_id string The legal entity identifier. A legal entity represents a Blackbaud client (organization or individual) who can try out or purchase the products, services, and solutions Blackbaud provides. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. legal_entity_name string The name of the legal entity. environment_id string The environment identifier. An environment is a logical group of products and service instances that a legal entity is entitled to. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. environment_name string The name of the environment. Sample response:\nHTTP/1.1 200 OK\nCache-Control: no-cache\nPragma: no-cache\nContent-Length: 918\nContent-Type: application/json;charset=UTF-8\nExpires: -1\nDate: Thu, 10 Sep 2015 15:46:56 GMT { \"access_token\":\"azH0eXAiOiJKV1...DTxS1DR\", \"token_type\": \"bearer\", \"expires_in\": 1199, \"refresh_token\":\"ab478xsd...7ab6c\", \"tenant_id\": \"E27DD7B6-6B71-4689-8B2C-60A74F243966\", \"legal_entity_id\":\"p-AaBbCcDdEeFfGg987654321\", \"legal_entity_name\":\"Blackbaud Developer Sandbox\" \"environment_id\":\"p-abcdef1234567890ABCDEFG\", \"environment_name\":\"Blackbaud Developer Sandbox Environment\"\n} If the refresh token request is not successful, the response status code and body will provide details. For more information on commonly encountered authorization problems, see common authorization issues. Step 8 – Next steps For more information on implementing the authorization code flow, check out our code samples. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Common Authorization Issues",
   "description": "Common errors encountered when interacting with the OAuth endpoints.",
   "order": 200,
   "published": true,
   "showInNav": true,
   "back_to_top": true,
   "title": "Common Authorization Issues",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Authorization Common-auth-issues",
   "abspath": "docs/authorization/common-auth-issues/index.md",
   "uri": "/docs/authorization/common-auth-issues/",
   "text": " Comments Edit in GitHub Common Authorization Issues\nYou may encounter one of the following common issues when initiating authorization, requesting access tokens, or calling the SKY API.\nInitiating Authorization\nApplications initiate the OAuth process by directing the user's browser to our Authorization page with various parameters that identify the application and the type of authorization being requested. Important! Pop up blockers may interfere with obtaining access tokens if the authorization page is launched in a separate window (as is done in the SKY API Console). Please enable pop ups when using the SKY API Console to obtain access tokens. Invalid client_id\nThe client_id parameter is required and used to identify the application requesting authorization. If omitted, the following error will be shown: If an invalid client_id parameter is specified, the following error will be shown: To resolve these issues, ensure that the authorization URL includes the client_id parameter, which is displayed in the Application Credentials column of the My Applications page. Application ID is the unique identifier for your application, and should be specified as the client_id parameter when initiating the authorization process.\nInvalid redirect_uri\nThe redirect_uri parameter is required and used to confirm the application's identity and communicate where to send the browser after the user provides consent. If omitted, the following error will be shown: If an invalid or malformed redirect_uri parameter is specified, the following error will be shown: If the value provided for the redirect_uri parameter does not match one of the values provided when the application was registered, the following error will be shown: To resolve these issues, ensure that the value provided for the redirect_uri parameter is one of the whitelisted values that you specified when registering your application. The value must match exactly, including capitalization, terminating slashes, etc.\nInvalid response_type\nThe response_type parameter is required, and indicates the the type of authorization being requested by the application. The value must be set to code when using the Authorization Code Flow or token when using the Implicit Flow.\nIf the response_type parameter is omitted, the user's browser will be redirected to the specified redirect_uri location with an error query parameter of invalid_request. If the value specified is invalid or unsupported, the error query parameter will be unsupported_response_type.\nUser cannot access any SKY API enabled products\nIf the authenticated user cannot access any SKY API enabled Blackbaud products, the following error will be shown: In order to provide consent for an application to access any Blackbaud data, the authenticating user must have access to a SKY API enabled Blackbaud product. This requirement allows SKY API to respect and enforce the user's security permissions. If the user does not have access, they should contact the organization administrator and request an invitation.\nApplication not approved\nBefore an application can request authorization and make calls to the SKY API, an organization administrator must approve the application. If the application has not been approved, the following error will be shown: Note that organization administrators can also remove an application when they no longer want it to have access to their Blackbaud data. For more information, see Activate your application.\nUser denied access\nDuring the OAuth process, the user can choose to deny consent to the application. When this happens, the user's browser will be redirected to the specified redirect_uri location with an error query parameter of access_denied and an error_message query parameter value of The user chose not to give your app access to their Blackbaud data..\nOther parameters\nNote that any query parameters not directly supported will be ignored during the OAuth process. For more information on initiating the OAuth process, see Authorization.\nRequesting Tokens\nApplications using the Authorization Code Flow will call the /token endpoint to exchange authorization codes for access tokens and to refresh access tokens when they expire. Calls to the /token endpoint require authentication and a request body that describes the operation being performed.\nError responses from the /token endpoint match the shape defined by Section 5.2 of the OAuth 2.0 spec, and will be returned as a JSON object containing error and error_description properties:\n{ \"error\": \"invalid_client\", \"error_description\": \"The specified credentials were not valid.\"\n} invalid_client error\nThis error indicates that we were unable to retrieve and verify the application's credentials (application ID and secret) from either the authorization header or the request body. To resolve this, ensure that you are providing the application credentials as either base64-encoded values within the Authorization header (preferred), or as form-url-encoded values client_id and client_secret in the request body. Note: When specifying credentials using the Authorization header, the value must have the format: Basic <base64 encoded Application ID:Application secret>. Make sure to include a space after the \"Basic\" prefix. After you register an application, the credentials are displayed in the Application Credentials column of the My Applications page. Application ID is the unique identifier for your application, and should be specified as the client_id parameter value. Use the Application Secret as the client_secret parameter value.\nFor more information, see step 4 of Authorization Code Flow documentation.\nVariations of this error condition can take the following forms: \"The required credentials were not supplied.\" \"The required client_id parameter was not provided.\" \"The specified credentials were not valid.\" \"The value specified for the client_id parameter 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXX' was not valid.\" Ensure that the application's credentials were properly specified as either base64-encoded values within the Authorization header (preferred), or as form-url-encoded values client_id and client_secret in the request body. invalid_redirect_uri error \"The specified value for the redirect_uri parameter 'xxxxxxx' did not match any pre-registered values.\" The value provided for the redirect_uri field in the request body must be one of the whitelisted values that you specified when registering your application. The value must match exactly, including capitalization, terminating slashes, etc.\nNote that within the /token endpoint this value is only used for validation purposes (no redirect actually happens). The value must exactly match the value of the redirect_uri parameter that was specified when originally requesting the authorization code.\nunsupported_grant_type error \"unsupported_grant_type\" error When requesting an access token from the /token endpoint, you must pass an appropriate value for the grant_type request body parameter as per the OAuth 2.0 specification. When initially exchanging an authorization code for an access token, the value specified should be authorization_code. When refreshing an access token, the value specified should be refresh_token. Check the spelling of the grant_type parameter name, and ensure that the value provided is supported. invalid_grant error \"invalid_grant\" error This error can be returned for a variety of reasons when requesting an access token.\nFor example, when exchanging an authorization code for an access token, you will see this error when providing an invalid, expired, or previously used authorization code. In this case, you must restart the authorization process and obtain a new authorization code from the /authorization page. The authorization codes expire in a short period of time (currently, 5 minutes) and are not reusable. Your application should exchange them for access tokens promptly.\nA redirect_uri that does not match the one used when making the initial authorization request can also cause this error. To resolve this, use the same redirect_uri in both operations.\nYou may also see this when you refresh an access token if you provide an expired, revoked, or otherwise invalid refresh token.\nCalling the SKY API\ninvalid subscription key \"Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription.\" When making calls to the SKY API, be sure to provide either your primary or secondary subscription key with the request.\nThe subscription key represents a subscription to a specific SKY API product and is associated with your developer account. To get a subscription key, you'll need to sign up for a Blackbaud developer account and get an approved subscription. Once you have an approved subscription, you can view the subscription keys within your profile. The subscription key value is passed with each request to the SKY API via the Bb-Api-Subscription-Key request header. See Getting Started for instructions on how to obtain a subscription key and an example of using the subscription key in a call to the API.\nmissing/invalid authorization header \"The required Authorization header was missing or invalid, or the token has expired\" Missing Token\nWhen making calls to the API, you need to provide an access token obtained using OAuth 2.0. The access token allows you to make requests to the SKY API on a behalf of a user. When calling the API, be sure to supply the Authorization request header with a value of Bearer, followed by a space and the access_token value.\nIt's a common mistake to forget to prepend the access_token value with Bearer. Be sure to include a space between Bearer and the access_token value.\nSample request:\nGET https://api.sky.blackbaud.com/constituent/constituents/280 HTTP/1.1\nHost: api.sky.blackbaud.com\nAuthorization: Bearer eyJ0eXAiOiJKV1...CTtP0CQ\nBb-Api-Subscription-Key: 77f137116...480d633 Expired Token\nThe access token expires in 60 minutes. With the Authorization Code Flow, each time you refresh your tokens, you'll get a new access and refresh token. Refresh tokens will also expire, but after a much longer period of time (currently, 60 days). Using a sliding window, each time you exchange your refresh token for a new access token, we will issue a new refresh token as well. As long as your application connects to the SKY API at least once within the window, you will be able to continue to access the Blackbaud customer's data indefinitely (or until they deactivate your application).\nIf your access token and refresh token have expired, the user will have to re-authenticate and consent. "
  },
  {
   "name": "Implicit Flow",
   "description": "The Implicit Flow is carried out client-side within a browser-based app. Since the code is available to the browser, the <%= stache.config.guide_apps_client_secret_name %> cannot be kept a secret and is not used to request an access token.  As a result, the access tokens that are issued are short-lived and there are no refresh tokens to extend them when they expire.",
   "layout": "layout-tutorial",
   "order": 150,
   "published": true,
   "showInNav": true,
   "title": "Implicit Flow",
   "sidebarLayoutSecondaryColumn": "col-lg-2 col-md-3 col-sm-12 sidebar-tutorial",
   "sidebarLayoutPrimaryColumn": "col-lg-8 col-md-8 col-sm-12",
   "bootstrap_container": "bg-tutorial",
   "markdown": false,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Authorization Implicit-flow",
   "abspath": "docs/authorization/implicit-flow/index.md",
   "uri": "/docs/authorization/implicit-flow/",
   "text": " Comments Edit in GitHub Implicit Flow Introduction The implicit grant is meant for applications where API calls are made from the client, typically within a browser using JavaScript. Since API calls are made from the client, they are inherently less secure and do not involve the exchange of an application secret. The access tokens that are issued are short-lived and no refresh tokens are provided, so the user must re-authorize your application when the token expires.\nLike the Authorization Code Flow, the implicit flow starts by redirecting the user's browser from your application to our Authorization URL. The user will login (using the Blackbaud or Google credentials), confirm that it's OK for your application to access their data, and then we'll redirect back to you with an access token that you can immediately use when making API calls on that user's behalf.\nSince this is a redirection-based flow, your application must be able to interact with a web browser and receive incoming requests (via redirection) from our OAuth endpoints. Step 1 – Request authorization Initiate the authorization process by redirecting the user's browser to our authorization endpoint. You can choose to do this as a step in your application's login process or in response to some user action in your app (like a button click):\nhttps://oauth2.apim.blackbaud.com/authorization When navigating, you'll need to include a few parameters in the query string. These parameters are fully described in RFC-6749 section 4.1.1: Query parameter Description client_id Required. The Application ID value that we provide when you register your application. This value uniquely identifies your application. See RFC-6749 section 2.2. response_type Required. The value must be set to token. This indicates that the access token should be returned in the fragment of the redirect URI. redirect_uri Required. The URI to redirect to after the user grants or denies permission to your app. This value must exactly match one of the Redirect URI values you specify when you register your application, including any capitalization, trailing slashes, etc. See RFC-6749 section 3.1.2. state Optional, but recommended. The state parameter is an opaque value that you can provide when requesting authorization that will be echoed back to you when the user grants or denies permission to your app. You can then validate this parameter to ensure that an incoming redirect is the result of an authentication request that originated in your application. This provides protection against Cross-Site Request Forgery (CSRF) attacks. You can also use this parameter to maintain some state between the authorization request you initiate and the incoming navigation to your redirect URI for the purposes of returning the user to tbe most appropriate location within your app. See RFC-6749 section 10.12 environment_id Optional. The environment_id parameter can be used to filter the list of eligible environments shown during the user authorization step. This filter is useful when the user is already operating in the context of an environment, such as within a SKY API user interface add-in. We'll have more information on environments and add-ins in the near future. Note: to facilitate local development, we allow the use of http and localhost or the localhost IP (127.0.0.1). In production however, we require the use of https for proper security when redirecting. A sample authorization request looks like this (with extra line breaks for display purposes only):\nhttps://oauth2.apim.blackbaud.com/authorization?\nclient_id=E140BF29-A528-4048-91A9-83BCB01B7FE2\n&response_type=token\n&redirect_uri=https://www.example.com/oauth2/callback\n&state=fdf80155 Step 2 – User authorization In this step, we'll ask the user to log in (using their Blackbaud or Google credentials). We'll then ask them if it's ok for your application to access their Blackbaud data: If the user has access to more than one customer's data, they'll select the customer (tenant) to which they are giving your app permission. Step 3 – Access token provided After the user grants (or denies) your authorization request, we'll redirect the browser to the redirect_uri that you specified in the request (in the above example, we'll redirect the browser back to your application at https://www.example.com/oauth2/callback).\nIf the user granted your app permission, the URL fragment will contain the following fields: Field Type Description access_token string An access token to be used when making calls to the SKY API. The access token should be provided in the standard Authorization header in the form of Bearer token (note the separating space). token_type string Indicates the type of token issued, and will always contain the value bearer. expires_in integer The time period (in seconds) in which the access token is valid. state string The value of the state parameter you supplied in the initial authorization request. tenant_id string The ID of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. tenant_name string The name of the specific Blackbaud customer (tenant) whose data can be accessed using the access token. When the user grants permission to your application, they do so in the context of their organization. The tokens we issue can only be used to access that customer's data. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. legal_entity_id string The legal entity identifier. A legal entity represents a Blackbaud client (organization or individual) who can try out or purchase the products, services, and solutions Blackbaud provides. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. legal_entity_name string The name of the legal entity. environment_id string The environment identifier. An environment is a logical group of products and service instances that a legal entity is entitled to. We provide this value to you for informational purposes only - it is not used when calling the SKY API. You may store this value in your application along with the user's access token. environment_name string The name of the environment. user_id string The unique identifer of the authenticated Blackbaud user in whose context the access token is issued. This value can be used to correlate Blackbaud users with users in external systems. Reminder: The Implicit Grant Flow provides a short-lived access token that expires in 60 minutes. A refresh token is not provided, so when the token expires your application should re-authorize the user again. Successful redirect response example (with extra line breaks for display purposes only):\nhttps://www.example.com/oauth2/callback#\naccess_token=1d57284f025...4975d\n&token_type=bearer\n&expires_in=3600\n&state=fdf80155\n&tenant_id=E27DD7B6-6B71-4689-8B2C-60A74F243966\n&tenant_name=Raiser%27s%20Edge%20NXT%20-%20Blackbaud%20%28Developer%20Sandbox%29\n&legal_entity_id=p-AaBbCcDdEeFfGg987654321\",\n&legal_entity_name=Blackbaud%20Developer%20Sandbox\n&environment_id\":\"p-abcdef1234567890ABCDEFG\",\n&environment_name=Blackbaud%20Developer%20Sandbox%20Environment If the user denied your permission request, the query string will contain the following parameters: Query parameter Description error The reason that authorization failed (for example, access_denied). state The value of the state parameter you supplied in the initial authorization request. For example (with extra line breaks for display purposes only):\nhttps://www.example.com/oauth2/callback?\nerror=access_denied\n&state=fdf80155 For more information on commonly encountered authorization problems, see common authorization issues. Step 4 – Call the SKY API The access token allows you to make requests to the SKY API on a behalf of a user. When calling the API, provide the access token using the standard Authorization request header with a value of Bearer, followed by a space and the access_token value.\nYou will also need to provide your subscription key to the SKY API via the Bb-Api-Subscription-Key header. You can use either the primary or the secondary key (both are equally functional), and both can be found on your developer profile page.\nFor more information on providing these headers, see request headers.\nSample Request\nGET https://api.sky.blackbaud.com/constituent/constituents/280 HTTP/1.1\nHost: api.sky.blackbaud.com\nAuthorization: Bearer eyJ0eXAiOiJKV1...CTtP0CQ\nBb-Api-Subscription-Key: 77f137116...480d633 Step 5 – Next steps For more information on implementing the implicit flow, check out our code samples. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Basics",
   "description": "Docs to learn our APIs.",
   "order": 400,
   "published": true,
   "showInNav": true,
   "showInHeader": true,
   "showInFooter": true,
   "back_to_top": true,
   "title": "Basics",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInSearch": true,
   "breadcrumbs": "Docs Basics",
   "abspath": "docs/basics/index.md",
   "uri": "/docs/basics/",
   "text": " Comments Edit in GitHub Basics\nThe following information provides an overview of some key concepts within the SKY API. We'll assume you have some familiarity with RESTful programming concepts and the associated tools and techniques for consuming web services.\nBase URL\nAll endpoints within the SKY API are located at the following base URL:\nhttps://api.sky.blackbaud.com Within this address, you'll find APIs (collections of related endpoints) covering the broad functional areas within the SKY API. For example, we currently surface the following APIs: API Location Purpose Accounts Payable /accountspayable Used to manage accounts payable, including vendors and invoices. Constituent /constituent Used to manage constituent information, including related entities such as addresses, phones, emails, and notes. Fundraising /fundraising Used to manage information within the fundraising hierarchy and related entities such as campaigns, funds, and appeals. General Ledger /generalledger Used to manage the general ledger, including accounts, projects, and journal entries. Gift /gift Used to manage gift information, including related entities such as acknowledgements, fundraisers, and receipts. Opportunity /opportunity Used to manage opportunity information, including related entities such as opportunity fundraisers and opportunity attachments. Treasury /treasury Used to manage Treasury information, including related entities such as adjustments, checks, and deposits. Within each API, you'll find domain-specific endpoints that allow you to access data and perform operations like searching for records, updating information, etc. The SKY API is based on REST principles, where resources are accessed via standard requests to an API endpoint.\nScheme\nFor security, the SKY API communicates exclusively over HTTPS.\nSubscription\nIn order to call the SKY API, you'll need a subscription associated with your developer account. This subscription represents our permission for you to call the API, and you'll include your subscription key in the Bb-Api-Subscription-Key header on every request (see request headers).\nTo obtain a subscription, visit the Products page, select SKY API Standard Edition and click Review terms and subscribe to initiate the request process. You must review all the terms by scrolling down the page before you can agree to the terms and subscribe.\nYou will receive an email notification when your request is approved, and you'll be able to locate your subscription details within your developer profile.\nNote: Currently, SKY API access is limited to Blackbaud Partners and customers using Raiser's Edge NXT or Financial Edge NXT. Subscription requests are reviewed and must be approved by Blackbaud. If you are interested in using SKY API to build an integration for a specific customer, contact that organization's administrator to receive a user invite for the Blackbaud product. If you are interested in using SKY API to build an integration for multiple customers, we encourage you to become a partner. Why two subscription keys?\nBlackbaud provides two subscription keys labeled primary key and secondary key. You are free to use either in your requests to the API. As a security best practice it’s a good idea to rotate which key your applications use when calling the API. This mitigates the risk of a compromised key. Blackbaud won’t mandate a key rotation schedule. You are free to adopt a rotation strategy that best fits your needs. We also give you a mechanism to regenerate the keys associated with your subscription(s) in your Developer account profile.\nAuthorization\nAll endpoints within the SKY API require user-authorization, so in addition to a subscription key you'll also need to supply an OAuth 2.0 access token to access a specific Blackbaud customer's data. This token can be obtained through the authorization process, and should be included on every request as part of the Authorization header (see request headers).\nNote: The token should be considered an opaque value and is tied to the authenticated user's account and organization. This means that your application can only access data to which the authenticated user has permission. HTTP verbs\nThe SKY API is designed to have predictable, resource-oriented URLs to make learning easier. Where possible, the API strives to use the appropriate HTTP verb for each action: Verb Description GET Used to retrieve resources. POST Used to create resources. PATCH Used to update the properties of a resource. DELETE Used to delete resources. Request headers\nThe following request headers are required when calling the SKY API: Bb-Api-Subscription-Key - This is your API subscription key, which represents Blackbaud's permission to you to call the SKY API. You can use either the primary or the secondary key associated with your subscription (both are equally functional). For more information on obtaining an API subscription, see subscription.\nAuthorization - This value is an OAuth 2.0 Bearer token, which is obtained during the authorization process and represents a Blackbaud customer's permission for you to access their data. The expected format of this header value is \"Bearer token\" (note the space in the middle). For endpoints that accept JSON in the request body, the Content-Type request header with a value of application/json is required.\nContent types\nUnless otherwise noted, all endpoints within the SKY API accept and return data formatted as JSON. The Content-Type request header with a value of application/json is required when providing content on the body of a request.\nRegenerate your app secret\nIf you think your Application secret has been compromised, follow these steps to regenerate the value: Go to My Applications. Locate the application in the list. Select the context menu and click Regenerate secret. Select Show to display the regenerated secret. Be sure to store the new secret securely. Important! Don't forget to update your application to use the regenerated value when requesting access during the authorization process. Response status codes\nThe SKY API uses the following set of standard HTTP response status codes, as defined in RFC 2616 and RFC 6585. Response codes in the 4xx range indicate a problem with your request, while response codes in the 5xx range indicate a problem on our end.\nYou can view the common authentication issues page for additional guidance, and if you are experiencing a problem, feel free to review your support options in our Support area. You can also check the Issues page to see if we are experiencing any problems on our end.\nFor response codes in the 4xx or 5xx range (which indicate failures), the response body may contain more details on why the request failed.\nStatus codes Status code Description 200 OK The request was successful, and you can read the results from the body and headers of the response. For operations that create new resources, you'll typically find the ID of the newly created resource in the response body. For simplicity, we don't distinguish between successful calls that create, update, or delete resources. 400 Bad Request The request failed due to an error on your part, such as a syntax error or malformed content in the request body. 401 Unauthorized The request failed because the required authorization was not satisfied. This could be because you provided an invalid subscription key (see subscription), or an invalid or expired access token (see common authentication issues). 403 Forbidden The request failed because the user in whose context the API is being called either does not have permission to perform the operation itself, or does not have permission to access the data being requested. You may also see this response when the API quota associated with your subscription has been met (see quota). 404 Not Found The requested resource could not be found. You may be trying to access a record that does not exist, or you may have supplied an invalid URL. 415 Unsupported Media Type The request failed because the correct Content-Type header was not provided on the request. For endpoints that accept JSON in the request body, you must use the Content-Type header application/json. 429 Too Many Requests You will see this response if you've exceeded the rate limit associated with your API subscription (see rate limits). 500 Internal Server Error An unexpected error has occurred on our side. You should never receive this response, but if you do please let us know and we'll fix it. 503 Service Unavailable One or more API services are not available. This is usually a temporary condition caused by an unexpected outage or due to planned downtime. We'll be proactive about broadcasting outages or downtime on the Issues page, so check there for more information. Rate limits\nCalls to the SKY API are subject to the rate limit associated with your API subscription (see subscription).\nRate limits help us to keep our backend servers from being overloaded with too many requests in a short period of time by limiting the number of calls you can make within that period. When your rate limit is exceeded, you'll receive a 429 - Too Many Requests response from the API, and the body of the response will indicate how long you must wait before making the next call (you can also inspect the Retry-After header which will contain the number of seconds to wait):\nRetry-After: 1\nDate: Tue, 06 Dec 2016 19:47:44 GMT\nContent-Length: 83\nContent-Type: application/json { \"statusCode\": 429, \"message\": \"Rate limit is exceeded. Try again in 1 second.\"\n} The current rate limit for the SKY API Standard Edition is 5 calls per second. Quotas\nCalls to the SKY API are subject to the quota associated with your API subscription (see subscription).\nQuotas allow us to enforce an appropriate level of API use over a broad period of time by limiting the number of calls you can make within that period. When your quota is reached, you'll receive a 403 - Quota Exceeded response from the API, and the body of the response will indicate how long you must wait before the quota period renews (you can also inspect the Retry-After header which will contain the number of seconds to wait):\nRetry-After: 406\nDate: Tue, 24 May 2016 19:47:44 GMT\nContent-Length: 83\nContent-Type: application/json { \"statusCode\": 403, \"message\": \"Out of call volume quota. Quota will be replenished in 00:06:46.\"\n} The quota enforced for the SKY API Standard Edition is 25,000 calls per day. If you need to increase your quota, please fill out our request form. Pagination\nMany endpoints in the SKY API return a collection of records. In some cases (such as the Constituents (Get List) endpoint), we also support the concept of pagination, where instead of returning all of the results in a single response, we return them in smaller sets called pages. This approach allows us to keep the performance high on the server, and also minimizes the size of our responses on the wire by breaking them into smaller, more manageable blocks.\nlimit and offset\nWhen an endpoint supports pagination, it will accept limit and offset query string parameters to allow you to control the paging. The limit parameter represents the number of records to return (page size), while the offset parameter represents the number of records to skip.\nHere's an example request for returning the first 50 constituents via the Constituents (Get List) endpoint and the limit query string parameter:\nGET https://api.sky.blackbaud.com/constituent/constituent?limit=50 To retrieve the next 50 records, include offset=50 to skip the first 50 records:\nGET https://api.sky.blackbaud.com/constituent/constituent?limit=50&offset=50 To retrieve the next 50 records, include offset=100 to skip the first 100 records:\nGET https://api.sky.blackbaud.com/constituent/constituent?limit=50&offset=100 Note that offset numbering is zero-based, and that omitting the offset parameter will return the first n elements (where n represents the limit parameter). Refer to the endpoint documentation for specifics about any default/maximum allowed page size values.\nnext_link\nSome paginated endpoints may include a hypermedia link that can be used to fetch the next page of results. This value can be found in the next_link property of the collection response.\nDate formats\nUnless otherwise specified, dates are represented within the SKY API in ISO 8601 format. Some endpoints may further support time components or Coordinated Universal Time (UTC) format. Refer to the specific endpoint documentation for details on what date formats are supported.\nNote that fuzzy dates are handled differently from the ISO-8601 standard. For more information on fuzzy dates, see fuzzy dates.\nFuzzy dates\nFuzzy dates are found on entities with date-like properties where the complete date may be unknown. They are represented in the SKY API as a JSON object with 3 fields for the year, month, and day components: y,m,d.\nFuzzy date fields generally allow the following formats: month, day, and year\nmonth and year\nyear only Some entities may support additional formats, so be sure to reference the specific documentation for an endpoint that accepts or returns a fuzzy date.\nFor example, the constituent entity birthdate field is a fuzzy date that supports \"month and day\" as well as the above formats. In the below sample JSON representation, only the y property of the fuzzy date is shown which indicates that only the year value is known:\nDate: Tue, 24 May 2016 19:47:44 GMT\nContent-Type: application/json; charset=utf-8 { \"id\": \"280\", \"type\": \"individual\", \"lookup_id\": \"96\", \"inactive\": false, \"name\": \"Dr. Robert C. Hernandez\", \"last\": \"Hernandez\", \"first\": \"Robert\", \"middle\": \"Carlos\", \"nickname\": \"Bob\", \"title\": \"Dr.\", \"gender\": \"male\", \"birthdate\": { \"y\": 1961 }\n} The following example shows a partial collection of notes for a constituent. The date property is a fuzzy date, and in the first note the value represented is June, 2007.\nDate: Tue, 24 May 2016 19:47:44 GMT\nContent-Type: application/json; charset=utf-8 { \"count\": 25, \"value\": [ { \"id\": \"12\", \"type\": \"Address Changes\", \"date\": { \"y\": 2007, \"m\": 6 }, \"summary\": \"Vacation\", \"text\": \"Dr. Hernandez has purchased a vacation home in Arizona.\" }, { \"id\": \"10\", \"type\": \"Career\", \"date\": { \"y\": 2006, \"m\": 6, \"d\": 11 }, \"summary\": \"Opening of Pediatric Clinic with Partner\", \"text\": \"Dr. Hernandez plans to leave the pharmaceutical company to open a practice with his former colleague.\" }, ... ]\n} Fuzzy dates are not traditional dates and do not conform to the ISO 8601 standard. For additional information about fuzzy dates, see the entity reference.\nSecurity\nWhen calling the SKY API or when manually working with data in the underlying products, remember that specific operations and access to data follow the same rules. Required fields on records, business rules, and your user security (including advanced security) are all considered. For further information, review endpoint descriptions.\nActivating the SKY API Console The SKY API Console is a Blackbaud application built into the Endpoint Reference that can be used to test the SKY API. Before jumping in to build your own applications, we recommend you add the SKY API Console to your or your customer's tenant to aid with testing and development. To access a tenant's data, the SKY API Console, must be approved by a tenant administrator. For Blackbaud customers, a tenant administrator is a user within the organization that is part of the Supervisor security group. This may include Partners or API subscribers that have their own dedicated tenant, or are Supervisor users in their customer's tenant. Administrators provide approval for applications, including the SKY API Console, by activating the application within the Applications area of the product. To activate the SKY API Console, the tenant administrator needs to do the following: Copy the SKY API Console Application ID:A056CA6B-A3A8-4AC7-B325-997666306E52 Visit the Control Panel, Applications area of the product. Select Add application, paste the SKY API Console Application ID, and select Save. Once added, The SKY API Console will appear in the list of activated applications for the tenant. Important! The same process can be followed to activate additional applications for your tenant. Simply substitute the application ID for the one provided in the My Applications area of your Developer Account to add your own application, or use the application ID provided to you by a Partner or third party developer that you know and trust. Breaking changes\nBreaking changes are any changes that could potentially cause failures in applications that consume SKY API. If an API change could cause API calls to fail or return different results than before, then we consider it a breaking change. This includes changes to entities such as new data types or property names, changes to response data types or status codes, and changes to result sets for collection endpoints. We strive to avoid breaking changes if at all possible, so breaking changes are few and far between. However, they are sometimes necessary. We only make breaking changes when we determine that they are critical, and we weigh the disruption that the breaking changes will cause. We strive to be transparent about these changes, and we announce them in a changelog on the SKY API website and in the Community blog at least one week before we deploy to give consumers of the API time to assess the impact of the changes, to raise any questions, and to plan accordingly.\nFor more information about how we define and handle breaking changes, please see the breaking changes post in the Community blog. "
  },
  {
   "layout": "layout-showcase",
   "order": 500,
   "name": "Code Samples",
   "description": "A listing of helpful code samples.",
   "icon": "fa fa-github fa-4x",
   "showInNav": true,
   "showInHeader": true,
   "showInFooter": false,
   "showBreadcrumbs": true,
   "title": "Code Samples",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInSearch": true,
   "breadcrumbs": "Docs Code",
   "abspath": "docs/code/index.md",
   "uri": "/docs/code/",
   "nav_links": [
    {
     "name": "App Showcase",
     "layout": "layout-container",
     "description": "A collection of fully-formed applications that can assist in quick-starting your own SKY API applications",
     "order": 3,
     "icon": "fa fa-fw fa-3x fa-cube",
     "showBreadcrumbs": true,
     "title": "App Showcase",
     "appShowcase": [
      {
       "title": "Barkbaud (NodeJS)",
       "icon": "fa-cube",
       "repo": "<%= stache.config.github_repo_barkbaud_nodejs %>",
       "description": "A full-stack NodeJS application that demonstrates how to access constituent data via SKY API, implements a front-end using SKY UX, and negotiates security using OAuth 2.0 Authorization Code Flow",
       "demo": "<%= stache.config.tutorial_barkbaud_live_demo %>"
      }
     ],
     "sortKey": "order",
     "sortDirection": "asc",
     "showInNav": true,
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Code App-showcase",
     "abspath": "docs/code/app-showcase/index.md",
     "uri": "/docs/code/app-showcase/",
     "text": " App Showcase Barkbaud (NodeJS) A full-stack NodeJS application that demonstrates how to access constituent data via SKY API, implements a front-end using SKY UX, and negotiates security using OAuth 2.0 Authorization Code Flow View on GitHub View live demo "
    },
    {
     "name": "Authorization Code Flow",
     "description": "Quick-start code samples for Authorization Code Flow",
     "layout": "layout-showcase",
     "showBreadcrumbs": true,
     "icon": "fa fa-fw fa-3x fa-lock",
     "title": "Authorization Code Flow Code Samples",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInNav": true,
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Code Auth-code-flow",
     "abspath": "docs/code/auth-code-flow/index.md",
     "uri": "/docs/code/auth-code-flow/",
     "nav_links": [
      {
       "layout": "layout-container",
       "name": "C# .NET Core",
       "title": "Authorization Code Flow - C# .NET Core",
       "icon": "fa fa-fw fa-3x fa-windows",
       "description": "Learn how to create a .NET Core MVC C# server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
       "order": 1,
       "published": true,
       "showInNav": true,
       "showBreadcrumbs": true,
       "tutorial": true,
       "back_to_top": true,
       "redirectUrl": "http://localhost:5000/auth/callback",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Code Auth-code-flow C-sharp",
       "abspath": "docs/code/auth-code-flow/c-sharp/index.md",
       "uri": "/docs/code/auth-code-flow/c-sharp/",
       "text": " Comments Edit in GitHub Authorization Code Flow - C# .NET Core GitHub Live Demo\nOverview\nWe use OAuth 2.0 to secure access to a user's SKY API data. In this tutorial we obtain user authorization using the Authorization Code Flow. From the user's perspective, the user authenticates as a Blackbaud user with the normal credentials for Blackbaud NXT and then authorizes (or denies) your application. To accomplish this, your application obtains an authorization code from the Blackbaud Authorization Service. The authorization code is then exchanged for an access token that signs requests to the SKY API on behalf of the user. The exchange involves your registered application's Application secret. For security reasons, the exchange is done through direct server-to-server communication. For this reason, we use ASP.NET Core for the server-side platform and C#.\nIn this tutorial, we will accomplish the following tasks: Ensure that you signed up for a developer account and obtained your subscription to an API product.\nRegister an application with SKY API.\nObtain authorization to access user data for a specific tenant.\nRetrieve data from a SKY API endpoint. For this tutorial, we strip down the user interface to highlight the Authorization Code Flow. Our Barkbaud code sample provides a rich user interface using SKY UX.\nPrerequisites Since we are using the Authorization Code Flow, we need to use a server-side software platform, such as .NET Core. You will need to Download and install .NET Core\nFamiliarity using a command line interface (CLI) such as Terminal or Windows Command Prompt.\nSign up for a GitHub account, if you don't already have one. The source code for this tutorial is stored in GitHub repository.\nInstall Git and have the ability to clone or fork a repo.\nA reliable Internet connection. Step 1 — Get Your Keys\nIf you have not already done so, complete the Getting Started guide. The tutorial guides you through signing up for a Blackbaud developer account and requesting a subscription to an API product. After you are approved, your subscription contains a Primary key and Secondary key. You can use either key as the subscription key value for the Bb-Api-Subscription-Key request header in calls to the API.\nDeveloper Sandbox Tenant\nAfter your subscription is approved, your developer account can access the Developer Sandbox tenant that represents a sample database. With this particular tenant, keep in mind that you share this sandbox with other developers. You can access the Developer Sandbox tenant and learn the various endpoints through the interactive SKY API Console within the API Reference.\nStep 2 — Register Your App\nTo call the SKY API, first register your application to obtain its unique set of credentials, which your users will use to enable your app to access their data From My Applications, click Register app. Enter the name, description, and logo of your application, as well as your organization's name. This information appears for users when they enable access to your application during the authorization process or in their product. In the Application website URL field, enter where users can learn more about your application online. Specify the URIs to use to redirect users back to your application during the authorization process. Note: The URIs must be absolute and use HTTPS. However, we do support http://localhost:port or http://127.0.0.1:port for local development. Important! When your application requests authorization to access a Blackbaud user's data, it includes a redirect_uri parameter in its query string. To authorize your application, this value must match exactly against one of the URIs you provide, including any trailing slashes. For more information, see common authorization issues. Click Save. After you register an app, note the ID and secret that appear under Application Credentials. These credentials are unique to your application, and verify its identity during the authorization process. ID -Your application's unique identifier. Your users will need this ID to enable your application to access their Blackbaud data. You can't modify this ID; if you need to change it for any reason, delete the application and re-register it. Secret -The key your application provides when it requests an access token to call the SKY API during the authorization process. This value is sensitive, so don't share it with anyone else! To display the secret, click Show. Very Important! Keep the application secret private and safe! If the secret is compromised, regenerate it. Blackbaud reserves the right to remove or deactivate your application to protect customer data. Step 3 — Grab the Source Code\nThe sky-api-auth-tutorial-c-sharp repo on GitHub provides a starter project to work through the Authorization Code Flow. Use a command prompt to clone the sky-api-auth-tutorial-c-sharp repo which creates a working directory by the same name that contains the code for the tutorial: $ git clone https://github.com/blackbaud/sky-api-auth-tutorial-c-sharp.git Step 4 — Prepare Your Environment\nLet's explore some application settings files and prep your environment variables. Open the sky-api-auth-tutorial-c-sharp working directory.\nOpen the appsettings.json which details generic properties to be used by the application. Take note of the following SKY API URI property values: AuthBaseUri URI to the Authorization Service. SkyApiBaseUri URI to the SKY API Endpoints. For local development, duplicate the file appsettings.json-sample, renaming it to appsettings.Development.json. The appsettings.Development.json file contains your registered application's environment variables. Note that private properties, such as your Application ID and Application secret, are stored in this file. For security, the appsettings.Development.json is excluded from being syncronized with GitHub via the file .gitignore. At run time, the application will merge these properties into the available environment variables. In .NET Core, the Startup class, Startup.cs provides the entry point for an application, and is required for all applications. This class configures the application and sets up the required middleware. { \"AppSettings\": { \"AuthClientId\": \"\", \"AuthClientSecret\": \"\", \"AuthRedirectUri\": \"http://localhost:5000/auth/callback\", \"AuthSubscriptionKey\": \"\" }\n} Using the values from your registered application and the subscription key from your Blackbaud Developer Profile, update appsettings.Development.json with the following values. All values are required.: AuthClientId Your registered application's Application ID. AuthClientSecret Your registered application's Application secret. AuthRedirectUri One of your registered application's Redirect URIs. For this tutorial, we will use http://localhost:5000/auth/callback. AuthSubscriptionKey Your Blackbaud Developer Subscription Key. Use either the Primary key or Secondary key, visible on your Blackbaud Developer Profile. Save the file. Step 5 — Run the Application Using Command Prompt/Terminal/bash prompt, ensure you are in the working directory.\nOpen and review the project.json file. This file details the application’s dependencies. These NuGet modules (project dependencies) are installed when issuing the dotnet restore command within Command Prompt/Terminal/bash prompt.\nOn a Mac, issue the following commands to restore the packages specified in the project.json file and run the actual sample:\n$ dotnet restore\n$ export ASPNETCORE_ENVIRONMENT=Development && dotnet run On a PC, type:\n$ dotnet restore\n$ set ASPNETCORE_ENVIRONMENT=Development && dotnet run Visit http://localhost:5000/ to view your locally running application. Application Starting Point IIS is used as the webserver. An ASP.NET Core Module configured in project.json is used to list dependencies and configure IIS to launch and host your application.\nOpen the Program.cs file. The Main() method is the starting point of our application. It is responsible for initializing the application. We use WebHostBuilder to listen on a particular IP address and port: http://localhost:5000/. As of RC2 an ASP.NET Core application is a .NET Core Console application that calls into ASP.NET specific libraries. This code runs on the server-side and is not visible to the application user. Running the code server-side helps to protect your Application secret.\nusing System.IO;\nusing Microsoft.AspNetCore.Hosting; namespace Blackbaud.AuthCodeFlowTutorial\n{ public class Program { public static void Main(string[] args) { var host = new WebHostBuilder() .UseKestrel() .UseContentRoot(Directory.GetCurrentDirectory()) .UseIISIntegration() .UseStartup() .Build(); host.Run(); } }\n}\nOpen your browser to http://localhost:5000/ to request the Home page. When the front page loads, the AngularJS on the Home page (/Views/Shared/_Layout.cshtml) makes a request to the /auth/authenticated endpoint:\n(function (angular) { 'use strict'; angular.module('AuthCodeFlowTutorial', []) .controller('ConstituentCtrl', function ($scope, $http) { // Check user access token. $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } ...\nThe call to the endpoint routes to the corresponding controller (/Controllers/AuthenticationController.cs) and returns a Boolean representing the current user's authentication status. If the application has not yet been authorized by the end user, then IsAuthenticated() will return false.\n[HttpGet(\"authenticated\")]\npublic ActionResult Authenticated()\n{ return Json(new { authenticated = _authService.IsAuthenticated() });\n}\n... Displaying the Log in button If the user is not authenticated, a Log in button is displayed.\nNote: The browser may display a warning that the connection is not private. For this tutorial, you can ignore this message. To proceed, click Show advanced and then click Proceed to localhost (unsafe). Open the Views/Shared/_Layout.cshtml file. Notice that the body tag includes an attribute named ng-app. The front-end of our application uses AngularJS to interact with our Web server routes. The div.container element includes an attribute named ng-controller which references an AngularJS controller to handle the model data.\n<body ng-app=\"AuthCodeFlowTutorial\"> <div class=\"container\" ng-controller=\"ConstituentCtrl\" ng-cloak> ...\nWhen the Home page first loads the app will not have received authorization from the user to access their SKY API data. As a result the isAuthenticated scope variable will be false and the Home page's Angular HTML template displays the Log in button:\n<div ng-if=\"!isAuthenticated\"> <a href=\"/auth/login\" class=\"btn btn-primary\">Log in</a>\n</div>\n... Obtain an Access Token Open /Controllers/AuthenticationController.cs.\nWhen the user clicks the Log in button, a call is made to LogIn() which redirects the browser to SKY API’s authorization endpoint to start the authentication and authorization process. The user must authenticate with their Blackbaud credentials (if they are not already signed in) and authorize your application to access their SKY API data.\n[HttpGet(\"login\")]\npublic ActionResult LogIn()\n{ Uri address = _authService.GetAuthorizationUri(); return Redirect(address.ToString());\n}\n...\nOnce authorized, SKY API redirects the user back to the /auth/callback URI with an authorization code. Once an authorization code has been obtained, it is exchanged the code for an access token. The app is then redirected back to the Home page. [HttpGet(\"callback\")]\npublic ActionResult Callback()\n{ string code = Request.Query[\"code\"]; _authService.ExchangeCodeForAccessToken(code); return Redirect(\"/\");\n}\n... Retrieve Constituent Data Open the Home page (Views/Shared/_Layout.cshtml).\nAngularJS again makes the request to auth/authenticated, which now returns true. Since the user is authorized, AngularJS then makes a request the application’s constituent API endpoint /api/constituents/280 to retrieve a constituent record:\nangular.module('AuthCodeFlowTutorial', []) .controller('ConstituentCtrl', function ($scope, $http) { // Check user access token. $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } // Access token is valid. Fetch constituent record. $http.get('/api/constituents/280').then(function (res) { $scope.constituent = res.data; $scope.isReady = true; }); }); ... The data is returned as JSON to the Home page where the model's data is projected through the view of the HTML template:\n<div ng-if=\"isAuthenticated\"> <h3>Constituent: </h3> <p> See <a href=\"/api/entity-reference/constituent\">Constituent</a> within the SKY API entity reference for a full listing of properties. </p> <p ng-if=\"::constituent.error\" ng-bind=\"::constituent.error\" class=\"alert alert-danger\"></p> <div ng-if=\"::constituent.id\" class=\"table-responsive\"> <table class=\"table table-striped table-hover\"> <thead> <tr> <th>Name</th> <th>Value</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>{{ constituent.id }}</td> </tr> <tr> <td>type</td> <td>{{ constituent.type }}</td> </tr> <tr> <td>lookup_id</td> <td>{{ constituent.lookup_id }}</td> </tr> <tr> <td>first</td> <td>{{ constituent.first }}</td> </tr> <tr> <td>last</td> <td>{{ constituent.last }}</td> </tr> </tbody> </table> </div>\n... Once the constituent information is retrieved and added to the front page, Log Out and Refresh Access Token buttons are displayed.\nOpen /Controllers/AuthenticationController.cs\nIf the user clicks Log Out, they are redirected to /auth/logout which destroys the access/refresh token stored in the browser’s session.\nIf the user clicks Refresh Access Token, AngularJS makes a request to /auth/refresh-token, which asks SKY API to return a refreshed access token, which is then stored in the browser’s session. That's it! Be sure to take a look at our other code samples.\nCheck out the README where you can view a live demo of the application hosted on Microsoft Azure.\nThe README also contains instructions for deploying to Azure App Services rather than your local development environment.\nYou can create an issue to report a bug or request a feature for this code sample. For all other feature requests, see ideas. "
      },
      {
       "layout": "layout-container",
       "name": "Chrome Extension",
       "title": "Authorization Code Flow - Chrome Extension",
       "description": "Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Authorization Code Flow.",
       "order": 2,
       "icon": "fa fa-fw fa-3x fa-chrome",
       "showInNav": true,
       "showBreadcrumbs": true,
       "back_to_top": true,
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Code Auth-code-flow Chrome-extension",
       "abspath": "docs/code/auth-code-flow/chrome-extension/index.md",
       "uri": "/docs/code/auth-code-flow/chrome-extension/",
       "text": " Edit in GitHub Authorization Code Flow - Chrome Extension GitHub\nLearn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Authorization Code Flow.\nView the source on GitHub "
      },
      {
       "layout": "layout-container",
       "name": "NodeJS",
       "title": "Authorization Code Flow - NodeJS",
       "description": "Learn how to create a NodeJS server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
       "order": 3,
       "icon": "fa fa-fw fa-3x fa-desktop",
       "published": true,
       "showInNav": true,
       "tutorial": true,
       "showBreadcrumbs": true,
       "back_to_top": true,
       "redirectUrl": "http://localhost:5000/auth/callback",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Code Auth-code-flow Nodejs",
       "abspath": "docs/code/auth-code-flow/nodejs/index.md",
       "uri": "/docs/code/auth-code-flow/nodejs/",
       "text": " Comments Edit in GitHub Authorization Code Flow - NodeJS GitHub\nOverview\nWe use OAuth 2.0 to secure access to a user's SKY API data. In this tutorial we obtain user authorization using the Authorization Code Flow. From the user's perspective, the user authenticates as a Blackbaud user with the normal credentials for Blackbaud NXT and then authorizes (or denies) your application. To accomplish this, your application obtains an authorization code from the Blackbaud Authorization Service. The authorization code is then exchanged for an access token that signs requests to the SKY API on behalf of the user. The exchange involves your registered application's Application secret. For security reasons, the exchange is done through direct server-to-server communication. For this reason, we use Node.js, a server-side platform.\nIn this tutorial, we will accomplish the following tasks: Ensure that you signed up for a developer account and obtained your subscription to an API product.\nRegister an application with SKY API.\nObtain authorization to access user data for a specific tenant.\nRetrieve data from a SKY API endpoint. For this tutorial, we strip down the user interface to highlight the Authorization Code Flow. Our Barkbaud code sample provides a rich user interface using SKY UX.\nPrerequisites A server such as your local machine that is capable of running Node.js.\nFamiliarity with Node.js, using NPM to install project dependencies, and environment variables including setting them in either an OSX/Linux or Windows environment.\nFamiliarity using a command line interface (CLI) such as Terminal or Windows Command Prompt.\nSign up for a GitHub account, if you don't already have one. The source code for this tutorial is stored in GitHub repository.\nInstall Git and have the ability to clone or fork a repo.\nA reliable Internet connection to clone the repo and install the project's dependencies. Step 1 — Get Your Keys\nIf you have not already done so, complete the Getting Started guide. The tutorial guides you through signing up for a Blackbaud developer account and requesting a subscription to an API product. After you are approved, your subscription contains a Primary key and Secondary key. You can use either key as the subscription key value for the Bb-Api-Subscription-Key request header in calls to the API.\nDeveloper Sandbox Tenant\nAfter your subscription is approved, your developer account can access the Developer Sandbox tenant that represents a sample database. Keep in mind that you share this sandbox with other developers. You can access the Developer Sandbox tenant through the interactive SKY API Console within the API Reference.\nStep 2 — Register Your App\nTo call the SKY API, first register your application to obtain its unique set of credentials, which your users will use to enable your app to access their data From My Applications, click Register app. Enter the name, description, and logo of your application, as well as your organization's name. This information appears for users when they enable access to your application during the authorization process or in their product. In the Application website URL field, enter where users can learn more about your application online. Specify the URIs to use to redirect users back to your application during the authorization process. Note: The URIs must be absolute and use HTTPS. However, we do support http://localhost:port or http://127.0.0.1:port for local development. Important! When your application requests authorization to access a Blackbaud user's data, it includes a redirect_uri parameter in its query string. To authorize your application, this value must match exactly against one of the URIs you provide, including any trailing slashes. For more information, see common authorization issues. Click Save. After you register an app, note the ID and secret that appear under Application Credentials. These credentials are unique to your application, and verify its identity during the authorization process. ID -Your application's unique identifier. Your users will need this ID to enable your application to access their Blackbaud data. You can't modify this ID; if you need to change it for any reason, delete the application and re-register it. Secret -The key your application provides when it requests an access token to call the SKY API during the authorization process. This value is sensitive, so don't share it with anyone else! To display the secret, click Show. Very Important! Keep the application secret private and safe! If the secret is compromised, regenerate it. Blackbaud reserves the right to remove or deactivate your application to protect customer data. Step 3 — Install Node.js\nAfter you have your subscription key, Application ID, and Application secret, it's time to establish your development environment. Since we are using the Authorization Code Flow, we need to use a server-side software platform. For this tutorial, we will use Node.js. Download and install Node.js. Use the default settings for your development environment.\nCreate a file named testserver.js and add the following code: // Create a very simple HTTP web server on your local machine. // Set up a HTTP Web server and client, require('http'). var http = require('http'); // createServer returns a new instance of the http server. // A function is used as a request listener. // req is an instance of the incoming request. // res is an instance of the server response. // When you browse to http://localhost:1337/, a 'request' event occurs and // \"Hello World\" is written from the HTTP Web server back to your browser. http.createServer(function (req, res) { res.writeHead(200, { 'Content-Type': 'text/plain' }); res.end('Hello World'); }).listen(1337, \"localhost\"); console.log('Server running at http://localhost:1337/'); Save the file in a folder named testnodejs. From a command prompt, change the directory to testnodejs and run the testserver.js file: $ cd testnodejs\n$ node testserver.js The Web server listens for requests on your localhost, port 1337. In a Web browser, navigate to localhost:1337. The Web server displays a page with with \"Hello World.\" To stop the Web server, type CTRL-C in the command line. Step 4 — Grab the Source Code\nThe sky-api-auth-tutorial repo on GitHub provides a starter project to work through the Authorization Code Flow. Use a command prompt to clone the sky-api-auth-tutorial. The following command creates a working directory named sky-api-auth-tutorial that contains the code for the tutorial: $ git clone https://github.com/blackbaud/sky-api-auth-tutorial.git Step 5 — Prepare Your Environment Open the sky-api-auth-tutorial working directory and copy the configuration file sky.env-sample as sky.env. The sky.env file contains the application's environment variables for NodeJS environments. Update sky.env with the following values: AUTH_CLIENT_ID Your registered application's Application ID (from Step 2). (See, Managing your apps.) AUTH_CLIENT_SECRET Your registered application's Application Secret (from Step 2). (See, Managing your apps.) AUTH_REDIRECT_URI One of your registered application's Redirect URIs (from Step 2). For this tutorial, enter http://localhost:5000/auth/callback. (See My Applications.) AUTH_SUBSCRIPTION_KEY Your Blackbaud Developer Subscription Key. Use either the Primary key or Secondary key, visible on your Blackbaud Developer Profile. PORT The Web server port that will run the application. For this tutorial, enter 5000. Save the environment file. Review the .gitignore file. The purpose of the file is to specify the untracked files to ignore. Note that any .env files are ignored. This prevents the environment files from being synced to GitHub and protects your registered application's keys and other sensitive data from being exposed. Step 6 — Install Dependencies From the working directory, run npm install to install the project dependencies.\nNPM is the package manager that comes bundled with Node.js (since you already installed Node.js, you also have NPM). The command npm install downloads any dependencies listed in the package.json file and adds them to the app's node_modules directory (this command also creates this directory if it doesn't already exist). Each dependency is represented as a child directory of node_modules. $ cd sky-api-auth-tutorial\n$ npm install After you run npm install, verify that the sky-api-auth-tutorial working directory contains the node_modules subfolder. npm install depends on a reliable Internet connection to install dependencies. If you have issues running the command, you can hard delete the node_modules folder and run npm install again. Step 7 — Run the Application Using Command Prompt/Terminal, ensure you are in the working directory.\nType npm start to start the application server at http://localhost:5000. $ npm start Application starting point Open the index.js file. This is the starting point of our application. This code runs on the server side and is not visible to the application user. The code performs the following:\nIt registers our application dependencies such as Express.\nIt handles authorization and user requests to the home page and data endpoints.\nIt creates a web server on your local machine at https://localhost:5000. To request the home page open your browser to http://localhost:5000/. It displays the authorization options. Your browser may display a warning that the connection is not private. For this tutorial, ignore this message. To proceed, click Show advanced, and then click Proceed to localhost (unsafe). Open the ui folder and the index.html file. This opens the home page for our application, where we can initialize our app and load assets to build our page. The body tag includes an attribute named ng-app. The front-end of our application uses AngularJS to interact with our Node.js server routes.\nBelow the body tag, the ng-view tag is used as a hook for our Angular Router to load our desired template view.\n<!-- INITIALIZE THE APP -->\n<body ng-app=\"AuthCodeFlowTutorial\"> <!-- LOAD OUR VIEWS --> <ng-view></ng-view> ... Set up the router Open the app folder and the main.js file. Our application's logic lives here.\nFirst, we declare our angular module and inject the ngRoute dependency.\nangular.module('AuthCodeFlowTutorial', ['ngRoute'])\nNext, we initialize our Angular Router to manage our views and controllers. angular.module('AuthCodeFlowTutorial', ['ngRoute']) .config(function ($routeProvider) { $routeProvider .when('/home', { templateUrl: './app/main-template.html', controller: 'MainController' }) .when('/auth-success', { template: 'Login Successful', controller: 'AuthController' }) .otherwise({ redirectTo: '/home' }) In this example, we use two views and two controllers. As your app grows, you can add more views and controllers. Display the authorize buttons Open the app folder and the main-template.html file. This is our application's core view.\nThe main.js file holds the logic to initiate our AngularJS Controllers and our Angular Router.\nJust after the page title, the authorize buttons reference the server's authorization endpoint. When a user clicks one of these buttons, the authorization process begins. When a session is authenticated, the authorize buttons are hidden. The Authorize using redirect button initiates the authorization process by redirecting the browser to the authorization endpoint to initiate the authentication process.\n<div ng-if=\"!isAuthenticated\" class=\"col-sm-12 well\">\n...\n<div class=\"col-sm-5 well login-options\"> <span class=\"login-options-label\">Login using redirect</span> <a href=\"/auth/login\" class=\"btn btn-primary btn-block btn-lg\">Log in</a>\n</div> The Authorize using popup button opens a popup window that is directed to the server's authorization endpoint to initiate the authentication process.\n<div ng-if=\"!isAuthenticated\" class=\"col-sm-12 well\">\n...\n<div class=\"col-sm-5 col-sm-offset-2 well login-options\"> <span class=\"login-options-label\">Login using popup</span> <button ng-click=\"popupLogin()\" class=\"btn btn-primary btn-block btn-lg\" target=\"login-iframe\">Log in</button>\n</div> Using the popup option, our Angular code performs the following actions: It calls the popupLogin() method. This method opens a window at the specified URL, and we pass in a ?redirect= parameter and set it to the hash /%23/auth-success, which translates to:/#/auth-success.\n.controller('MainController', function ($scope, $http, $window) {\n...\n$scope.popupLogin = function () { var popup popup = window.open('auth/login?redirect=/%23/auth-success', 'login', 'height=450,width=600,'); if (window.focus) { popup.focus(); }\n} When the browser redirects to the /#/auth-success, the AuthController closes the current window and redirects the browser to the route '/' so our router will redirect the page to #/home.\n.controller('AuthController', function ($window) { ... $window.opener.location = '/'; $window.close();\n}) The JavaScript in main.js in the MainController uses Ajax calls to the /auth/authenticated endpoint to determine whether the users are logged in. If the users access token has expired or is invalid, the page displays the Authorize buttons. Users must log in to obtain a valid access token. angular.module('AuthCodeFlowTutorial', ['ngRoute']) ... .controller('MainController', function ($scope, $http) { ... /** * Check user access token. */ $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; /** * Access token is valid. Fetch constituent record. */ if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } }); }); Obtain an Access Token Click one of the Authorize buttons and enter your Blackbaud account credentials. After authentication, your browser redirects to the Blackbaud Authorization Service authorization form. Open index.js and /server/routes/auth.js. The Authroize button prompt a request to the web server's /auth/login endpoint. The route in the app's main index.js file directs requests to the getLogin() function within /server/routes/auth.js. // Register our OAUTH2 routes\napp.get('/auth/authenticated', routes.auth.getAuthenticated);\napp.get('/auth/login', routes.auth.getLogin);\napp.get('/auth/callback', routes.auth.getCallback);\napp.get('/auth/logout', routes.auth.getLogout); The auth.js file relies on the simple-oauth2 client library. To creating an object you must provide your registered application's Application ID and Application secret values, which reside in the project's sky.env file as the AUTH_CLIENT_ID and AUTH_CLIENT_SECRET environment variables. You need the URL to the Blackbaud Authorization Service along with the token endpoint. oauth2 = require('simple-oauth2')({ clientID: process.env.AUTH_CLIENT_ID, clientSecret: process.env.AUTH_CLIENT_SECRET, site: 'https://oauth2.apim.blackbaud.com/', tokenPath: '/token'\n}); To obtain an authorization code, the getLogin() function uses simple-oauth2's authorizeURL() function to display the Blackbaud Authorization Service's authorization form. After users approve or deny the request, the responses are redirected using the value of the AUTH_REDIRECT_URI environment variable: https://localhost:5000/auth/callback. function getLogin(request, response) { request.session.redirect = request.query.redirect; request.session.state = crypto.randomBytes(48).toString('hex'); response.redirect(oauth2.authCode.authorizeURL({ redirect_uri: process.env.AUTH_REDIRECT_URI, state: request.session.state }));\n} The access token exchange should occur server side. Do not expose the Application secret to users in client-side code. Do not expose your Application secret in a source code repository such as GitHub. The path /auth/callback is routed to the getCallback() function that exchanges authorization codes for access tokens. function getCallback(request, response) { ... options = { code: request.query.code, redirect_uri: process.env.AUTH_REDIRECT_URI }; oauth2.authCode.getToken(options, function (errorToken, ticket) { if (errorToken) { error = errorToken.message; } else { redirect = request.session.redirect || '/'; request.session.redirect = ''; request.session.state = ''; saveTicket(request, ticket); response.redirect(redirect); } }); ...\n} The access token value is not passed back to the client. Instead, the saveTicket() function saves it to the session state. function saveTicket(request, ticket) { request.session.ticket = ticket; request.session.expires = (new Date().getTime() + (1000 * ticket.expires_in));\n} Retrieve constituent data\nThe response redirects users to the home page and AppController. The AppController verifies that users are logged in through calls to the web server's /auth/authenticated endpoint. After verification, calls are made to the web server's api/constituents/280.\nangular.module('AuthCodeFlowTutorial', [])\n.controller('AppController', function ($scope, $http, $window) { // Checks the user access token. $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } // Access token is valid. Fetch constituent record. $http.get('/api/constituents/280').then(function (res) { $scope.constituent = res.data; $scope.isReady = true; }); }); Open /server/libs/sky.js and /server/routes/api.js. The route in the app's main index.js file directs the request to the getConstituent() function in /server/libs/sky.js. The call is passed along to /server/routes/api.js, which interacts directly with SKY API endpoints. Eventually the call makes its way to the proxy() function. Here, we can see the use of the Bb-Api-Subscription-Key and Authorization request headers: function proxy(request, method, endpoint, body, callback) { var options = { json: true, method: method, body: body, url: 'https://api.sky.blackbaud.com/constituent/v1/'' + endpoint, headers: { 'Bb-Api-Subscription-Key': process.env.AUTH_SUBSCRIPTION_KEY, 'Authorization': 'Bearer ' + request.session.ticket.access_token } }; promise(options) .then(callback) .catch(function (err) { console.log('Proxy Error: ', err); });\n} The Bb-Api-Subscription-Key value represents your Blackbaud developer account's approved subscription to an API product. You can use your account's Primary key or Secondary key. The Authorization value represents your authorization to use the API. The Authorization header starts with Bearer followed by a space and then the value for the access token. A call to the Constituent (Get) endpoint retrieves constituent data and sends it back to the browser. function get(request, endpoint, callback) { return proxy(request, 'GET', endpoint, '', callback);\n} The data is returned as JSON to the browser where the model's data is projected through the view of the Angular template. <div ng-if=\"isAuthenticated\"> <h3>Constituent: {{ constituent.name }}</h3> <p> See <a href=\"https://developer.sky.blackbaud.com/contract-reference#Constituent\" target=\"_blank\">Constituent</a> within the SKY API contact reference for a full listing of properties. </p> <div class=\"table-responsive\"> <table class=\"table table-striped table-hover\"> <thead> <tr> <th>Name</th> <th>Value</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>{{ constituent.id }}</td> </tr> <tr> <td>type</td> <td>{{ constituent.type }}</td> </tr> <tr> <td>lookup_id</td> <td>{{ constituent.lookup_id }}</td> </tr> <tr> <td>first</td> <td>{{ constituent.first }}</td> </tr> <tr> <td>last</td> <td>{{ constituent.last }}</td> </tr> </tbody> </table> </div> <a href=\"/auth/logout\" class=\"btn btn-primary\">Log out</a>\n</div> Summary\nYou should now have a fully functioning application using implicit-flow. Users of your app should be able to log in with their Blackbaud credentials, authorize the app, and get constituent data after they are authenticated. Be sure to take a look at our other code samples. You can create an issue to report a bug or request a feature for this code sample. For all other feature requests, see ideas. "
      },
      {
       "layout": "layout-container",
       "name": "PHP",
       "title": "Authorization Code Flow - PHP",
       "icon": "fa fa-3x fa-file-code-o",
       "description": "Learn how to create a PHP server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
       "order": 4,
       "showInNav": true,
       "showBreadcrumbs": true,
       "tutorial": true,
       "redirectUrl": "http://localhost:8888/auth/callback.php",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Code Auth-code-flow Php",
       "abspath": "docs/code/auth-code-flow/php/index.md",
       "uri": "/docs/code/auth-code-flow/php/",
       "text": " Comments Edit in GitHub Authorization Code Flow - PHP GitHub\nOverview\nWe use OAuth 2.0 to secure access to a user's SKY API data. In this tutorial we obtain user authorization using the Authorization Code Flow. From the user's perspective, the user authenticates as a Blackbaud user with the normal credentials for Blackbaud NXT and then authorizes (or denies) your application. To accomplish this, your application obtains an authorization code from the Blackbaud Authorization Service. The authorization code is then exchanged for an access token that signs requests to the SKY API on behalf of the user. The exchange involves your registered application's Application secret. For security reasons, the exchange is done through direct server-to-server communication. For this reason, we use PHP on the server.\nIn this tutorial, we will accomplish the following tasks: Ensure that you signed up for a developer account and obtained your subscription to an API product.\nRegister an application with SKY API.\nObtain authorization to access user data for a specific tenant.\nRetrieve data from a SKY API endpoint. For this tutorial, we strip down the user interface to highlight the Authorization Code Flow. Our Barkbaud code sample provides a rich user interface using SKY UX.\nPrerequisites A server such as your local machine that is capable of running PHP. We recommend MAMP.\nFamiliarity using a command line interface (CLI) such as Terminal or Windows Command Prompt.\nSign up for a GitHub account, if you don't already have one. The source code for this tutorial is stored in GitHub repository.\nInstall Git and have the ability to clone or fork a repo.\nA reliable Internet connection. Step 1 — Get Your Keys\nIf you have not already done so, complete the Getting Started guide. The tutorial guides you through signing up for a Blackbaud developer account and requesting a subscription to an API product. After you are approved, your subscription contains a Primary key and Secondary key. You can use either key as the subscription key value for the Bb-Api-Subscription-Key request header in calls to the API.\nDeveloper Sandbox Tenant\nAfter your subscription is approved, your developer account can access the Developer Sandbox tenant that represents a sample database. With this particular tenant, keep in mind that you share this sandbox with other developers. You can access the Developer Sandbox tenant and learn the various endpoints through the interactive SKY API Console within the API Reference.\nStep 2 — Register Your App\nTo call the SKY API, first register your application to obtain its unique set of credentials, which your users will use to enable your app to access their data From My Applications, click Register app. Enter the name, description, and logo of your application, as well as your organization's name. This information appears for users when they enable access to your application during the authorization process or in their product. In the Application website URL field, enter where users can learn more about your application online. Specify the URIs to use to redirect users back to your application during the authorization process. Note: The URIs must be absolute and use HTTPS. However, we do support http://localhost:port or http://127.0.0.1:port for local development. Important! When your application requests authorization to access a Blackbaud user's data, it includes a redirect_uri parameter in its query string. To authorize your application, this value must match exactly against one of the URIs you provide, including any trailing slashes. For more information, see common authorization issues. Click Save. After you register an app, note the ID and secret that appear under Application Credentials. These credentials are unique to your application, and verify its identity during the authorization process. ID -Your application's unique identifier. Your users will need this ID to enable your application to access their Blackbaud data. You can't modify this ID; if you need to change it for any reason, delete the application and re-register it. Secret -The key your application provides when it requests an access token to call the SKY API during the authorization process. This value is sensitive, so don't share it with anyone else! To display the secret, click Show. Very Important! Keep the application secret private and safe! If the secret is compromised, regenerate it. Blackbaud reserves the right to remove or deactivate your application to protect customer data. Step 3 — Grab the Source Code\nThe sky-api-tutorial-auth-code-php repo on GitHub provides a starter project to work through the Authorization Code Flow.\nUse a command prompt to clone the sky-api-tutorial-auth-code-php repo which creates a working directory by the same name that contains the code for the tutorial: $ git clone https://github.com/blackbaud/sky-api-tutorial-auth-code-php.git Step 4 — Prepare Your Environment Open the sky-api-tutorial-auth-code-php working directory and copy the configuration file config.php.sample as config.php. The config.php file contains the application's environment variables for the PHP environment. Update config.php with the following values: AUTH_CLIENT_ID Your registered application's Application ID (from Step 2). (See, Managing your apps.) AUTH_CLIENT_SECRET Your registered application's Application Secret (from Step 2). (See, Managing your apps.) AUTH_REDIRECT_URI One of your registered application's Redirect URIs (from Step 2). For this tutorial, enter http://localhost:8888/auth/callback.php. AUTH_SUBSCRIPTION_KEY Your Blackbaud Developer Subscription Key. Use either the Primary key or Secondary key, visible on your Blackbaud Developer Profile. Save the config file. Review the .gitignore file. The purpose of the file is to specify the untracked files to ignore. Note that config.php file is ignored. This prevents the config file from being synced to GitHub and protects your registered application's keys and other sensitive data from being exposed. Step 5 — Install and Configure MAMP\nAfter you have your subscription key, Application ID, Application secret, and the sky-api-auth-tutorial-php source code, It's time to establish your development environment. Since we are using the Authorization Code Flow, we need to use a server-side software platform. For this tutorial, we will use PHP with MAMP to serve the project locally. Download and install MAMP.\nLaunch MAMP and edit the following in Preferences. Tab Field Description Web Server Document Root Change this path to point at your cloned sky-api-tutorial-auth-code-php directory. Select Ok and Start Servers.\nIn a Web browser, navigate to localhost:8888. The Web server displays our app. Application Starting Point Open the index.html file. MAMP serves this file as our applications root where we initialize our app and load assets to build our page. The body tag includes an attribute named ng-app. The front-end of our application uses AngularJS to interact with our PHP server. <!-- INITIALIZE THE APP --> <body ng-app=\"AuthCodeFlowTutorial\"> <div class=\"container\" ng-controller=\"ConstituentCtrl\" ng-cloak> ... Open your browser to http://localhost:8888 to request the Home page. When the front page loads, the AngularJS on the Home page (index.html) makes a request to the /auth/authenticated.php endpoint:\n(function (angular) { 'use strict'; angular.module('AuthCodeFlowTutorial', []) .controller('ConstituentCtrl', function ($scope, $http, $window) { // Check user access token. $http.get('/auth/authenticated.php').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } ... The call to the endpoint routes to the corresponding php page (/auth/authenticated.php) and returns a Boolean representing the current user's authentication status. First, it requires and loads the /includes/blackbaud/blackbuad.php file.\n<?php require_once '../includes/blackbaud/blackbaud.php'; echo json_encode(array( 'authenticated' => blackbaud\\Session::isAuthenticated() )); ... Open the /includes/blackbaud/blackbaud.php file. The PHP code pulls in the rest of our required controllers, config environment variables, and http library for making API requests. We can see **require_once 'session.php';** pulls in the includes/blackbaud/session.php file. <?php // Error reporting, for development only. ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); require_once 'session.php'; require_once join(DIRECTORY_SEPARATOR, array($_SERVER['DOCUMENT_ROOT'], 'config.php')); require_once join(DIRECTORY_SEPARATOR, array('api', 'constituents.php')); require_once 'auth.php'; require_once 'http.php'; ... Open the /includes/blackbaud/session.php file. It begins by defining our namespace blackbaud, allowing the methods and variables defined beneath it to be accessed by any other classes also under that namespace. Our original call to /auth/authenticated/ made use of the isAuthenticated() method in this Session object. This method checks for the existance of a PHP $_SESSION object and looks for an access_token. If the application has not yet been authorized by the end user, then IsAuthenticated() will return false. <?php public static function isAuthenticated() { return isset($_SESSION[self::$tokenName]) && isset($_SESSION[self::$tokenName]['access_token']); } ... Display the Log in button If the user is not authenticated, a Log in button is displayed.\nNote: The browser may display a warning that the connection is not private. For this tutorial, you can ignore this message. To proceed, select Show advanced and then select Proceed to localhost (unsafe). Open the index.html file. Notice that the body tag includes an attribute named ng-app. The front-end of our application uses AngularJS to interact with our Web server routes. The div.container element includes an attribute named ng-controller which references an AngularJS controller to handle the model data.\n<body ng-app=\"AuthCodeFlowTutorial\"> <div class=\"container\" ng-controller=\"ConstituentCtrl\" ng-cloak> ...\nWhen the Home page first loads the app will not have received authorization from the user to access their SKY API data. As a result the isAuthenticated scope variable will be false and the Home page's Angular HTML template displays the Log in button.\n<div ng-if=\"!isAuthenticated\"> <a href=\"/auth/login\" class=\"btn btn-primary\">Log in</a>\n</div>\n... Obtain an Access Token Open /includes/blackbaud/auth.php.\nWhen the user selects the Log in button, a call is made to auth/login.php, which redirects the request to /includes/blackbaud/auth.php file. Here, the redirect() method is called, which redirects the browser to SKY API’s authorization endpoint to start the authentication and authorization process. The user must authenticate with their Blackbaud credentials (if they are not already signed in) and authorize your application to access their SKY API data.\n<?php\nclass Auth { public static function redirect() { $auth_uri = self::getAuthorizationUri(); header(\"Location: $auth_uri\", true, 301); exit(); } ... private static function getAuthorizationUri() { return AUTH_BASE_URI . 'authorization?' . http_build_query(array( 'client_id'=> AUTH_CLIENT_ID, 'response_type' => 'code', 'redirect_uri' => AUTH_REDIRECT_URI )); } ...\nOnce authorized, SKY API redirects the user back to the /auth/callback.php URI with an authorization code. Once an authorization code has been obtained, it exchanges the code for an access token. The app is then redirected back to the Home page.\n<?php\nrequire_once '../includes/blackbaud/blackbaud.php'; blackbaud\\Auth::exchangeCodeForAccessToken($_GET['code']); header('Location: /');\nexit(); ...\n// build out the request body with the code from the redirect URI, and call the fetchTokens() method, passing the newly made $body array.\npublic static function exchangeCodeForAccessToken($code = 0) {\n$body = array( 'code' => $code, 'grant_type' => 'authorization_code', 'redirect_uri' => AUTH_REDIRECT_URI\n);\nreturn self::fetchTokens($body);\n} ...\n// build out the appropriate token headers, and make the reqeust to the SKY API endpoint. Grab the returned JSON response and\n// store the tokens in the Session.\nprivate static function fetchTokens($body = array()) {\n$headers = array( 'Content-type: application/x-www-form-urlencoded', 'Authorization: Basic ' . base64_encode(AUTH_CLIENT_ID . ':' . AUTH_CLIENT_SECRET)\n); $url = AUTH_BASE_URI . 'token'; $response = Http::post($url, $body, $headers);\n$token = json_decode($response, true);\nSession::setToken($token);\nreturn $response;\n} Retrieve Constituent Data Open the index.html file.\nAngularJS again makes the request to auth/authenticated, which now returns true. Since the user is authorized, AngularJS then makes a request the application’s constituent API endpoint /api/constituents.php?id=280 to retrieve a constituent record.\nangular.module('AuthCodeFlowTutorial', []) .controller('ConstituentCtrl', function ($scope, $http, $watch) { // Check user access token. $http.get('/auth/authenticated.php').then(res => { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } // Access token is valid. Fetch constituent record. $http.get('/api/constituents.php?id=280').then(res => { $scope.constituent = res.data.constituent; $scope.isReady = true; }); }); ... Open api/constituents.php and includes/blackbaud/api/constituents.php. The get request in index.html file directs the request to api/constituents.php, where the access token is refreshed and the call is passed along to /includes/blackbaud/api/constituents.php with the id from the route param ?id=280 that we passed into the request. <?php ... $response = blackbaud\\Auth::refreshAccessToken(); $token = json_decode($response, true); if (!isset($token['access_token'])) { echo json_encode($token); return; } $data = blackbaud\\Constituents::getById($_GET['id']); ... The getById() method interacts directly with the SKY API endpoints making a get request to the https://api.sky.blackbaud.com/constituent/v1/constituents/280 endpoint and passing in the required headers. <?php ... self::$headers = array( 'Bb-Api-Subscription-Key: ' . AUTH_SUBSCRIPTION_KEY, 'Authorization: Bearer ' . Session::getAccessToken(), 'Content-type: application/x-www-form-urlencoded' ); self::$baseUri = SKY_API_BASE_URI . 'constituent/v1/'; } public static function getById($id = 0) { $url = self::$baseUri . 'constituents/' . $id; $response = Http::get($url, self::$headers); return json_decode($response, true); } ... The Bb-Api-Subscription-Key value represents your Blackbaud developer account's approved subscription to an API product. You can use your account's Primary key or Secondary key. The Authorization value represents your authorization to use the API. The Authorization header starts with Bearer followed by a space and then the value for the access token. A call to the Constituent (Get) endpoint retrieves constituent data and sends it back to the browser. function get(request, endpoint, callback) { return proxy(request, 'GET', endpoint, '', callback);\n} The data is returned as JSON to the browser where the model's data is projected through the view of the Angular template. <div ng-if=\"isAuthenticated\"> <h3>Constituent: {{ constituent.name }}</h3> <p> See <a href=\"https://developer.sky.blackbaud.com/contract-reference#Constituent\" target=\"_blank\">Constituent</a> within the SKY API contact reference for a full listing of properties. </p> <div class=\"table-responsive\"> <table class=\"table table-striped table-hover\"> <thead> <tr> <th>Name</th> <th>Value</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>{{ constituent.id }}</td> </tr> <tr> <td>type</td> <td>{{ constituent.type }}</td> </tr> <tr> <td>lookup_id</td> <td>{{ constituent.lookup_id }}</td> </tr> <tr> <td>first</td> <td>{{ constituent.first }}</td> </tr> <tr> <td>last</td> <td>{{ constituent.last }}</td> </tr> </tbody> </table> </div> <a href=\"/auth/logout\" class=\"btn btn-primary\">Log out</a>\n</div> Once the constituent information is retrieved and added to the front page, Log Out and Refresh Access Token buttons are displayed.\nOpen /auth/logout.php and includes/blackbaud/session.php.\nIf the user selects Log Out, they are redirected to /auth/logout.php, which calls the blackbaud\\Session::logout() in includes/blackaud/session.php. The logout() method destroys the token stored in the PHP server's $_SESSION. <?php ... public static function logout() { unset($_SESSION[self::$tokenName]); } ... If the user selects Refresh Access Token, AngularJS makes a request to /auth/refresh-token.php. The call is passed to the refreshAccessToken() method in includes/blackbaud/auth.php, which builds out the request body with the required fields. The grant_type is set to refresh_token and the refresh_token field is populated with the refresh_token we have stored in the $_SESSION. This body is then passed to the fetchTokens() method where the post to the SKY API endpoint is made. <?php ... public static function refreshAccessToken() { $body = array( 'grant_type' => 'refresh_token', 'refresh_token' => Session::getRefreshToken() ); return self::fetchTokens($body); } ... private static function fetchTokens($body = array()) { $headers = array( 'Content-type: application/x-www-form-urlencoded', 'Authorization: Basic ' . base64_encode(AUTH_CLIENT_ID . ':' . AUTH_CLIENT_SECRET) ); $url = AUTH_BASE_URI . 'token'; $response = Http::post($url, $body, $headers); $token = json_decode($response, true); Session::setToken($token); return $response; } ... The JSON response from SKY API is then parsed, the new set of tokens are stored in our $_SESSION, and the data is sent back to Angular to be displayed on the page for your reference. That's it! Be sure to take a look at our other code samples.\nYou can create an issue to report a bug or request a feature for this code sample. For all other feature requests, see ideas. "
      }
     ],
     "text": " Authorization Code Flow Important! Our code samples provide very basic examples of how to interact with the Blackbaud OAuth 2.0 Service. You are free to choose the client library and method that best suit your needs when creating production-level applications. C# .NET Core Learn how to create a .NET Core MVC C# server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our SKY API. Chrome Extension Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Authorization Code Flow. NodeJS Learn how to create a NodeJS server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our SKY API. PHP Learn how to create a PHP server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our SKY API. "
    },
    {
     "name": "Implicit Flow",
     "layout": "layout-showcase",
     "description": "Get up-and-running with our Implicit Flow code samples",
     "showBreadcrumbs": true,
     "icon": "fa fa-fw fa-3x fa-user",
     "title": "Implicit Flow Code Samples",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInNav": true,
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Code Implicit-flow",
     "abspath": "docs/code/implicit-flow/index.md",
     "uri": "/docs/code/implicit-flow/",
     "nav_links": [
      {
       "layout": "layout-container",
       "name": "AngularJS",
       "title": "Implicit Flow - AngularJS",
       "description": "Learn how to create an Angular app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
       "order": 2,
       "icon": "fa fa-fw fa-3x fa-desktop",
       "showInNav": true,
       "tutorial": true,
       "showBreadcrumbs": true,
       "back_to_top": true,
       "useComments": false,
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Code Implicit-flow Angular",
       "abspath": "docs/code/implicit-flow/angular/index.md",
       "uri": "/docs/code/implicit-flow/angular/",
       "text": " Edit in GitHub Implicit Flow - AngularJS GitHub\nLearn how to create an AngularJS app that interacts with SKY API constituent data via the OAuth 2.0 Implicit Flow.\nView the source on GitHub "
      },
      {
       "layout": "layout-container",
       "name": "Angular 2",
       "title": "Implicit Flow - Angular 2",
       "description": "Learn how to create an Angular 2 app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
       "order": 2,
       "icon": "fa fa-fw fa-3x fa-desktop",
       "showInNav": true,
       "tutorial": true,
       "showBreadcrumbs": true,
       "back_to_top": true,
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Code Implicit-flow Angular2",
       "abspath": "docs/code/implicit-flow/angular2/index.md",
       "uri": "/docs/code/implicit-flow/angular2/",
       "text": " Edit in GitHub Implicit Flow - Angular 2 GitHub\nLearn how to create an Angular 2 app that interacts with SKY API constituent data via the OAuth 2.0 Implicit Flow.\nView the source on GitHub "
      },
      {
       "name": "Chrome Extension",
       "layout": "layout-container",
       "title": "Implicit Flow - Chrome Extension",
       "description": "Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Implicit Flow.",
       "icon": "fa fa-fw fa-3x fa-chrome",
       "showBreadcrumbs": true,
       "sortKey": "order",
       "sortDirection": "asc",
       "showInNav": true,
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Docs Code Implicit-flow Chrome-extension",
       "abspath": "docs/code/implicit-flow/chrome-extension/index.md",
       "uri": "/docs/code/implicit-flow/chrome-extension/",
       "text": " Edit in GitHub Implicit Flow - Chrome Extension GitHub\nLearn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Implicit Flow.\nView the source on GitHub "
      }
     ],
     "text": " Implicit Flow Important! Our code samples provide very basic examples of how to interact with the Blackbaud OAuth 2.0 Service. You are free to choose the client library and method that best suit your needs when creating production-level applications. Angular 2 Learn how to create an Angular 2 app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our SKY API. AngularJS Learn how to create an Angular app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our SKY API. Chrome Extension Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Implicit Flow. "
    }
   ],
   "text": " Code Samples App Showcase A collection of fully-formed applications that can assist in quick-starting your own SKY API applications Authorization Code Flow Quick-start code samples for Authorization Code Flow Implicit Flow Get up-and-running with our Implicit Flow code samples "
  },
  {
   "name": "App Showcase",
   "layout": "layout-container",
   "description": "A collection of fully-formed applications that can assist in quick-starting your own SKY API applications",
   "order": 3,
   "icon": "fa fa-fw fa-3x fa-cube",
   "showBreadcrumbs": true,
   "title": "App Showcase",
   "appShowcase": [
    {
     "title": "Barkbaud (NodeJS)",
     "icon": "fa-cube",
     "repo": "<%= stache.config.github_repo_barkbaud_nodejs %>",
     "description": "A full-stack NodeJS application that demonstrates how to access constituent data via SKY API, implements a front-end using SKY UX, and negotiates security using OAuth 2.0 Authorization Code Flow",
     "demo": "<%= stache.config.tutorial_barkbaud_live_demo %>"
    }
   ],
   "sortKey": "order",
   "sortDirection": "asc",
   "showInNav": true,
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Code App-showcase",
   "abspath": "docs/code/app-showcase/index.md",
   "uri": "/docs/code/app-showcase/",
   "text": " App Showcase Barkbaud (NodeJS) A full-stack NodeJS application that demonstrates how to access constituent data via SKY API, implements a front-end using SKY UX, and negotiates security using OAuth 2.0 Authorization Code Flow View on GitHub View live demo "
  },
  {
   "name": "Authorization Code Flow",
   "description": "Quick-start code samples for Authorization Code Flow",
   "layout": "layout-showcase",
   "showBreadcrumbs": true,
   "icon": "fa fa-fw fa-3x fa-lock",
   "title": "Authorization Code Flow Code Samples",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInNav": true,
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Code Auth-code-flow",
   "abspath": "docs/code/auth-code-flow/index.md",
   "uri": "/docs/code/auth-code-flow/",
   "nav_links": [
    {
     "layout": "layout-container",
     "name": "C# .NET Core",
     "title": "Authorization Code Flow - C# .NET Core",
     "icon": "fa fa-fw fa-3x fa-windows",
     "description": "Learn how to create a .NET Core MVC C# server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
     "order": 1,
     "published": true,
     "showInNav": true,
     "showBreadcrumbs": true,
     "tutorial": true,
     "back_to_top": true,
     "redirectUrl": "http://localhost:5000/auth/callback",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Code Auth-code-flow C-sharp",
     "abspath": "docs/code/auth-code-flow/c-sharp/index.md",
     "uri": "/docs/code/auth-code-flow/c-sharp/",
     "text": " Comments Edit in GitHub Authorization Code Flow - C# .NET Core GitHub Live Demo\nOverview\nWe use OAuth 2.0 to secure access to a user's SKY API data. In this tutorial we obtain user authorization using the Authorization Code Flow. From the user's perspective, the user authenticates as a Blackbaud user with the normal credentials for Blackbaud NXT and then authorizes (or denies) your application. To accomplish this, your application obtains an authorization code from the Blackbaud Authorization Service. The authorization code is then exchanged for an access token that signs requests to the SKY API on behalf of the user. The exchange involves your registered application's Application secret. For security reasons, the exchange is done through direct server-to-server communication. For this reason, we use ASP.NET Core for the server-side platform and C#.\nIn this tutorial, we will accomplish the following tasks: Ensure that you signed up for a developer account and obtained your subscription to an API product.\nRegister an application with SKY API.\nObtain authorization to access user data for a specific tenant.\nRetrieve data from a SKY API endpoint. For this tutorial, we strip down the user interface to highlight the Authorization Code Flow. Our Barkbaud code sample provides a rich user interface using SKY UX.\nPrerequisites Since we are using the Authorization Code Flow, we need to use a server-side software platform, such as .NET Core. You will need to Download and install .NET Core\nFamiliarity using a command line interface (CLI) such as Terminal or Windows Command Prompt.\nSign up for a GitHub account, if you don't already have one. The source code for this tutorial is stored in GitHub repository.\nInstall Git and have the ability to clone or fork a repo.\nA reliable Internet connection. Step 1 — Get Your Keys\nIf you have not already done so, complete the Getting Started guide. The tutorial guides you through signing up for a Blackbaud developer account and requesting a subscription to an API product. After you are approved, your subscription contains a Primary key and Secondary key. You can use either key as the subscription key value for the Bb-Api-Subscription-Key request header in calls to the API.\nDeveloper Sandbox Tenant\nAfter your subscription is approved, your developer account can access the Developer Sandbox tenant that represents a sample database. With this particular tenant, keep in mind that you share this sandbox with other developers. You can access the Developer Sandbox tenant and learn the various endpoints through the interactive SKY API Console within the API Reference.\nStep 2 — Register Your App\nTo call the SKY API, first register your application to obtain its unique set of credentials, which your users will use to enable your app to access their data From My Applications, click Register app. Enter the name, description, and logo of your application, as well as your organization's name. This information appears for users when they enable access to your application during the authorization process or in their product. In the Application website URL field, enter where users can learn more about your application online. Specify the URIs to use to redirect users back to your application during the authorization process. Note: The URIs must be absolute and use HTTPS. However, we do support http://localhost:port or http://127.0.0.1:port for local development. Important! When your application requests authorization to access a Blackbaud user's data, it includes a redirect_uri parameter in its query string. To authorize your application, this value must match exactly against one of the URIs you provide, including any trailing slashes. For more information, see common authorization issues. Click Save. After you register an app, note the ID and secret that appear under Application Credentials. These credentials are unique to your application, and verify its identity during the authorization process. ID -Your application's unique identifier. Your users will need this ID to enable your application to access their Blackbaud data. You can't modify this ID; if you need to change it for any reason, delete the application and re-register it. Secret -The key your application provides when it requests an access token to call the SKY API during the authorization process. This value is sensitive, so don't share it with anyone else! To display the secret, click Show. Very Important! Keep the application secret private and safe! If the secret is compromised, regenerate it. Blackbaud reserves the right to remove or deactivate your application to protect customer data. Step 3 — Grab the Source Code\nThe sky-api-auth-tutorial-c-sharp repo on GitHub provides a starter project to work through the Authorization Code Flow. Use a command prompt to clone the sky-api-auth-tutorial-c-sharp repo which creates a working directory by the same name that contains the code for the tutorial: $ git clone https://github.com/blackbaud/sky-api-auth-tutorial-c-sharp.git Step 4 — Prepare Your Environment\nLet's explore some application settings files and prep your environment variables. Open the sky-api-auth-tutorial-c-sharp working directory.\nOpen the appsettings.json which details generic properties to be used by the application. Take note of the following SKY API URI property values: AuthBaseUri URI to the Authorization Service. SkyApiBaseUri URI to the SKY API Endpoints. For local development, duplicate the file appsettings.json-sample, renaming it to appsettings.Development.json. The appsettings.Development.json file contains your registered application's environment variables. Note that private properties, such as your Application ID and Application secret, are stored in this file. For security, the appsettings.Development.json is excluded from being syncronized with GitHub via the file .gitignore. At run time, the application will merge these properties into the available environment variables. In .NET Core, the Startup class, Startup.cs provides the entry point for an application, and is required for all applications. This class configures the application and sets up the required middleware. { \"AppSettings\": { \"AuthClientId\": \"\", \"AuthClientSecret\": \"\", \"AuthRedirectUri\": \"http://localhost:5000/auth/callback\", \"AuthSubscriptionKey\": \"\" }\n} Using the values from your registered application and the subscription key from your Blackbaud Developer Profile, update appsettings.Development.json with the following values. All values are required.: AuthClientId Your registered application's Application ID. AuthClientSecret Your registered application's Application secret. AuthRedirectUri One of your registered application's Redirect URIs. For this tutorial, we will use http://localhost:5000/auth/callback. AuthSubscriptionKey Your Blackbaud Developer Subscription Key. Use either the Primary key or Secondary key, visible on your Blackbaud Developer Profile. Save the file. Step 5 — Run the Application Using Command Prompt/Terminal/bash prompt, ensure you are in the working directory.\nOpen and review the project.json file. This file details the application’s dependencies. These NuGet modules (project dependencies) are installed when issuing the dotnet restore command within Command Prompt/Terminal/bash prompt.\nOn a Mac, issue the following commands to restore the packages specified in the project.json file and run the actual sample:\n$ dotnet restore\n$ export ASPNETCORE_ENVIRONMENT=Development && dotnet run On a PC, type:\n$ dotnet restore\n$ set ASPNETCORE_ENVIRONMENT=Development && dotnet run Visit http://localhost:5000/ to view your locally running application. Application Starting Point IIS is used as the webserver. An ASP.NET Core Module configured in project.json is used to list dependencies and configure IIS to launch and host your application.\nOpen the Program.cs file. The Main() method is the starting point of our application. It is responsible for initializing the application. We use WebHostBuilder to listen on a particular IP address and port: http://localhost:5000/. As of RC2 an ASP.NET Core application is a .NET Core Console application that calls into ASP.NET specific libraries. This code runs on the server-side and is not visible to the application user. Running the code server-side helps to protect your Application secret.\nusing System.IO;\nusing Microsoft.AspNetCore.Hosting; namespace Blackbaud.AuthCodeFlowTutorial\n{ public class Program { public static void Main(string[] args) { var host = new WebHostBuilder() .UseKestrel() .UseContentRoot(Directory.GetCurrentDirectory()) .UseIISIntegration() .UseStartup() .Build(); host.Run(); } }\n}\nOpen your browser to http://localhost:5000/ to request the Home page. When the front page loads, the AngularJS on the Home page (/Views/Shared/_Layout.cshtml) makes a request to the /auth/authenticated endpoint:\n(function (angular) { 'use strict'; angular.module('AuthCodeFlowTutorial', []) .controller('ConstituentCtrl', function ($scope, $http) { // Check user access token. $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } ...\nThe call to the endpoint routes to the corresponding controller (/Controllers/AuthenticationController.cs) and returns a Boolean representing the current user's authentication status. If the application has not yet been authorized by the end user, then IsAuthenticated() will return false.\n[HttpGet(\"authenticated\")]\npublic ActionResult Authenticated()\n{ return Json(new { authenticated = _authService.IsAuthenticated() });\n}\n... Displaying the Log in button If the user is not authenticated, a Log in button is displayed.\nNote: The browser may display a warning that the connection is not private. For this tutorial, you can ignore this message. To proceed, click Show advanced and then click Proceed to localhost (unsafe). Open the Views/Shared/_Layout.cshtml file. Notice that the body tag includes an attribute named ng-app. The front-end of our application uses AngularJS to interact with our Web server routes. The div.container element includes an attribute named ng-controller which references an AngularJS controller to handle the model data.\n<body ng-app=\"AuthCodeFlowTutorial\"> <div class=\"container\" ng-controller=\"ConstituentCtrl\" ng-cloak> ...\nWhen the Home page first loads the app will not have received authorization from the user to access their SKY API data. As a result the isAuthenticated scope variable will be false and the Home page's Angular HTML template displays the Log in button:\n<div ng-if=\"!isAuthenticated\"> <a href=\"/auth/login\" class=\"btn btn-primary\">Log in</a>\n</div>\n... Obtain an Access Token Open /Controllers/AuthenticationController.cs.\nWhen the user clicks the Log in button, a call is made to LogIn() which redirects the browser to SKY API’s authorization endpoint to start the authentication and authorization process. The user must authenticate with their Blackbaud credentials (if they are not already signed in) and authorize your application to access their SKY API data.\n[HttpGet(\"login\")]\npublic ActionResult LogIn()\n{ Uri address = _authService.GetAuthorizationUri(); return Redirect(address.ToString());\n}\n...\nOnce authorized, SKY API redirects the user back to the /auth/callback URI with an authorization code. Once an authorization code has been obtained, it is exchanged the code for an access token. The app is then redirected back to the Home page. [HttpGet(\"callback\")]\npublic ActionResult Callback()\n{ string code = Request.Query[\"code\"]; _authService.ExchangeCodeForAccessToken(code); return Redirect(\"/\");\n}\n... Retrieve Constituent Data Open the Home page (Views/Shared/_Layout.cshtml).\nAngularJS again makes the request to auth/authenticated, which now returns true. Since the user is authorized, AngularJS then makes a request the application’s constituent API endpoint /api/constituents/280 to retrieve a constituent record:\nangular.module('AuthCodeFlowTutorial', []) .controller('ConstituentCtrl', function ($scope, $http) { // Check user access token. $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } // Access token is valid. Fetch constituent record. $http.get('/api/constituents/280').then(function (res) { $scope.constituent = res.data; $scope.isReady = true; }); }); ... The data is returned as JSON to the Home page where the model's data is projected through the view of the HTML template:\n<div ng-if=\"isAuthenticated\"> <h3>Constituent: </h3> <p> See <a href=\"/api/entity-reference/constituent\">Constituent</a> within the SKY API entity reference for a full listing of properties. </p> <p ng-if=\"::constituent.error\" ng-bind=\"::constituent.error\" class=\"alert alert-danger\"></p> <div ng-if=\"::constituent.id\" class=\"table-responsive\"> <table class=\"table table-striped table-hover\"> <thead> <tr> <th>Name</th> <th>Value</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>{{ constituent.id }}</td> </tr> <tr> <td>type</td> <td>{{ constituent.type }}</td> </tr> <tr> <td>lookup_id</td> <td>{{ constituent.lookup_id }}</td> </tr> <tr> <td>first</td> <td>{{ constituent.first }}</td> </tr> <tr> <td>last</td> <td>{{ constituent.last }}</td> </tr> </tbody> </table> </div>\n... Once the constituent information is retrieved and added to the front page, Log Out and Refresh Access Token buttons are displayed.\nOpen /Controllers/AuthenticationController.cs\nIf the user clicks Log Out, they are redirected to /auth/logout which destroys the access/refresh token stored in the browser’s session.\nIf the user clicks Refresh Access Token, AngularJS makes a request to /auth/refresh-token, which asks SKY API to return a refreshed access token, which is then stored in the browser’s session. That's it! Be sure to take a look at our other code samples.\nCheck out the README where you can view a live demo of the application hosted on Microsoft Azure.\nThe README also contains instructions for deploying to Azure App Services rather than your local development environment.\nYou can create an issue to report a bug or request a feature for this code sample. For all other feature requests, see ideas. "
    },
    {
     "layout": "layout-container",
     "name": "Chrome Extension",
     "title": "Authorization Code Flow - Chrome Extension",
     "description": "Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Authorization Code Flow.",
     "order": 2,
     "icon": "fa fa-fw fa-3x fa-chrome",
     "showInNav": true,
     "showBreadcrumbs": true,
     "back_to_top": true,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Code Auth-code-flow Chrome-extension",
     "abspath": "docs/code/auth-code-flow/chrome-extension/index.md",
     "uri": "/docs/code/auth-code-flow/chrome-extension/",
     "text": " Edit in GitHub Authorization Code Flow - Chrome Extension GitHub\nLearn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Authorization Code Flow.\nView the source on GitHub "
    },
    {
     "layout": "layout-container",
     "name": "NodeJS",
     "title": "Authorization Code Flow - NodeJS",
     "description": "Learn how to create a NodeJS server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
     "order": 3,
     "icon": "fa fa-fw fa-3x fa-desktop",
     "published": true,
     "showInNav": true,
     "tutorial": true,
     "showBreadcrumbs": true,
     "back_to_top": true,
     "redirectUrl": "http://localhost:5000/auth/callback",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Code Auth-code-flow Nodejs",
     "abspath": "docs/code/auth-code-flow/nodejs/index.md",
     "uri": "/docs/code/auth-code-flow/nodejs/",
     "text": " Comments Edit in GitHub Authorization Code Flow - NodeJS GitHub\nOverview\nWe use OAuth 2.0 to secure access to a user's SKY API data. In this tutorial we obtain user authorization using the Authorization Code Flow. From the user's perspective, the user authenticates as a Blackbaud user with the normal credentials for Blackbaud NXT and then authorizes (or denies) your application. To accomplish this, your application obtains an authorization code from the Blackbaud Authorization Service. The authorization code is then exchanged for an access token that signs requests to the SKY API on behalf of the user. The exchange involves your registered application's Application secret. For security reasons, the exchange is done through direct server-to-server communication. For this reason, we use Node.js, a server-side platform.\nIn this tutorial, we will accomplish the following tasks: Ensure that you signed up for a developer account and obtained your subscription to an API product.\nRegister an application with SKY API.\nObtain authorization to access user data for a specific tenant.\nRetrieve data from a SKY API endpoint. For this tutorial, we strip down the user interface to highlight the Authorization Code Flow. Our Barkbaud code sample provides a rich user interface using SKY UX.\nPrerequisites A server such as your local machine that is capable of running Node.js.\nFamiliarity with Node.js, using NPM to install project dependencies, and environment variables including setting them in either an OSX/Linux or Windows environment.\nFamiliarity using a command line interface (CLI) such as Terminal or Windows Command Prompt.\nSign up for a GitHub account, if you don't already have one. The source code for this tutorial is stored in GitHub repository.\nInstall Git and have the ability to clone or fork a repo.\nA reliable Internet connection to clone the repo and install the project's dependencies. Step 1 — Get Your Keys\nIf you have not already done so, complete the Getting Started guide. The tutorial guides you through signing up for a Blackbaud developer account and requesting a subscription to an API product. After you are approved, your subscription contains a Primary key and Secondary key. You can use either key as the subscription key value for the Bb-Api-Subscription-Key request header in calls to the API.\nDeveloper Sandbox Tenant\nAfter your subscription is approved, your developer account can access the Developer Sandbox tenant that represents a sample database. Keep in mind that you share this sandbox with other developers. You can access the Developer Sandbox tenant through the interactive SKY API Console within the API Reference.\nStep 2 — Register Your App\nTo call the SKY API, first register your application to obtain its unique set of credentials, which your users will use to enable your app to access their data From My Applications, click Register app. Enter the name, description, and logo of your application, as well as your organization's name. This information appears for users when they enable access to your application during the authorization process or in their product. In the Application website URL field, enter where users can learn more about your application online. Specify the URIs to use to redirect users back to your application during the authorization process. Note: The URIs must be absolute and use HTTPS. However, we do support http://localhost:port or http://127.0.0.1:port for local development. Important! When your application requests authorization to access a Blackbaud user's data, it includes a redirect_uri parameter in its query string. To authorize your application, this value must match exactly against one of the URIs you provide, including any trailing slashes. For more information, see common authorization issues. Click Save. After you register an app, note the ID and secret that appear under Application Credentials. These credentials are unique to your application, and verify its identity during the authorization process. ID -Your application's unique identifier. Your users will need this ID to enable your application to access their Blackbaud data. You can't modify this ID; if you need to change it for any reason, delete the application and re-register it. Secret -The key your application provides when it requests an access token to call the SKY API during the authorization process. This value is sensitive, so don't share it with anyone else! To display the secret, click Show. Very Important! Keep the application secret private and safe! If the secret is compromised, regenerate it. Blackbaud reserves the right to remove or deactivate your application to protect customer data. Step 3 — Install Node.js\nAfter you have your subscription key, Application ID, and Application secret, it's time to establish your development environment. Since we are using the Authorization Code Flow, we need to use a server-side software platform. For this tutorial, we will use Node.js. Download and install Node.js. Use the default settings for your development environment.\nCreate a file named testserver.js and add the following code: // Create a very simple HTTP web server on your local machine. // Set up a HTTP Web server and client, require('http'). var http = require('http'); // createServer returns a new instance of the http server. // A function is used as a request listener. // req is an instance of the incoming request. // res is an instance of the server response. // When you browse to http://localhost:1337/, a 'request' event occurs and // \"Hello World\" is written from the HTTP Web server back to your browser. http.createServer(function (req, res) { res.writeHead(200, { 'Content-Type': 'text/plain' }); res.end('Hello World'); }).listen(1337, \"localhost\"); console.log('Server running at http://localhost:1337/'); Save the file in a folder named testnodejs. From a command prompt, change the directory to testnodejs and run the testserver.js file: $ cd testnodejs\n$ node testserver.js The Web server listens for requests on your localhost, port 1337. In a Web browser, navigate to localhost:1337. The Web server displays a page with with \"Hello World.\" To stop the Web server, type CTRL-C in the command line. Step 4 — Grab the Source Code\nThe sky-api-auth-tutorial repo on GitHub provides a starter project to work through the Authorization Code Flow. Use a command prompt to clone the sky-api-auth-tutorial. The following command creates a working directory named sky-api-auth-tutorial that contains the code for the tutorial: $ git clone https://github.com/blackbaud/sky-api-auth-tutorial.git Step 5 — Prepare Your Environment Open the sky-api-auth-tutorial working directory and copy the configuration file sky.env-sample as sky.env. The sky.env file contains the application's environment variables for NodeJS environments. Update sky.env with the following values: AUTH_CLIENT_ID Your registered application's Application ID (from Step 2). (See, Managing your apps.) AUTH_CLIENT_SECRET Your registered application's Application Secret (from Step 2). (See, Managing your apps.) AUTH_REDIRECT_URI One of your registered application's Redirect URIs (from Step 2). For this tutorial, enter http://localhost:5000/auth/callback. (See My Applications.) AUTH_SUBSCRIPTION_KEY Your Blackbaud Developer Subscription Key. Use either the Primary key or Secondary key, visible on your Blackbaud Developer Profile. PORT The Web server port that will run the application. For this tutorial, enter 5000. Save the environment file. Review the .gitignore file. The purpose of the file is to specify the untracked files to ignore. Note that any .env files are ignored. This prevents the environment files from being synced to GitHub and protects your registered application's keys and other sensitive data from being exposed. Step 6 — Install Dependencies From the working directory, run npm install to install the project dependencies.\nNPM is the package manager that comes bundled with Node.js (since you already installed Node.js, you also have NPM). The command npm install downloads any dependencies listed in the package.json file and adds them to the app's node_modules directory (this command also creates this directory if it doesn't already exist). Each dependency is represented as a child directory of node_modules. $ cd sky-api-auth-tutorial\n$ npm install After you run npm install, verify that the sky-api-auth-tutorial working directory contains the node_modules subfolder. npm install depends on a reliable Internet connection to install dependencies. If you have issues running the command, you can hard delete the node_modules folder and run npm install again. Step 7 — Run the Application Using Command Prompt/Terminal, ensure you are in the working directory.\nType npm start to start the application server at http://localhost:5000. $ npm start Application starting point Open the index.js file. This is the starting point of our application. This code runs on the server side and is not visible to the application user. The code performs the following:\nIt registers our application dependencies such as Express.\nIt handles authorization and user requests to the home page and data endpoints.\nIt creates a web server on your local machine at https://localhost:5000. To request the home page open your browser to http://localhost:5000/. It displays the authorization options. Your browser may display a warning that the connection is not private. For this tutorial, ignore this message. To proceed, click Show advanced, and then click Proceed to localhost (unsafe). Open the ui folder and the index.html file. This opens the home page for our application, where we can initialize our app and load assets to build our page. The body tag includes an attribute named ng-app. The front-end of our application uses AngularJS to interact with our Node.js server routes.\nBelow the body tag, the ng-view tag is used as a hook for our Angular Router to load our desired template view.\n<!-- INITIALIZE THE APP -->\n<body ng-app=\"AuthCodeFlowTutorial\"> <!-- LOAD OUR VIEWS --> <ng-view></ng-view> ... Set up the router Open the app folder and the main.js file. Our application's logic lives here.\nFirst, we declare our angular module and inject the ngRoute dependency.\nangular.module('AuthCodeFlowTutorial', ['ngRoute'])\nNext, we initialize our Angular Router to manage our views and controllers. angular.module('AuthCodeFlowTutorial', ['ngRoute']) .config(function ($routeProvider) { $routeProvider .when('/home', { templateUrl: './app/main-template.html', controller: 'MainController' }) .when('/auth-success', { template: 'Login Successful', controller: 'AuthController' }) .otherwise({ redirectTo: '/home' }) In this example, we use two views and two controllers. As your app grows, you can add more views and controllers. Display the authorize buttons Open the app folder and the main-template.html file. This is our application's core view.\nThe main.js file holds the logic to initiate our AngularJS Controllers and our Angular Router.\nJust after the page title, the authorize buttons reference the server's authorization endpoint. When a user clicks one of these buttons, the authorization process begins. When a session is authenticated, the authorize buttons are hidden. The Authorize using redirect button initiates the authorization process by redirecting the browser to the authorization endpoint to initiate the authentication process.\n<div ng-if=\"!isAuthenticated\" class=\"col-sm-12 well\">\n...\n<div class=\"col-sm-5 well login-options\"> <span class=\"login-options-label\">Login using redirect</span> <a href=\"/auth/login\" class=\"btn btn-primary btn-block btn-lg\">Log in</a>\n</div> The Authorize using popup button opens a popup window that is directed to the server's authorization endpoint to initiate the authentication process.\n<div ng-if=\"!isAuthenticated\" class=\"col-sm-12 well\">\n...\n<div class=\"col-sm-5 col-sm-offset-2 well login-options\"> <span class=\"login-options-label\">Login using popup</span> <button ng-click=\"popupLogin()\" class=\"btn btn-primary btn-block btn-lg\" target=\"login-iframe\">Log in</button>\n</div> Using the popup option, our Angular code performs the following actions: It calls the popupLogin() method. This method opens a window at the specified URL, and we pass in a ?redirect= parameter and set it to the hash /%23/auth-success, which translates to:/#/auth-success.\n.controller('MainController', function ($scope, $http, $window) {\n...\n$scope.popupLogin = function () { var popup popup = window.open('auth/login?redirect=/%23/auth-success', 'login', 'height=450,width=600,'); if (window.focus) { popup.focus(); }\n} When the browser redirects to the /#/auth-success, the AuthController closes the current window and redirects the browser to the route '/' so our router will redirect the page to #/home.\n.controller('AuthController', function ($window) { ... $window.opener.location = '/'; $window.close();\n}) The JavaScript in main.js in the MainController uses Ajax calls to the /auth/authenticated endpoint to determine whether the users are logged in. If the users access token has expired or is invalid, the page displays the Authorize buttons. Users must log in to obtain a valid access token. angular.module('AuthCodeFlowTutorial', ['ngRoute']) ... .controller('MainController', function ($scope, $http) { ... /** * Check user access token. */ $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; /** * Access token is valid. Fetch constituent record. */ if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } }); }); Obtain an Access Token Click one of the Authorize buttons and enter your Blackbaud account credentials. After authentication, your browser redirects to the Blackbaud Authorization Service authorization form. Open index.js and /server/routes/auth.js. The Authroize button prompt a request to the web server's /auth/login endpoint. The route in the app's main index.js file directs requests to the getLogin() function within /server/routes/auth.js. // Register our OAUTH2 routes\napp.get('/auth/authenticated', routes.auth.getAuthenticated);\napp.get('/auth/login', routes.auth.getLogin);\napp.get('/auth/callback', routes.auth.getCallback);\napp.get('/auth/logout', routes.auth.getLogout); The auth.js file relies on the simple-oauth2 client library. To creating an object you must provide your registered application's Application ID and Application secret values, which reside in the project's sky.env file as the AUTH_CLIENT_ID and AUTH_CLIENT_SECRET environment variables. You need the URL to the Blackbaud Authorization Service along with the token endpoint. oauth2 = require('simple-oauth2')({ clientID: process.env.AUTH_CLIENT_ID, clientSecret: process.env.AUTH_CLIENT_SECRET, site: 'https://oauth2.apim.blackbaud.com/', tokenPath: '/token'\n}); To obtain an authorization code, the getLogin() function uses simple-oauth2's authorizeURL() function to display the Blackbaud Authorization Service's authorization form. After users approve or deny the request, the responses are redirected using the value of the AUTH_REDIRECT_URI environment variable: https://localhost:5000/auth/callback. function getLogin(request, response) { request.session.redirect = request.query.redirect; request.session.state = crypto.randomBytes(48).toString('hex'); response.redirect(oauth2.authCode.authorizeURL({ redirect_uri: process.env.AUTH_REDIRECT_URI, state: request.session.state }));\n} The access token exchange should occur server side. Do not expose the Application secret to users in client-side code. Do not expose your Application secret in a source code repository such as GitHub. The path /auth/callback is routed to the getCallback() function that exchanges authorization codes for access tokens. function getCallback(request, response) { ... options = { code: request.query.code, redirect_uri: process.env.AUTH_REDIRECT_URI }; oauth2.authCode.getToken(options, function (errorToken, ticket) { if (errorToken) { error = errorToken.message; } else { redirect = request.session.redirect || '/'; request.session.redirect = ''; request.session.state = ''; saveTicket(request, ticket); response.redirect(redirect); } }); ...\n} The access token value is not passed back to the client. Instead, the saveTicket() function saves it to the session state. function saveTicket(request, ticket) { request.session.ticket = ticket; request.session.expires = (new Date().getTime() + (1000 * ticket.expires_in));\n} Retrieve constituent data\nThe response redirects users to the home page and AppController. The AppController verifies that users are logged in through calls to the web server's /auth/authenticated endpoint. After verification, calls are made to the web server's api/constituents/280.\nangular.module('AuthCodeFlowTutorial', [])\n.controller('AppController', function ($scope, $http, $window) { // Checks the user access token. $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } // Access token is valid. Fetch constituent record. $http.get('/api/constituents/280').then(function (res) { $scope.constituent = res.data; $scope.isReady = true; }); }); Open /server/libs/sky.js and /server/routes/api.js. The route in the app's main index.js file directs the request to the getConstituent() function in /server/libs/sky.js. The call is passed along to /server/routes/api.js, which interacts directly with SKY API endpoints. Eventually the call makes its way to the proxy() function. Here, we can see the use of the Bb-Api-Subscription-Key and Authorization request headers: function proxy(request, method, endpoint, body, callback) { var options = { json: true, method: method, body: body, url: 'https://api.sky.blackbaud.com/constituent/v1/'' + endpoint, headers: { 'Bb-Api-Subscription-Key': process.env.AUTH_SUBSCRIPTION_KEY, 'Authorization': 'Bearer ' + request.session.ticket.access_token } }; promise(options) .then(callback) .catch(function (err) { console.log('Proxy Error: ', err); });\n} The Bb-Api-Subscription-Key value represents your Blackbaud developer account's approved subscription to an API product. You can use your account's Primary key or Secondary key. The Authorization value represents your authorization to use the API. The Authorization header starts with Bearer followed by a space and then the value for the access token. A call to the Constituent (Get) endpoint retrieves constituent data and sends it back to the browser. function get(request, endpoint, callback) { return proxy(request, 'GET', endpoint, '', callback);\n} The data is returned as JSON to the browser where the model's data is projected through the view of the Angular template. <div ng-if=\"isAuthenticated\"> <h3>Constituent: {{ constituent.name }}</h3> <p> See <a href=\"https://developer.sky.blackbaud.com/contract-reference#Constituent\" target=\"_blank\">Constituent</a> within the SKY API contact reference for a full listing of properties. </p> <div class=\"table-responsive\"> <table class=\"table table-striped table-hover\"> <thead> <tr> <th>Name</th> <th>Value</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>{{ constituent.id }}</td> </tr> <tr> <td>type</td> <td>{{ constituent.type }}</td> </tr> <tr> <td>lookup_id</td> <td>{{ constituent.lookup_id }}</td> </tr> <tr> <td>first</td> <td>{{ constituent.first }}</td> </tr> <tr> <td>last</td> <td>{{ constituent.last }}</td> </tr> </tbody> </table> </div> <a href=\"/auth/logout\" class=\"btn btn-primary\">Log out</a>\n</div> Summary\nYou should now have a fully functioning application using implicit-flow. Users of your app should be able to log in with their Blackbaud credentials, authorize the app, and get constituent data after they are authenticated. Be sure to take a look at our other code samples. You can create an issue to report a bug or request a feature for this code sample. For all other feature requests, see ideas. "
    },
    {
     "layout": "layout-container",
     "name": "PHP",
     "title": "Authorization Code Flow - PHP",
     "icon": "fa fa-3x fa-file-code-o",
     "description": "Learn how to create a PHP server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
     "order": 4,
     "showInNav": true,
     "showBreadcrumbs": true,
     "tutorial": true,
     "redirectUrl": "http://localhost:8888/auth/callback.php",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Code Auth-code-flow Php",
     "abspath": "docs/code/auth-code-flow/php/index.md",
     "uri": "/docs/code/auth-code-flow/php/",
     "text": " Comments Edit in GitHub Authorization Code Flow - PHP GitHub\nOverview\nWe use OAuth 2.0 to secure access to a user's SKY API data. In this tutorial we obtain user authorization using the Authorization Code Flow. From the user's perspective, the user authenticates as a Blackbaud user with the normal credentials for Blackbaud NXT and then authorizes (or denies) your application. To accomplish this, your application obtains an authorization code from the Blackbaud Authorization Service. The authorization code is then exchanged for an access token that signs requests to the SKY API on behalf of the user. The exchange involves your registered application's Application secret. For security reasons, the exchange is done through direct server-to-server communication. For this reason, we use PHP on the server.\nIn this tutorial, we will accomplish the following tasks: Ensure that you signed up for a developer account and obtained your subscription to an API product.\nRegister an application with SKY API.\nObtain authorization to access user data for a specific tenant.\nRetrieve data from a SKY API endpoint. For this tutorial, we strip down the user interface to highlight the Authorization Code Flow. Our Barkbaud code sample provides a rich user interface using SKY UX.\nPrerequisites A server such as your local machine that is capable of running PHP. We recommend MAMP.\nFamiliarity using a command line interface (CLI) such as Terminal or Windows Command Prompt.\nSign up for a GitHub account, if you don't already have one. The source code for this tutorial is stored in GitHub repository.\nInstall Git and have the ability to clone or fork a repo.\nA reliable Internet connection. Step 1 — Get Your Keys\nIf you have not already done so, complete the Getting Started guide. The tutorial guides you through signing up for a Blackbaud developer account and requesting a subscription to an API product. After you are approved, your subscription contains a Primary key and Secondary key. You can use either key as the subscription key value for the Bb-Api-Subscription-Key request header in calls to the API.\nDeveloper Sandbox Tenant\nAfter your subscription is approved, your developer account can access the Developer Sandbox tenant that represents a sample database. With this particular tenant, keep in mind that you share this sandbox with other developers. You can access the Developer Sandbox tenant and learn the various endpoints through the interactive SKY API Console within the API Reference.\nStep 2 — Register Your App\nTo call the SKY API, first register your application to obtain its unique set of credentials, which your users will use to enable your app to access their data From My Applications, click Register app. Enter the name, description, and logo of your application, as well as your organization's name. This information appears for users when they enable access to your application during the authorization process or in their product. In the Application website URL field, enter where users can learn more about your application online. Specify the URIs to use to redirect users back to your application during the authorization process. Note: The URIs must be absolute and use HTTPS. However, we do support http://localhost:port or http://127.0.0.1:port for local development. Important! When your application requests authorization to access a Blackbaud user's data, it includes a redirect_uri parameter in its query string. To authorize your application, this value must match exactly against one of the URIs you provide, including any trailing slashes. For more information, see common authorization issues. Click Save. After you register an app, note the ID and secret that appear under Application Credentials. These credentials are unique to your application, and verify its identity during the authorization process. ID -Your application's unique identifier. Your users will need this ID to enable your application to access their Blackbaud data. You can't modify this ID; if you need to change it for any reason, delete the application and re-register it. Secret -The key your application provides when it requests an access token to call the SKY API during the authorization process. This value is sensitive, so don't share it with anyone else! To display the secret, click Show. Very Important! Keep the application secret private and safe! If the secret is compromised, regenerate it. Blackbaud reserves the right to remove or deactivate your application to protect customer data. Step 3 — Grab the Source Code\nThe sky-api-tutorial-auth-code-php repo on GitHub provides a starter project to work through the Authorization Code Flow.\nUse a command prompt to clone the sky-api-tutorial-auth-code-php repo which creates a working directory by the same name that contains the code for the tutorial: $ git clone https://github.com/blackbaud/sky-api-tutorial-auth-code-php.git Step 4 — Prepare Your Environment Open the sky-api-tutorial-auth-code-php working directory and copy the configuration file config.php.sample as config.php. The config.php file contains the application's environment variables for the PHP environment. Update config.php with the following values: AUTH_CLIENT_ID Your registered application's Application ID (from Step 2). (See, Managing your apps.) AUTH_CLIENT_SECRET Your registered application's Application Secret (from Step 2). (See, Managing your apps.) AUTH_REDIRECT_URI One of your registered application's Redirect URIs (from Step 2). For this tutorial, enter http://localhost:8888/auth/callback.php. AUTH_SUBSCRIPTION_KEY Your Blackbaud Developer Subscription Key. Use either the Primary key or Secondary key, visible on your Blackbaud Developer Profile. Save the config file. Review the .gitignore file. The purpose of the file is to specify the untracked files to ignore. Note that config.php file is ignored. This prevents the config file from being synced to GitHub and protects your registered application's keys and other sensitive data from being exposed. Step 5 — Install and Configure MAMP\nAfter you have your subscription key, Application ID, Application secret, and the sky-api-auth-tutorial-php source code, It's time to establish your development environment. Since we are using the Authorization Code Flow, we need to use a server-side software platform. For this tutorial, we will use PHP with MAMP to serve the project locally. Download and install MAMP.\nLaunch MAMP and edit the following in Preferences. Tab Field Description Web Server Document Root Change this path to point at your cloned sky-api-tutorial-auth-code-php directory. Select Ok and Start Servers.\nIn a Web browser, navigate to localhost:8888. The Web server displays our app. Application Starting Point Open the index.html file. MAMP serves this file as our applications root where we initialize our app and load assets to build our page. The body tag includes an attribute named ng-app. The front-end of our application uses AngularJS to interact with our PHP server. <!-- INITIALIZE THE APP --> <body ng-app=\"AuthCodeFlowTutorial\"> <div class=\"container\" ng-controller=\"ConstituentCtrl\" ng-cloak> ... Open your browser to http://localhost:8888 to request the Home page. When the front page loads, the AngularJS on the Home page (index.html) makes a request to the /auth/authenticated.php endpoint:\n(function (angular) { 'use strict'; angular.module('AuthCodeFlowTutorial', []) .controller('ConstituentCtrl', function ($scope, $http, $window) { // Check user access token. $http.get('/auth/authenticated.php').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } ... The call to the endpoint routes to the corresponding php page (/auth/authenticated.php) and returns a Boolean representing the current user's authentication status. First, it requires and loads the /includes/blackbaud/blackbuad.php file.\n<?php require_once '../includes/blackbaud/blackbaud.php'; echo json_encode(array( 'authenticated' => blackbaud\\Session::isAuthenticated() )); ... Open the /includes/blackbaud/blackbaud.php file. The PHP code pulls in the rest of our required controllers, config environment variables, and http library for making API requests. We can see **require_once 'session.php';** pulls in the includes/blackbaud/session.php file. <?php // Error reporting, for development only. ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); require_once 'session.php'; require_once join(DIRECTORY_SEPARATOR, array($_SERVER['DOCUMENT_ROOT'], 'config.php')); require_once join(DIRECTORY_SEPARATOR, array('api', 'constituents.php')); require_once 'auth.php'; require_once 'http.php'; ... Open the /includes/blackbaud/session.php file. It begins by defining our namespace blackbaud, allowing the methods and variables defined beneath it to be accessed by any other classes also under that namespace. Our original call to /auth/authenticated/ made use of the isAuthenticated() method in this Session object. This method checks for the existance of a PHP $_SESSION object and looks for an access_token. If the application has not yet been authorized by the end user, then IsAuthenticated() will return false. <?php public static function isAuthenticated() { return isset($_SESSION[self::$tokenName]) && isset($_SESSION[self::$tokenName]['access_token']); } ... Display the Log in button If the user is not authenticated, a Log in button is displayed.\nNote: The browser may display a warning that the connection is not private. For this tutorial, you can ignore this message. To proceed, select Show advanced and then select Proceed to localhost (unsafe). Open the index.html file. Notice that the body tag includes an attribute named ng-app. The front-end of our application uses AngularJS to interact with our Web server routes. The div.container element includes an attribute named ng-controller which references an AngularJS controller to handle the model data.\n<body ng-app=\"AuthCodeFlowTutorial\"> <div class=\"container\" ng-controller=\"ConstituentCtrl\" ng-cloak> ...\nWhen the Home page first loads the app will not have received authorization from the user to access their SKY API data. As a result the isAuthenticated scope variable will be false and the Home page's Angular HTML template displays the Log in button.\n<div ng-if=\"!isAuthenticated\"> <a href=\"/auth/login\" class=\"btn btn-primary\">Log in</a>\n</div>\n... Obtain an Access Token Open /includes/blackbaud/auth.php.\nWhen the user selects the Log in button, a call is made to auth/login.php, which redirects the request to /includes/blackbaud/auth.php file. Here, the redirect() method is called, which redirects the browser to SKY API’s authorization endpoint to start the authentication and authorization process. The user must authenticate with their Blackbaud credentials (if they are not already signed in) and authorize your application to access their SKY API data.\n<?php\nclass Auth { public static function redirect() { $auth_uri = self::getAuthorizationUri(); header(\"Location: $auth_uri\", true, 301); exit(); } ... private static function getAuthorizationUri() { return AUTH_BASE_URI . 'authorization?' . http_build_query(array( 'client_id'=> AUTH_CLIENT_ID, 'response_type' => 'code', 'redirect_uri' => AUTH_REDIRECT_URI )); } ...\nOnce authorized, SKY API redirects the user back to the /auth/callback.php URI with an authorization code. Once an authorization code has been obtained, it exchanges the code for an access token. The app is then redirected back to the Home page.\n<?php\nrequire_once '../includes/blackbaud/blackbaud.php'; blackbaud\\Auth::exchangeCodeForAccessToken($_GET['code']); header('Location: /');\nexit(); ...\n// build out the request body with the code from the redirect URI, and call the fetchTokens() method, passing the newly made $body array.\npublic static function exchangeCodeForAccessToken($code = 0) {\n$body = array( 'code' => $code, 'grant_type' => 'authorization_code', 'redirect_uri' => AUTH_REDIRECT_URI\n);\nreturn self::fetchTokens($body);\n} ...\n// build out the appropriate token headers, and make the reqeust to the SKY API endpoint. Grab the returned JSON response and\n// store the tokens in the Session.\nprivate static function fetchTokens($body = array()) {\n$headers = array( 'Content-type: application/x-www-form-urlencoded', 'Authorization: Basic ' . base64_encode(AUTH_CLIENT_ID . ':' . AUTH_CLIENT_SECRET)\n); $url = AUTH_BASE_URI . 'token'; $response = Http::post($url, $body, $headers);\n$token = json_decode($response, true);\nSession::setToken($token);\nreturn $response;\n} Retrieve Constituent Data Open the index.html file.\nAngularJS again makes the request to auth/authenticated, which now returns true. Since the user is authorized, AngularJS then makes a request the application’s constituent API endpoint /api/constituents.php?id=280 to retrieve a constituent record.\nangular.module('AuthCodeFlowTutorial', []) .controller('ConstituentCtrl', function ($scope, $http, $watch) { // Check user access token. $http.get('/auth/authenticated.php').then(res => { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } // Access token is valid. Fetch constituent record. $http.get('/api/constituents.php?id=280').then(res => { $scope.constituent = res.data.constituent; $scope.isReady = true; }); }); ... Open api/constituents.php and includes/blackbaud/api/constituents.php. The get request in index.html file directs the request to api/constituents.php, where the access token is refreshed and the call is passed along to /includes/blackbaud/api/constituents.php with the id from the route param ?id=280 that we passed into the request. <?php ... $response = blackbaud\\Auth::refreshAccessToken(); $token = json_decode($response, true); if (!isset($token['access_token'])) { echo json_encode($token); return; } $data = blackbaud\\Constituents::getById($_GET['id']); ... The getById() method interacts directly with the SKY API endpoints making a get request to the https://api.sky.blackbaud.com/constituent/v1/constituents/280 endpoint and passing in the required headers. <?php ... self::$headers = array( 'Bb-Api-Subscription-Key: ' . AUTH_SUBSCRIPTION_KEY, 'Authorization: Bearer ' . Session::getAccessToken(), 'Content-type: application/x-www-form-urlencoded' ); self::$baseUri = SKY_API_BASE_URI . 'constituent/v1/'; } public static function getById($id = 0) { $url = self::$baseUri . 'constituents/' . $id; $response = Http::get($url, self::$headers); return json_decode($response, true); } ... The Bb-Api-Subscription-Key value represents your Blackbaud developer account's approved subscription to an API product. You can use your account's Primary key or Secondary key. The Authorization value represents your authorization to use the API. The Authorization header starts with Bearer followed by a space and then the value for the access token. A call to the Constituent (Get) endpoint retrieves constituent data and sends it back to the browser. function get(request, endpoint, callback) { return proxy(request, 'GET', endpoint, '', callback);\n} The data is returned as JSON to the browser where the model's data is projected through the view of the Angular template. <div ng-if=\"isAuthenticated\"> <h3>Constituent: {{ constituent.name }}</h3> <p> See <a href=\"https://developer.sky.blackbaud.com/contract-reference#Constituent\" target=\"_blank\">Constituent</a> within the SKY API contact reference for a full listing of properties. </p> <div class=\"table-responsive\"> <table class=\"table table-striped table-hover\"> <thead> <tr> <th>Name</th> <th>Value</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>{{ constituent.id }}</td> </tr> <tr> <td>type</td> <td>{{ constituent.type }}</td> </tr> <tr> <td>lookup_id</td> <td>{{ constituent.lookup_id }}</td> </tr> <tr> <td>first</td> <td>{{ constituent.first }}</td> </tr> <tr> <td>last</td> <td>{{ constituent.last }}</td> </tr> </tbody> </table> </div> <a href=\"/auth/logout\" class=\"btn btn-primary\">Log out</a>\n</div> Once the constituent information is retrieved and added to the front page, Log Out and Refresh Access Token buttons are displayed.\nOpen /auth/logout.php and includes/blackbaud/session.php.\nIf the user selects Log Out, they are redirected to /auth/logout.php, which calls the blackbaud\\Session::logout() in includes/blackaud/session.php. The logout() method destroys the token stored in the PHP server's $_SESSION. <?php ... public static function logout() { unset($_SESSION[self::$tokenName]); } ... If the user selects Refresh Access Token, AngularJS makes a request to /auth/refresh-token.php. The call is passed to the refreshAccessToken() method in includes/blackbaud/auth.php, which builds out the request body with the required fields. The grant_type is set to refresh_token and the refresh_token field is populated with the refresh_token we have stored in the $_SESSION. This body is then passed to the fetchTokens() method where the post to the SKY API endpoint is made. <?php ... public static function refreshAccessToken() { $body = array( 'grant_type' => 'refresh_token', 'refresh_token' => Session::getRefreshToken() ); return self::fetchTokens($body); } ... private static function fetchTokens($body = array()) { $headers = array( 'Content-type: application/x-www-form-urlencoded', 'Authorization: Basic ' . base64_encode(AUTH_CLIENT_ID . ':' . AUTH_CLIENT_SECRET) ); $url = AUTH_BASE_URI . 'token'; $response = Http::post($url, $body, $headers); $token = json_decode($response, true); Session::setToken($token); return $response; } ... The JSON response from SKY API is then parsed, the new set of tokens are stored in our $_SESSION, and the data is sent back to Angular to be displayed on the page for your reference. That's it! Be sure to take a look at our other code samples.\nYou can create an issue to report a bug or request a feature for this code sample. For all other feature requests, see ideas. "
    }
   ],
   "text": " Authorization Code Flow Important! Our code samples provide very basic examples of how to interact with the Blackbaud OAuth 2.0 Service. You are free to choose the client library and method that best suit your needs when creating production-level applications. C# .NET Core Learn how to create a .NET Core MVC C# server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our SKY API. Chrome Extension Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Authorization Code Flow. NodeJS Learn how to create a NodeJS server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our SKY API. PHP Learn how to create a PHP server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our SKY API. "
  },
  {
   "layout": "layout-container",
   "name": "C# .NET Core",
   "title": "Authorization Code Flow - C# .NET Core",
   "icon": "fa fa-fw fa-3x fa-windows",
   "description": "Learn how to create a .NET Core MVC C# server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
   "order": 1,
   "published": true,
   "showInNav": true,
   "showBreadcrumbs": true,
   "tutorial": true,
   "back_to_top": true,
   "redirectUrl": "http://localhost:5000/auth/callback",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Code Auth-code-flow C-sharp",
   "abspath": "docs/code/auth-code-flow/c-sharp/index.md",
   "uri": "/docs/code/auth-code-flow/c-sharp/",
   "text": " Comments Edit in GitHub Authorization Code Flow - C# .NET Core GitHub Live Demo\nOverview\nWe use OAuth 2.0 to secure access to a user's SKY API data. In this tutorial we obtain user authorization using the Authorization Code Flow. From the user's perspective, the user authenticates as a Blackbaud user with the normal credentials for Blackbaud NXT and then authorizes (or denies) your application. To accomplish this, your application obtains an authorization code from the Blackbaud Authorization Service. The authorization code is then exchanged for an access token that signs requests to the SKY API on behalf of the user. The exchange involves your registered application's Application secret. For security reasons, the exchange is done through direct server-to-server communication. For this reason, we use ASP.NET Core for the server-side platform and C#.\nIn this tutorial, we will accomplish the following tasks: Ensure that you signed up for a developer account and obtained your subscription to an API product.\nRegister an application with SKY API.\nObtain authorization to access user data for a specific tenant.\nRetrieve data from a SKY API endpoint. For this tutorial, we strip down the user interface to highlight the Authorization Code Flow. Our Barkbaud code sample provides a rich user interface using SKY UX.\nPrerequisites Since we are using the Authorization Code Flow, we need to use a server-side software platform, such as .NET Core. You will need to Download and install .NET Core\nFamiliarity using a command line interface (CLI) such as Terminal or Windows Command Prompt.\nSign up for a GitHub account, if you don't already have one. The source code for this tutorial is stored in GitHub repository.\nInstall Git and have the ability to clone or fork a repo.\nA reliable Internet connection. Step 1 — Get Your Keys\nIf you have not already done so, complete the Getting Started guide. The tutorial guides you through signing up for a Blackbaud developer account and requesting a subscription to an API product. After you are approved, your subscription contains a Primary key and Secondary key. You can use either key as the subscription key value for the Bb-Api-Subscription-Key request header in calls to the API.\nDeveloper Sandbox Tenant\nAfter your subscription is approved, your developer account can access the Developer Sandbox tenant that represents a sample database. With this particular tenant, keep in mind that you share this sandbox with other developers. You can access the Developer Sandbox tenant and learn the various endpoints through the interactive SKY API Console within the API Reference.\nStep 2 — Register Your App\nTo call the SKY API, first register your application to obtain its unique set of credentials, which your users will use to enable your app to access their data From My Applications, click Register app. Enter the name, description, and logo of your application, as well as your organization's name. This information appears for users when they enable access to your application during the authorization process or in their product. In the Application website URL field, enter where users can learn more about your application online. Specify the URIs to use to redirect users back to your application during the authorization process. Note: The URIs must be absolute and use HTTPS. However, we do support http://localhost:port or http://127.0.0.1:port for local development. Important! When your application requests authorization to access a Blackbaud user's data, it includes a redirect_uri parameter in its query string. To authorize your application, this value must match exactly against one of the URIs you provide, including any trailing slashes. For more information, see common authorization issues. Click Save. After you register an app, note the ID and secret that appear under Application Credentials. These credentials are unique to your application, and verify its identity during the authorization process. ID -Your application's unique identifier. Your users will need this ID to enable your application to access their Blackbaud data. You can't modify this ID; if you need to change it for any reason, delete the application and re-register it. Secret -The key your application provides when it requests an access token to call the SKY API during the authorization process. This value is sensitive, so don't share it with anyone else! To display the secret, click Show. Very Important! Keep the application secret private and safe! If the secret is compromised, regenerate it. Blackbaud reserves the right to remove or deactivate your application to protect customer data. Step 3 — Grab the Source Code\nThe sky-api-auth-tutorial-c-sharp repo on GitHub provides a starter project to work through the Authorization Code Flow. Use a command prompt to clone the sky-api-auth-tutorial-c-sharp repo which creates a working directory by the same name that contains the code for the tutorial: $ git clone https://github.com/blackbaud/sky-api-auth-tutorial-c-sharp.git Step 4 — Prepare Your Environment\nLet's explore some application settings files and prep your environment variables. Open the sky-api-auth-tutorial-c-sharp working directory.\nOpen the appsettings.json which details generic properties to be used by the application. Take note of the following SKY API URI property values: AuthBaseUri URI to the Authorization Service. SkyApiBaseUri URI to the SKY API Endpoints. For local development, duplicate the file appsettings.json-sample, renaming it to appsettings.Development.json. The appsettings.Development.json file contains your registered application's environment variables. Note that private properties, such as your Application ID and Application secret, are stored in this file. For security, the appsettings.Development.json is excluded from being syncronized with GitHub via the file .gitignore. At run time, the application will merge these properties into the available environment variables. In .NET Core, the Startup class, Startup.cs provides the entry point for an application, and is required for all applications. This class configures the application and sets up the required middleware. { \"AppSettings\": { \"AuthClientId\": \"\", \"AuthClientSecret\": \"\", \"AuthRedirectUri\": \"http://localhost:5000/auth/callback\", \"AuthSubscriptionKey\": \"\" }\n} Using the values from your registered application and the subscription key from your Blackbaud Developer Profile, update appsettings.Development.json with the following values. All values are required.: AuthClientId Your registered application's Application ID. AuthClientSecret Your registered application's Application secret. AuthRedirectUri One of your registered application's Redirect URIs. For this tutorial, we will use http://localhost:5000/auth/callback. AuthSubscriptionKey Your Blackbaud Developer Subscription Key. Use either the Primary key or Secondary key, visible on your Blackbaud Developer Profile. Save the file. Step 5 — Run the Application Using Command Prompt/Terminal/bash prompt, ensure you are in the working directory.\nOpen and review the project.json file. This file details the application’s dependencies. These NuGet modules (project dependencies) are installed when issuing the dotnet restore command within Command Prompt/Terminal/bash prompt.\nOn a Mac, issue the following commands to restore the packages specified in the project.json file and run the actual sample:\n$ dotnet restore\n$ export ASPNETCORE_ENVIRONMENT=Development && dotnet run On a PC, type:\n$ dotnet restore\n$ set ASPNETCORE_ENVIRONMENT=Development && dotnet run Visit http://localhost:5000/ to view your locally running application. Application Starting Point IIS is used as the webserver. An ASP.NET Core Module configured in project.json is used to list dependencies and configure IIS to launch and host your application.\nOpen the Program.cs file. The Main() method is the starting point of our application. It is responsible for initializing the application. We use WebHostBuilder to listen on a particular IP address and port: http://localhost:5000/. As of RC2 an ASP.NET Core application is a .NET Core Console application that calls into ASP.NET specific libraries. This code runs on the server-side and is not visible to the application user. Running the code server-side helps to protect your Application secret.\nusing System.IO;\nusing Microsoft.AspNetCore.Hosting; namespace Blackbaud.AuthCodeFlowTutorial\n{ public class Program { public static void Main(string[] args) { var host = new WebHostBuilder() .UseKestrel() .UseContentRoot(Directory.GetCurrentDirectory()) .UseIISIntegration() .UseStartup() .Build(); host.Run(); } }\n}\nOpen your browser to http://localhost:5000/ to request the Home page. When the front page loads, the AngularJS on the Home page (/Views/Shared/_Layout.cshtml) makes a request to the /auth/authenticated endpoint:\n(function (angular) { 'use strict'; angular.module('AuthCodeFlowTutorial', []) .controller('ConstituentCtrl', function ($scope, $http) { // Check user access token. $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } ...\nThe call to the endpoint routes to the corresponding controller (/Controllers/AuthenticationController.cs) and returns a Boolean representing the current user's authentication status. If the application has not yet been authorized by the end user, then IsAuthenticated() will return false.\n[HttpGet(\"authenticated\")]\npublic ActionResult Authenticated()\n{ return Json(new { authenticated = _authService.IsAuthenticated() });\n}\n... Displaying the Log in button If the user is not authenticated, a Log in button is displayed.\nNote: The browser may display a warning that the connection is not private. For this tutorial, you can ignore this message. To proceed, click Show advanced and then click Proceed to localhost (unsafe). Open the Views/Shared/_Layout.cshtml file. Notice that the body tag includes an attribute named ng-app. The front-end of our application uses AngularJS to interact with our Web server routes. The div.container element includes an attribute named ng-controller which references an AngularJS controller to handle the model data.\n<body ng-app=\"AuthCodeFlowTutorial\"> <div class=\"container\" ng-controller=\"ConstituentCtrl\" ng-cloak> ...\nWhen the Home page first loads the app will not have received authorization from the user to access their SKY API data. As a result the isAuthenticated scope variable will be false and the Home page's Angular HTML template displays the Log in button:\n<div ng-if=\"!isAuthenticated\"> <a href=\"/auth/login\" class=\"btn btn-primary\">Log in</a>\n</div>\n... Obtain an Access Token Open /Controllers/AuthenticationController.cs.\nWhen the user clicks the Log in button, a call is made to LogIn() which redirects the browser to SKY API’s authorization endpoint to start the authentication and authorization process. The user must authenticate with their Blackbaud credentials (if they are not already signed in) and authorize your application to access their SKY API data.\n[HttpGet(\"login\")]\npublic ActionResult LogIn()\n{ Uri address = _authService.GetAuthorizationUri(); return Redirect(address.ToString());\n}\n...\nOnce authorized, SKY API redirects the user back to the /auth/callback URI with an authorization code. Once an authorization code has been obtained, it is exchanged the code for an access token. The app is then redirected back to the Home page. [HttpGet(\"callback\")]\npublic ActionResult Callback()\n{ string code = Request.Query[\"code\"]; _authService.ExchangeCodeForAccessToken(code); return Redirect(\"/\");\n}\n... Retrieve Constituent Data Open the Home page (Views/Shared/_Layout.cshtml).\nAngularJS again makes the request to auth/authenticated, which now returns true. Since the user is authorized, AngularJS then makes a request the application’s constituent API endpoint /api/constituents/280 to retrieve a constituent record:\nangular.module('AuthCodeFlowTutorial', []) .controller('ConstituentCtrl', function ($scope, $http) { // Check user access token. $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } // Access token is valid. Fetch constituent record. $http.get('/api/constituents/280').then(function (res) { $scope.constituent = res.data; $scope.isReady = true; }); }); ... The data is returned as JSON to the Home page where the model's data is projected through the view of the HTML template:\n<div ng-if=\"isAuthenticated\"> <h3>Constituent: </h3> <p> See <a href=\"/api/entity-reference/constituent\">Constituent</a> within the SKY API entity reference for a full listing of properties. </p> <p ng-if=\"::constituent.error\" ng-bind=\"::constituent.error\" class=\"alert alert-danger\"></p> <div ng-if=\"::constituent.id\" class=\"table-responsive\"> <table class=\"table table-striped table-hover\"> <thead> <tr> <th>Name</th> <th>Value</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>{{ constituent.id }}</td> </tr> <tr> <td>type</td> <td>{{ constituent.type }}</td> </tr> <tr> <td>lookup_id</td> <td>{{ constituent.lookup_id }}</td> </tr> <tr> <td>first</td> <td>{{ constituent.first }}</td> </tr> <tr> <td>last</td> <td>{{ constituent.last }}</td> </tr> </tbody> </table> </div>\n... Once the constituent information is retrieved and added to the front page, Log Out and Refresh Access Token buttons are displayed.\nOpen /Controllers/AuthenticationController.cs\nIf the user clicks Log Out, they are redirected to /auth/logout which destroys the access/refresh token stored in the browser’s session.\nIf the user clicks Refresh Access Token, AngularJS makes a request to /auth/refresh-token, which asks SKY API to return a refreshed access token, which is then stored in the browser’s session. That's it! Be sure to take a look at our other code samples.\nCheck out the README where you can view a live demo of the application hosted on Microsoft Azure.\nThe README also contains instructions for deploying to Azure App Services rather than your local development environment.\nYou can create an issue to report a bug or request a feature for this code sample. For all other feature requests, see ideas. "
  },
  {
   "layout": "layout-container",
   "name": "Chrome Extension",
   "title": "Authorization Code Flow - Chrome Extension",
   "description": "Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Authorization Code Flow.",
   "order": 2,
   "icon": "fa fa-fw fa-3x fa-chrome",
   "showInNav": true,
   "showBreadcrumbs": true,
   "back_to_top": true,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Code Auth-code-flow Chrome-extension",
   "abspath": "docs/code/auth-code-flow/chrome-extension/index.md",
   "uri": "/docs/code/auth-code-flow/chrome-extension/",
   "text": " Edit in GitHub Authorization Code Flow - Chrome Extension GitHub\nLearn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Authorization Code Flow.\nView the source on GitHub "
  },
  {
   "layout": "layout-container",
   "name": "NodeJS",
   "title": "Authorization Code Flow - NodeJS",
   "description": "Learn how to create a NodeJS server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
   "order": 3,
   "icon": "fa fa-fw fa-3x fa-desktop",
   "published": true,
   "showInNav": true,
   "tutorial": true,
   "showBreadcrumbs": true,
   "back_to_top": true,
   "redirectUrl": "http://localhost:5000/auth/callback",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Code Auth-code-flow Nodejs",
   "abspath": "docs/code/auth-code-flow/nodejs/index.md",
   "uri": "/docs/code/auth-code-flow/nodejs/",
   "text": " Comments Edit in GitHub Authorization Code Flow - NodeJS GitHub\nOverview\nWe use OAuth 2.0 to secure access to a user's SKY API data. In this tutorial we obtain user authorization using the Authorization Code Flow. From the user's perspective, the user authenticates as a Blackbaud user with the normal credentials for Blackbaud NXT and then authorizes (or denies) your application. To accomplish this, your application obtains an authorization code from the Blackbaud Authorization Service. The authorization code is then exchanged for an access token that signs requests to the SKY API on behalf of the user. The exchange involves your registered application's Application secret. For security reasons, the exchange is done through direct server-to-server communication. For this reason, we use Node.js, a server-side platform.\nIn this tutorial, we will accomplish the following tasks: Ensure that you signed up for a developer account and obtained your subscription to an API product.\nRegister an application with SKY API.\nObtain authorization to access user data for a specific tenant.\nRetrieve data from a SKY API endpoint. For this tutorial, we strip down the user interface to highlight the Authorization Code Flow. Our Barkbaud code sample provides a rich user interface using SKY UX.\nPrerequisites A server such as your local machine that is capable of running Node.js.\nFamiliarity with Node.js, using NPM to install project dependencies, and environment variables including setting them in either an OSX/Linux or Windows environment.\nFamiliarity using a command line interface (CLI) such as Terminal or Windows Command Prompt.\nSign up for a GitHub account, if you don't already have one. The source code for this tutorial is stored in GitHub repository.\nInstall Git and have the ability to clone or fork a repo.\nA reliable Internet connection to clone the repo and install the project's dependencies. Step 1 — Get Your Keys\nIf you have not already done so, complete the Getting Started guide. The tutorial guides you through signing up for a Blackbaud developer account and requesting a subscription to an API product. After you are approved, your subscription contains a Primary key and Secondary key. You can use either key as the subscription key value for the Bb-Api-Subscription-Key request header in calls to the API.\nDeveloper Sandbox Tenant\nAfter your subscription is approved, your developer account can access the Developer Sandbox tenant that represents a sample database. Keep in mind that you share this sandbox with other developers. You can access the Developer Sandbox tenant through the interactive SKY API Console within the API Reference.\nStep 2 — Register Your App\nTo call the SKY API, first register your application to obtain its unique set of credentials, which your users will use to enable your app to access their data From My Applications, click Register app. Enter the name, description, and logo of your application, as well as your organization's name. This information appears for users when they enable access to your application during the authorization process or in their product. In the Application website URL field, enter where users can learn more about your application online. Specify the URIs to use to redirect users back to your application during the authorization process. Note: The URIs must be absolute and use HTTPS. However, we do support http://localhost:port or http://127.0.0.1:port for local development. Important! When your application requests authorization to access a Blackbaud user's data, it includes a redirect_uri parameter in its query string. To authorize your application, this value must match exactly against one of the URIs you provide, including any trailing slashes. For more information, see common authorization issues. Click Save. After you register an app, note the ID and secret that appear under Application Credentials. These credentials are unique to your application, and verify its identity during the authorization process. ID -Your application's unique identifier. Your users will need this ID to enable your application to access their Blackbaud data. You can't modify this ID; if you need to change it for any reason, delete the application and re-register it. Secret -The key your application provides when it requests an access token to call the SKY API during the authorization process. This value is sensitive, so don't share it with anyone else! To display the secret, click Show. Very Important! Keep the application secret private and safe! If the secret is compromised, regenerate it. Blackbaud reserves the right to remove or deactivate your application to protect customer data. Step 3 — Install Node.js\nAfter you have your subscription key, Application ID, and Application secret, it's time to establish your development environment. Since we are using the Authorization Code Flow, we need to use a server-side software platform. For this tutorial, we will use Node.js. Download and install Node.js. Use the default settings for your development environment.\nCreate a file named testserver.js and add the following code: // Create a very simple HTTP web server on your local machine. // Set up a HTTP Web server and client, require('http'). var http = require('http'); // createServer returns a new instance of the http server. // A function is used as a request listener. // req is an instance of the incoming request. // res is an instance of the server response. // When you browse to http://localhost:1337/, a 'request' event occurs and // \"Hello World\" is written from the HTTP Web server back to your browser. http.createServer(function (req, res) { res.writeHead(200, { 'Content-Type': 'text/plain' }); res.end('Hello World'); }).listen(1337, \"localhost\"); console.log('Server running at http://localhost:1337/'); Save the file in a folder named testnodejs. From a command prompt, change the directory to testnodejs and run the testserver.js file: $ cd testnodejs\n$ node testserver.js The Web server listens for requests on your localhost, port 1337. In a Web browser, navigate to localhost:1337. The Web server displays a page with with \"Hello World.\" To stop the Web server, type CTRL-C in the command line. Step 4 — Grab the Source Code\nThe sky-api-auth-tutorial repo on GitHub provides a starter project to work through the Authorization Code Flow. Use a command prompt to clone the sky-api-auth-tutorial. The following command creates a working directory named sky-api-auth-tutorial that contains the code for the tutorial: $ git clone https://github.com/blackbaud/sky-api-auth-tutorial.git Step 5 — Prepare Your Environment Open the sky-api-auth-tutorial working directory and copy the configuration file sky.env-sample as sky.env. The sky.env file contains the application's environment variables for NodeJS environments. Update sky.env with the following values: AUTH_CLIENT_ID Your registered application's Application ID (from Step 2). (See, Managing your apps.) AUTH_CLIENT_SECRET Your registered application's Application Secret (from Step 2). (See, Managing your apps.) AUTH_REDIRECT_URI One of your registered application's Redirect URIs (from Step 2). For this tutorial, enter http://localhost:5000/auth/callback. (See My Applications.) AUTH_SUBSCRIPTION_KEY Your Blackbaud Developer Subscription Key. Use either the Primary key or Secondary key, visible on your Blackbaud Developer Profile. PORT The Web server port that will run the application. For this tutorial, enter 5000. Save the environment file. Review the .gitignore file. The purpose of the file is to specify the untracked files to ignore. Note that any .env files are ignored. This prevents the environment files from being synced to GitHub and protects your registered application's keys and other sensitive data from being exposed. Step 6 — Install Dependencies From the working directory, run npm install to install the project dependencies.\nNPM is the package manager that comes bundled with Node.js (since you already installed Node.js, you also have NPM). The command npm install downloads any dependencies listed in the package.json file and adds them to the app's node_modules directory (this command also creates this directory if it doesn't already exist). Each dependency is represented as a child directory of node_modules. $ cd sky-api-auth-tutorial\n$ npm install After you run npm install, verify that the sky-api-auth-tutorial working directory contains the node_modules subfolder. npm install depends on a reliable Internet connection to install dependencies. If you have issues running the command, you can hard delete the node_modules folder and run npm install again. Step 7 — Run the Application Using Command Prompt/Terminal, ensure you are in the working directory.\nType npm start to start the application server at http://localhost:5000. $ npm start Application starting point Open the index.js file. This is the starting point of our application. This code runs on the server side and is not visible to the application user. The code performs the following:\nIt registers our application dependencies such as Express.\nIt handles authorization and user requests to the home page and data endpoints.\nIt creates a web server on your local machine at https://localhost:5000. To request the home page open your browser to http://localhost:5000/. It displays the authorization options. Your browser may display a warning that the connection is not private. For this tutorial, ignore this message. To proceed, click Show advanced, and then click Proceed to localhost (unsafe). Open the ui folder and the index.html file. This opens the home page for our application, where we can initialize our app and load assets to build our page. The body tag includes an attribute named ng-app. The front-end of our application uses AngularJS to interact with our Node.js server routes.\nBelow the body tag, the ng-view tag is used as a hook for our Angular Router to load our desired template view.\n<!-- INITIALIZE THE APP -->\n<body ng-app=\"AuthCodeFlowTutorial\"> <!-- LOAD OUR VIEWS --> <ng-view></ng-view> ... Set up the router Open the app folder and the main.js file. Our application's logic lives here.\nFirst, we declare our angular module and inject the ngRoute dependency.\nangular.module('AuthCodeFlowTutorial', ['ngRoute'])\nNext, we initialize our Angular Router to manage our views and controllers. angular.module('AuthCodeFlowTutorial', ['ngRoute']) .config(function ($routeProvider) { $routeProvider .when('/home', { templateUrl: './app/main-template.html', controller: 'MainController' }) .when('/auth-success', { template: 'Login Successful', controller: 'AuthController' }) .otherwise({ redirectTo: '/home' }) In this example, we use two views and two controllers. As your app grows, you can add more views and controllers. Display the authorize buttons Open the app folder and the main-template.html file. This is our application's core view.\nThe main.js file holds the logic to initiate our AngularJS Controllers and our Angular Router.\nJust after the page title, the authorize buttons reference the server's authorization endpoint. When a user clicks one of these buttons, the authorization process begins. When a session is authenticated, the authorize buttons are hidden. The Authorize using redirect button initiates the authorization process by redirecting the browser to the authorization endpoint to initiate the authentication process.\n<div ng-if=\"!isAuthenticated\" class=\"col-sm-12 well\">\n...\n<div class=\"col-sm-5 well login-options\"> <span class=\"login-options-label\">Login using redirect</span> <a href=\"/auth/login\" class=\"btn btn-primary btn-block btn-lg\">Log in</a>\n</div> The Authorize using popup button opens a popup window that is directed to the server's authorization endpoint to initiate the authentication process.\n<div ng-if=\"!isAuthenticated\" class=\"col-sm-12 well\">\n...\n<div class=\"col-sm-5 col-sm-offset-2 well login-options\"> <span class=\"login-options-label\">Login using popup</span> <button ng-click=\"popupLogin()\" class=\"btn btn-primary btn-block btn-lg\" target=\"login-iframe\">Log in</button>\n</div> Using the popup option, our Angular code performs the following actions: It calls the popupLogin() method. This method opens a window at the specified URL, and we pass in a ?redirect= parameter and set it to the hash /%23/auth-success, which translates to:/#/auth-success.\n.controller('MainController', function ($scope, $http, $window) {\n...\n$scope.popupLogin = function () { var popup popup = window.open('auth/login?redirect=/%23/auth-success', 'login', 'height=450,width=600,'); if (window.focus) { popup.focus(); }\n} When the browser redirects to the /#/auth-success, the AuthController closes the current window and redirects the browser to the route '/' so our router will redirect the page to #/home.\n.controller('AuthController', function ($window) { ... $window.opener.location = '/'; $window.close();\n}) The JavaScript in main.js in the MainController uses Ajax calls to the /auth/authenticated endpoint to determine whether the users are logged in. If the users access token has expired or is invalid, the page displays the Authorize buttons. Users must log in to obtain a valid access token. angular.module('AuthCodeFlowTutorial', ['ngRoute']) ... .controller('MainController', function ($scope, $http) { ... /** * Check user access token. */ $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; /** * Access token is valid. Fetch constituent record. */ if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } }); }); Obtain an Access Token Click one of the Authorize buttons and enter your Blackbaud account credentials. After authentication, your browser redirects to the Blackbaud Authorization Service authorization form. Open index.js and /server/routes/auth.js. The Authroize button prompt a request to the web server's /auth/login endpoint. The route in the app's main index.js file directs requests to the getLogin() function within /server/routes/auth.js. // Register our OAUTH2 routes\napp.get('/auth/authenticated', routes.auth.getAuthenticated);\napp.get('/auth/login', routes.auth.getLogin);\napp.get('/auth/callback', routes.auth.getCallback);\napp.get('/auth/logout', routes.auth.getLogout); The auth.js file relies on the simple-oauth2 client library. To creating an object you must provide your registered application's Application ID and Application secret values, which reside in the project's sky.env file as the AUTH_CLIENT_ID and AUTH_CLIENT_SECRET environment variables. You need the URL to the Blackbaud Authorization Service along with the token endpoint. oauth2 = require('simple-oauth2')({ clientID: process.env.AUTH_CLIENT_ID, clientSecret: process.env.AUTH_CLIENT_SECRET, site: 'https://oauth2.apim.blackbaud.com/', tokenPath: '/token'\n}); To obtain an authorization code, the getLogin() function uses simple-oauth2's authorizeURL() function to display the Blackbaud Authorization Service's authorization form. After users approve or deny the request, the responses are redirected using the value of the AUTH_REDIRECT_URI environment variable: https://localhost:5000/auth/callback. function getLogin(request, response) { request.session.redirect = request.query.redirect; request.session.state = crypto.randomBytes(48).toString('hex'); response.redirect(oauth2.authCode.authorizeURL({ redirect_uri: process.env.AUTH_REDIRECT_URI, state: request.session.state }));\n} The access token exchange should occur server side. Do not expose the Application secret to users in client-side code. Do not expose your Application secret in a source code repository such as GitHub. The path /auth/callback is routed to the getCallback() function that exchanges authorization codes for access tokens. function getCallback(request, response) { ... options = { code: request.query.code, redirect_uri: process.env.AUTH_REDIRECT_URI }; oauth2.authCode.getToken(options, function (errorToken, ticket) { if (errorToken) { error = errorToken.message; } else { redirect = request.session.redirect || '/'; request.session.redirect = ''; request.session.state = ''; saveTicket(request, ticket); response.redirect(redirect); } }); ...\n} The access token value is not passed back to the client. Instead, the saveTicket() function saves it to the session state. function saveTicket(request, ticket) { request.session.ticket = ticket; request.session.expires = (new Date().getTime() + (1000 * ticket.expires_in));\n} Retrieve constituent data\nThe response redirects users to the home page and AppController. The AppController verifies that users are logged in through calls to the web server's /auth/authenticated endpoint. After verification, calls are made to the web server's api/constituents/280.\nangular.module('AuthCodeFlowTutorial', [])\n.controller('AppController', function ($scope, $http, $window) { // Checks the user access token. $http.get('/auth/authenticated').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } // Access token is valid. Fetch constituent record. $http.get('/api/constituents/280').then(function (res) { $scope.constituent = res.data; $scope.isReady = true; }); }); Open /server/libs/sky.js and /server/routes/api.js. The route in the app's main index.js file directs the request to the getConstituent() function in /server/libs/sky.js. The call is passed along to /server/routes/api.js, which interacts directly with SKY API endpoints. Eventually the call makes its way to the proxy() function. Here, we can see the use of the Bb-Api-Subscription-Key and Authorization request headers: function proxy(request, method, endpoint, body, callback) { var options = { json: true, method: method, body: body, url: 'https://api.sky.blackbaud.com/constituent/v1/'' + endpoint, headers: { 'Bb-Api-Subscription-Key': process.env.AUTH_SUBSCRIPTION_KEY, 'Authorization': 'Bearer ' + request.session.ticket.access_token } }; promise(options) .then(callback) .catch(function (err) { console.log('Proxy Error: ', err); });\n} The Bb-Api-Subscription-Key value represents your Blackbaud developer account's approved subscription to an API product. You can use your account's Primary key or Secondary key. The Authorization value represents your authorization to use the API. The Authorization header starts with Bearer followed by a space and then the value for the access token. A call to the Constituent (Get) endpoint retrieves constituent data and sends it back to the browser. function get(request, endpoint, callback) { return proxy(request, 'GET', endpoint, '', callback);\n} The data is returned as JSON to the browser where the model's data is projected through the view of the Angular template. <div ng-if=\"isAuthenticated\"> <h3>Constituent: {{ constituent.name }}</h3> <p> See <a href=\"https://developer.sky.blackbaud.com/contract-reference#Constituent\" target=\"_blank\">Constituent</a> within the SKY API contact reference for a full listing of properties. </p> <div class=\"table-responsive\"> <table class=\"table table-striped table-hover\"> <thead> <tr> <th>Name</th> <th>Value</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>{{ constituent.id }}</td> </tr> <tr> <td>type</td> <td>{{ constituent.type }}</td> </tr> <tr> <td>lookup_id</td> <td>{{ constituent.lookup_id }}</td> </tr> <tr> <td>first</td> <td>{{ constituent.first }}</td> </tr> <tr> <td>last</td> <td>{{ constituent.last }}</td> </tr> </tbody> </table> </div> <a href=\"/auth/logout\" class=\"btn btn-primary\">Log out</a>\n</div> Summary\nYou should now have a fully functioning application using implicit-flow. Users of your app should be able to log in with their Blackbaud credentials, authorize the app, and get constituent data after they are authenticated. Be sure to take a look at our other code samples. You can create an issue to report a bug or request a feature for this code sample. For all other feature requests, see ideas. "
  },
  {
   "layout": "layout-container",
   "name": "PHP",
   "title": "Authorization Code Flow - PHP",
   "icon": "fa fa-3x fa-file-code-o",
   "description": "Learn how to create a PHP server-side app that utilizes the OAuth 2.0 Authorization Code Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
   "order": 4,
   "showInNav": true,
   "showBreadcrumbs": true,
   "tutorial": true,
   "redirectUrl": "http://localhost:8888/auth/callback.php",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Code Auth-code-flow Php",
   "abspath": "docs/code/auth-code-flow/php/index.md",
   "uri": "/docs/code/auth-code-flow/php/",
   "text": " Comments Edit in GitHub Authorization Code Flow - PHP GitHub\nOverview\nWe use OAuth 2.0 to secure access to a user's SKY API data. In this tutorial we obtain user authorization using the Authorization Code Flow. From the user's perspective, the user authenticates as a Blackbaud user with the normal credentials for Blackbaud NXT and then authorizes (or denies) your application. To accomplish this, your application obtains an authorization code from the Blackbaud Authorization Service. The authorization code is then exchanged for an access token that signs requests to the SKY API on behalf of the user. The exchange involves your registered application's Application secret. For security reasons, the exchange is done through direct server-to-server communication. For this reason, we use PHP on the server.\nIn this tutorial, we will accomplish the following tasks: Ensure that you signed up for a developer account and obtained your subscription to an API product.\nRegister an application with SKY API.\nObtain authorization to access user data for a specific tenant.\nRetrieve data from a SKY API endpoint. For this tutorial, we strip down the user interface to highlight the Authorization Code Flow. Our Barkbaud code sample provides a rich user interface using SKY UX.\nPrerequisites A server such as your local machine that is capable of running PHP. We recommend MAMP.\nFamiliarity using a command line interface (CLI) such as Terminal or Windows Command Prompt.\nSign up for a GitHub account, if you don't already have one. The source code for this tutorial is stored in GitHub repository.\nInstall Git and have the ability to clone or fork a repo.\nA reliable Internet connection. Step 1 — Get Your Keys\nIf you have not already done so, complete the Getting Started guide. The tutorial guides you through signing up for a Blackbaud developer account and requesting a subscription to an API product. After you are approved, your subscription contains a Primary key and Secondary key. You can use either key as the subscription key value for the Bb-Api-Subscription-Key request header in calls to the API.\nDeveloper Sandbox Tenant\nAfter your subscription is approved, your developer account can access the Developer Sandbox tenant that represents a sample database. With this particular tenant, keep in mind that you share this sandbox with other developers. You can access the Developer Sandbox tenant and learn the various endpoints through the interactive SKY API Console within the API Reference.\nStep 2 — Register Your App\nTo call the SKY API, first register your application to obtain its unique set of credentials, which your users will use to enable your app to access their data From My Applications, click Register app. Enter the name, description, and logo of your application, as well as your organization's name. This information appears for users when they enable access to your application during the authorization process or in their product. In the Application website URL field, enter where users can learn more about your application online. Specify the URIs to use to redirect users back to your application during the authorization process. Note: The URIs must be absolute and use HTTPS. However, we do support http://localhost:port or http://127.0.0.1:port for local development. Important! When your application requests authorization to access a Blackbaud user's data, it includes a redirect_uri parameter in its query string. To authorize your application, this value must match exactly against one of the URIs you provide, including any trailing slashes. For more information, see common authorization issues. Click Save. After you register an app, note the ID and secret that appear under Application Credentials. These credentials are unique to your application, and verify its identity during the authorization process. ID -Your application's unique identifier. Your users will need this ID to enable your application to access their Blackbaud data. You can't modify this ID; if you need to change it for any reason, delete the application and re-register it. Secret -The key your application provides when it requests an access token to call the SKY API during the authorization process. This value is sensitive, so don't share it with anyone else! To display the secret, click Show. Very Important! Keep the application secret private and safe! If the secret is compromised, regenerate it. Blackbaud reserves the right to remove or deactivate your application to protect customer data. Step 3 — Grab the Source Code\nThe sky-api-tutorial-auth-code-php repo on GitHub provides a starter project to work through the Authorization Code Flow.\nUse a command prompt to clone the sky-api-tutorial-auth-code-php repo which creates a working directory by the same name that contains the code for the tutorial: $ git clone https://github.com/blackbaud/sky-api-tutorial-auth-code-php.git Step 4 — Prepare Your Environment Open the sky-api-tutorial-auth-code-php working directory and copy the configuration file config.php.sample as config.php. The config.php file contains the application's environment variables for the PHP environment. Update config.php with the following values: AUTH_CLIENT_ID Your registered application's Application ID (from Step 2). (See, Managing your apps.) AUTH_CLIENT_SECRET Your registered application's Application Secret (from Step 2). (See, Managing your apps.) AUTH_REDIRECT_URI One of your registered application's Redirect URIs (from Step 2). For this tutorial, enter http://localhost:8888/auth/callback.php. AUTH_SUBSCRIPTION_KEY Your Blackbaud Developer Subscription Key. Use either the Primary key or Secondary key, visible on your Blackbaud Developer Profile. Save the config file. Review the .gitignore file. The purpose of the file is to specify the untracked files to ignore. Note that config.php file is ignored. This prevents the config file from being synced to GitHub and protects your registered application's keys and other sensitive data from being exposed. Step 5 — Install and Configure MAMP\nAfter you have your subscription key, Application ID, Application secret, and the sky-api-auth-tutorial-php source code, It's time to establish your development environment. Since we are using the Authorization Code Flow, we need to use a server-side software platform. For this tutorial, we will use PHP with MAMP to serve the project locally. Download and install MAMP.\nLaunch MAMP and edit the following in Preferences. Tab Field Description Web Server Document Root Change this path to point at your cloned sky-api-tutorial-auth-code-php directory. Select Ok and Start Servers.\nIn a Web browser, navigate to localhost:8888. The Web server displays our app. Application Starting Point Open the index.html file. MAMP serves this file as our applications root where we initialize our app and load assets to build our page. The body tag includes an attribute named ng-app. The front-end of our application uses AngularJS to interact with our PHP server. <!-- INITIALIZE THE APP --> <body ng-app=\"AuthCodeFlowTutorial\"> <div class=\"container\" ng-controller=\"ConstituentCtrl\" ng-cloak> ... Open your browser to http://localhost:8888 to request the Home page. When the front page loads, the AngularJS on the Home page (index.html) makes a request to the /auth/authenticated.php endpoint:\n(function (angular) { 'use strict'; angular.module('AuthCodeFlowTutorial', []) .controller('ConstituentCtrl', function ($scope, $http, $window) { // Check user access token. $http.get('/auth/authenticated.php').then(function (res) { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } ... The call to the endpoint routes to the corresponding php page (/auth/authenticated.php) and returns a Boolean representing the current user's authentication status. First, it requires and loads the /includes/blackbaud/blackbuad.php file.\n<?php require_once '../includes/blackbaud/blackbaud.php'; echo json_encode(array( 'authenticated' => blackbaud\\Session::isAuthenticated() )); ... Open the /includes/blackbaud/blackbaud.php file. The PHP code pulls in the rest of our required controllers, config environment variables, and http library for making API requests. We can see **require_once 'session.php';** pulls in the includes/blackbaud/session.php file. <?php // Error reporting, for development only. ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); require_once 'session.php'; require_once join(DIRECTORY_SEPARATOR, array($_SERVER['DOCUMENT_ROOT'], 'config.php')); require_once join(DIRECTORY_SEPARATOR, array('api', 'constituents.php')); require_once 'auth.php'; require_once 'http.php'; ... Open the /includes/blackbaud/session.php file. It begins by defining our namespace blackbaud, allowing the methods and variables defined beneath it to be accessed by any other classes also under that namespace. Our original call to /auth/authenticated/ made use of the isAuthenticated() method in this Session object. This method checks for the existance of a PHP $_SESSION object and looks for an access_token. If the application has not yet been authorized by the end user, then IsAuthenticated() will return false. <?php public static function isAuthenticated() { return isset($_SESSION[self::$tokenName]) && isset($_SESSION[self::$tokenName]['access_token']); } ... Display the Log in button If the user is not authenticated, a Log in button is displayed.\nNote: The browser may display a warning that the connection is not private. For this tutorial, you can ignore this message. To proceed, select Show advanced and then select Proceed to localhost (unsafe). Open the index.html file. Notice that the body tag includes an attribute named ng-app. The front-end of our application uses AngularJS to interact with our Web server routes. The div.container element includes an attribute named ng-controller which references an AngularJS controller to handle the model data.\n<body ng-app=\"AuthCodeFlowTutorial\"> <div class=\"container\" ng-controller=\"ConstituentCtrl\" ng-cloak> ...\nWhen the Home page first loads the app will not have received authorization from the user to access their SKY API data. As a result the isAuthenticated scope variable will be false and the Home page's Angular HTML template displays the Log in button.\n<div ng-if=\"!isAuthenticated\"> <a href=\"/auth/login\" class=\"btn btn-primary\">Log in</a>\n</div>\n... Obtain an Access Token Open /includes/blackbaud/auth.php.\nWhen the user selects the Log in button, a call is made to auth/login.php, which redirects the request to /includes/blackbaud/auth.php file. Here, the redirect() method is called, which redirects the browser to SKY API’s authorization endpoint to start the authentication and authorization process. The user must authenticate with their Blackbaud credentials (if they are not already signed in) and authorize your application to access their SKY API data.\n<?php\nclass Auth { public static function redirect() { $auth_uri = self::getAuthorizationUri(); header(\"Location: $auth_uri\", true, 301); exit(); } ... private static function getAuthorizationUri() { return AUTH_BASE_URI . 'authorization?' . http_build_query(array( 'client_id'=> AUTH_CLIENT_ID, 'response_type' => 'code', 'redirect_uri' => AUTH_REDIRECT_URI )); } ...\nOnce authorized, SKY API redirects the user back to the /auth/callback.php URI with an authorization code. Once an authorization code has been obtained, it exchanges the code for an access token. The app is then redirected back to the Home page.\n<?php\nrequire_once '../includes/blackbaud/blackbaud.php'; blackbaud\\Auth::exchangeCodeForAccessToken($_GET['code']); header('Location: /');\nexit(); ...\n// build out the request body with the code from the redirect URI, and call the fetchTokens() method, passing the newly made $body array.\npublic static function exchangeCodeForAccessToken($code = 0) {\n$body = array( 'code' => $code, 'grant_type' => 'authorization_code', 'redirect_uri' => AUTH_REDIRECT_URI\n);\nreturn self::fetchTokens($body);\n} ...\n// build out the appropriate token headers, and make the reqeust to the SKY API endpoint. Grab the returned JSON response and\n// store the tokens in the Session.\nprivate static function fetchTokens($body = array()) {\n$headers = array( 'Content-type: application/x-www-form-urlencoded', 'Authorization: Basic ' . base64_encode(AUTH_CLIENT_ID . ':' . AUTH_CLIENT_SECRET)\n); $url = AUTH_BASE_URI . 'token'; $response = Http::post($url, $body, $headers);\n$token = json_decode($response, true);\nSession::setToken($token);\nreturn $response;\n} Retrieve Constituent Data Open the index.html file.\nAngularJS again makes the request to auth/authenticated, which now returns true. Since the user is authorized, AngularJS then makes a request the application’s constituent API endpoint /api/constituents.php?id=280 to retrieve a constituent record.\nangular.module('AuthCodeFlowTutorial', []) .controller('ConstituentCtrl', function ($scope, $http, $watch) { // Check user access token. $http.get('/auth/authenticated.php').then(res => { $scope.isAuthenticated = res.data.authenticated; if ($scope.isAuthenticated === false) { $scope.isReady = true; return; } // Access token is valid. Fetch constituent record. $http.get('/api/constituents.php?id=280').then(res => { $scope.constituent = res.data.constituent; $scope.isReady = true; }); }); ... Open api/constituents.php and includes/blackbaud/api/constituents.php. The get request in index.html file directs the request to api/constituents.php, where the access token is refreshed and the call is passed along to /includes/blackbaud/api/constituents.php with the id from the route param ?id=280 that we passed into the request. <?php ... $response = blackbaud\\Auth::refreshAccessToken(); $token = json_decode($response, true); if (!isset($token['access_token'])) { echo json_encode($token); return; } $data = blackbaud\\Constituents::getById($_GET['id']); ... The getById() method interacts directly with the SKY API endpoints making a get request to the https://api.sky.blackbaud.com/constituent/v1/constituents/280 endpoint and passing in the required headers. <?php ... self::$headers = array( 'Bb-Api-Subscription-Key: ' . AUTH_SUBSCRIPTION_KEY, 'Authorization: Bearer ' . Session::getAccessToken(), 'Content-type: application/x-www-form-urlencoded' ); self::$baseUri = SKY_API_BASE_URI . 'constituent/v1/'; } public static function getById($id = 0) { $url = self::$baseUri . 'constituents/' . $id; $response = Http::get($url, self::$headers); return json_decode($response, true); } ... The Bb-Api-Subscription-Key value represents your Blackbaud developer account's approved subscription to an API product. You can use your account's Primary key or Secondary key. The Authorization value represents your authorization to use the API. The Authorization header starts with Bearer followed by a space and then the value for the access token. A call to the Constituent (Get) endpoint retrieves constituent data and sends it back to the browser. function get(request, endpoint, callback) { return proxy(request, 'GET', endpoint, '', callback);\n} The data is returned as JSON to the browser where the model's data is projected through the view of the Angular template. <div ng-if=\"isAuthenticated\"> <h3>Constituent: {{ constituent.name }}</h3> <p> See <a href=\"https://developer.sky.blackbaud.com/contract-reference#Constituent\" target=\"_blank\">Constituent</a> within the SKY API contact reference for a full listing of properties. </p> <div class=\"table-responsive\"> <table class=\"table table-striped table-hover\"> <thead> <tr> <th>Name</th> <th>Value</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>{{ constituent.id }}</td> </tr> <tr> <td>type</td> <td>{{ constituent.type }}</td> </tr> <tr> <td>lookup_id</td> <td>{{ constituent.lookup_id }}</td> </tr> <tr> <td>first</td> <td>{{ constituent.first }}</td> </tr> <tr> <td>last</td> <td>{{ constituent.last }}</td> </tr> </tbody> </table> </div> <a href=\"/auth/logout\" class=\"btn btn-primary\">Log out</a>\n</div> Once the constituent information is retrieved and added to the front page, Log Out and Refresh Access Token buttons are displayed.\nOpen /auth/logout.php and includes/blackbaud/session.php.\nIf the user selects Log Out, they are redirected to /auth/logout.php, which calls the blackbaud\\Session::logout() in includes/blackaud/session.php. The logout() method destroys the token stored in the PHP server's $_SESSION. <?php ... public static function logout() { unset($_SESSION[self::$tokenName]); } ... If the user selects Refresh Access Token, AngularJS makes a request to /auth/refresh-token.php. The call is passed to the refreshAccessToken() method in includes/blackbaud/auth.php, which builds out the request body with the required fields. The grant_type is set to refresh_token and the refresh_token field is populated with the refresh_token we have stored in the $_SESSION. This body is then passed to the fetchTokens() method where the post to the SKY API endpoint is made. <?php ... public static function refreshAccessToken() { $body = array( 'grant_type' => 'refresh_token', 'refresh_token' => Session::getRefreshToken() ); return self::fetchTokens($body); } ... private static function fetchTokens($body = array()) { $headers = array( 'Content-type: application/x-www-form-urlencoded', 'Authorization: Basic ' . base64_encode(AUTH_CLIENT_ID . ':' . AUTH_CLIENT_SECRET) ); $url = AUTH_BASE_URI . 'token'; $response = Http::post($url, $body, $headers); $token = json_decode($response, true); Session::setToken($token); return $response; } ... The JSON response from SKY API is then parsed, the new set of tokens are stored in our $_SESSION, and the data is sent back to Angular to be displayed on the page for your reference. That's it! Be sure to take a look at our other code samples.\nYou can create an issue to report a bug or request a feature for this code sample. For all other feature requests, see ideas. "
  },
  {
   "name": "Implicit Flow",
   "layout": "layout-showcase",
   "description": "Get up-and-running with our Implicit Flow code samples",
   "showBreadcrumbs": true,
   "icon": "fa fa-fw fa-3x fa-user",
   "title": "Implicit Flow Code Samples",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInNav": true,
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Code Implicit-flow",
   "abspath": "docs/code/implicit-flow/index.md",
   "uri": "/docs/code/implicit-flow/",
   "nav_links": [
    {
     "layout": "layout-container",
     "name": "AngularJS",
     "title": "Implicit Flow - AngularJS",
     "description": "Learn how to create an Angular app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
     "order": 2,
     "icon": "fa fa-fw fa-3x fa-desktop",
     "showInNav": true,
     "tutorial": true,
     "showBreadcrumbs": true,
     "back_to_top": true,
     "useComments": false,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Code Implicit-flow Angular",
     "abspath": "docs/code/implicit-flow/angular/index.md",
     "uri": "/docs/code/implicit-flow/angular/",
     "text": " Edit in GitHub Implicit Flow - AngularJS GitHub\nLearn how to create an AngularJS app that interacts with SKY API constituent data via the OAuth 2.0 Implicit Flow.\nView the source on GitHub "
    },
    {
     "layout": "layout-container",
     "name": "Angular 2",
     "title": "Implicit Flow - Angular 2",
     "description": "Learn how to create an Angular 2 app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
     "order": 2,
     "icon": "fa fa-fw fa-3x fa-desktop",
     "showInNav": true,
     "tutorial": true,
     "showBreadcrumbs": true,
     "back_to_top": true,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Code Implicit-flow Angular2",
     "abspath": "docs/code/implicit-flow/angular2/index.md",
     "uri": "/docs/code/implicit-flow/angular2/",
     "text": " Edit in GitHub Implicit Flow - Angular 2 GitHub\nLearn how to create an Angular 2 app that interacts with SKY API constituent data via the OAuth 2.0 Implicit Flow.\nView the source on GitHub "
    },
    {
     "name": "Chrome Extension",
     "layout": "layout-container",
     "title": "Implicit Flow - Chrome Extension",
     "description": "Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Implicit Flow.",
     "icon": "fa fa-fw fa-3x fa-chrome",
     "showBreadcrumbs": true,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInNav": true,
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Docs Code Implicit-flow Chrome-extension",
     "abspath": "docs/code/implicit-flow/chrome-extension/index.md",
     "uri": "/docs/code/implicit-flow/chrome-extension/",
     "text": " Edit in GitHub Implicit Flow - Chrome Extension GitHub\nLearn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Implicit Flow.\nView the source on GitHub "
    }
   ],
   "text": " Implicit Flow Important! Our code samples provide very basic examples of how to interact with the Blackbaud OAuth 2.0 Service. You are free to choose the client library and method that best suit your needs when creating production-level applications. Angular 2 Learn how to create an Angular 2 app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our SKY API. AngularJS Learn how to create an Angular app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our SKY API. Chrome Extension Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Implicit Flow. "
  },
  {
   "layout": "layout-container",
   "name": "AngularJS",
   "title": "Implicit Flow - AngularJS",
   "description": "Learn how to create an Angular app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
   "order": 2,
   "icon": "fa fa-fw fa-3x fa-desktop",
   "showInNav": true,
   "tutorial": true,
   "showBreadcrumbs": true,
   "back_to_top": true,
   "useComments": false,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Code Implicit-flow Angular",
   "abspath": "docs/code/implicit-flow/angular/index.md",
   "uri": "/docs/code/implicit-flow/angular/",
   "text": " Edit in GitHub Implicit Flow - AngularJS GitHub\nLearn how to create an AngularJS app that interacts with SKY API constituent data via the OAuth 2.0 Implicit Flow.\nView the source on GitHub "
  },
  {
   "layout": "layout-container",
   "name": "Angular 2",
   "title": "Implicit Flow - Angular 2",
   "description": "Learn how to create an Angular 2 app that utilizes the OAuth 2.0 Implicit Flow and retrieves constituent data from our <%= stache.config.product_name_short %>.",
   "order": 2,
   "icon": "fa fa-fw fa-3x fa-desktop",
   "showInNav": true,
   "tutorial": true,
   "showBreadcrumbs": true,
   "back_to_top": true,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Code Implicit-flow Angular2",
   "abspath": "docs/code/implicit-flow/angular2/index.md",
   "uri": "/docs/code/implicit-flow/angular2/",
   "text": " Edit in GitHub Implicit Flow - Angular 2 GitHub\nLearn how to create an Angular 2 app that interacts with SKY API constituent data via the OAuth 2.0 Implicit Flow.\nView the source on GitHub "
  },
  {
   "name": "Chrome Extension",
   "layout": "layout-container",
   "title": "Implicit Flow - Chrome Extension",
   "description": "Learn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Implicit Flow.",
   "icon": "fa fa-fw fa-3x fa-chrome",
   "showBreadcrumbs": true,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInNav": true,
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Code Implicit-flow Chrome-extension",
   "abspath": "docs/code/implicit-flow/chrome-extension/index.md",
   "uri": "/docs/code/implicit-flow/chrome-extension/",
   "text": " Edit in GitHub Implicit Flow - Chrome Extension GitHub\nLearn how to create a Chrome browser extension that interacts with Google's InboxSDK and SKY API constituent data via the OAuth 2.0 Implicit Flow.\nView the source on GitHub "
  },
  {
   "layout": "layout-tutorial",
   "name": "Applications",
   "description": "Learn how to successfully create an application with SKY API.",
   "order": 200,
   "published": true,
   "showInNav": true,
   "back_to_top": true,
   "title": "Create an Application Tutorial",
   "sidebarLayoutSecondaryColumn": "col-lg-2 col-md-3 col-sm-12 sidebar-tutorial",
   "sidebarLayoutPrimaryColumn": "col-lg-8 col-md-8 col-sm-12",
   "bootstrap_container": "bg-tutorial",
   "markdown": false,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Createapp",
   "abspath": "docs/createapp/index.md",
   "uri": "/docs/createapp/",
   "text": " Comments Edit in GitHub Create an App with SKY API To successfully create an application with SKY API, follow this step-by-step guide. Before you begin, be sure to complete the Getting Started guide, where you'll get your Blackbaud developer account, a subscription key, and learn how to explore the Endpoint Reference. Step 1 – Register your app To call the SKY API, first register your application to obtain its unique set of credentials, which your users will use to enable your app to access their data From My Applications, click Register app. Enter the name, description, and logo of your application, as well as your organization's name. This information appears for users when they enable access to your application during the authorization process or in their product. In the Application website URL field, enter where users can learn more about your application online. Specify the URIs to use to redirect users back to your application during the authorization process. Note: The URIs must be absolute and use HTTPS. However, we do support http://localhost:port or http://127.0.0.1:port for local development. Important! When your application requests authorization to access a Blackbaud user's data, it includes a redirect_uri parameter in its query string. To authorize your application, this value must match exactly against one of the URIs you provide, including any trailing slashes. For more information, see common authorization issues. Click Save. Step 2 – Review the app credentials After you register an app, note the ID and secret that appear under Application Credentials. These credentials are unique to your application, and verify its identity during the authorization process. ID -Your application's unique identifier. Your users will need this ID to enable your application to access their Blackbaud data. You can't modify this ID; if you need to change it for any reason, delete the application and re-register it. Secret -The key your application provides when it requests an access token to call the SKY API during the authorization process. This value is sensitive, so don't share it with anyone else! To display the secret, click Show. Very Important! Keep the application secret private and safe! If the secret is compromised, regenerate it. Blackbaud reserves the right to remove or deactivate your application to protect customer data. Step 3 – Activate your app For your application to access a user's Blackbaud data, the tenant's administrator must approve its use for their organization and activate it within their product. For Blackbaud customers, the tenant administrator is a user within their organization. To activate your application in a customer's tenant, provide the tenant administrator with your application ID and have the tenant administrator complete the following steps: Copy the Application ID that your Blackbaud developer provided to you. Visit the Control Panel, Applications area of your Blackbaud product. Select Add application and then paste in the Application ID. Select Save. The application will then appear in the list of activated applications for the tenant. Step 4 – Request authorization Once your application has been activated, you can then obtain consent from an authenticated user. Upon consent, an OAuth 2.0 access token will be issued to your application in the form of a JSON web token, or JWT. The token should be included on every API request as part of the standard Authorization header. It is tied to the authenticated user's account and organization, which means that your application can only access data to which the authenticated user can access within the system. Learn how to authorize API requests! Step 5 – Next steps You are now ready to go make API calls! Now that you've built and tested your application, here are a few things you should know. SKY UX SKY UX is Blackbaud’s next-generation user-experience framework. You can use it to bring the same consistent experience as Blackbaud products to your customizations and applications. Blackbaud Developer Community Participate and learn from other developers on how they are using the SKY API. Blackbaud Partner Network Learn how to be a part of our Blackbaud Partner Network. "
  },
  {
   "name": "Getting Started",
   "description": "Obtain the necessary knowledge to make API calls using our interactive <%= stache.config.dev_console_name %>",
   "order": 100,
   "layout": "layout-tutorial",
   "published": true,
   "back_to_top": true,
   "title": "Getting Started",
   "sidebarLayoutSecondaryColumn": "col-lg-2 col-md-3 col-sm-12 sidebar-tutorial",
   "sidebarLayoutPrimaryColumn": "col-lg-8 col-md-8 col-sm-12",
   "bootstrap_container": "bg-tutorial",
   "markdown": false,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInNav": true,
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Docs Getting-started",
   "abspath": "docs/getting-started/index.md",
   "uri": "/docs/getting-started/",
   "nav_links": [
    {
     "name": "Getting Started with Payments API (Beta)",
     "description": "Obtain the necessary knowledge to make calls to the Payments API using our interactive <%= stache.config.dev_console_name %>",
     "order": 100,
     "layout": "layout-tutorial",
     "published": true,
     "back_to_top": true,
     "title": "Getting Started with Payments API",
     "sidebarLayoutSecondaryColumn": "col-lg-2 col-md-3 col-sm-12 sidebar-tutorial",
     "sidebarLayoutPrimaryColumn": "col-lg-8 col-md-8 col-sm-12",
     "bootstrap_container": "bg-tutorial",
     "markdown": false,
     "showInNav": false,
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": false,
     "showInFooter": false,
     "showInSearch": true,
     "breadcrumbs": "Docs Getting-started Payments",
     "abspath": "docs/getting-started/payments/index.md",
     "uri": "/docs/getting-started/payments/",
     "text": " Comments Edit in GitHub Getting Started with Payments API (Beta) To get started using the Payments API (Beta), follow this step-by-step guide. After you complete this tutorial, you'll have your Blackbaud developer account and API subscription keys, and you'll learn how to try our SKY API console.\nFor information about changes to the Payments API (Beta), see the changelog. Step 1 – Set up a developer account\nSign up for a Blackbaud developer account. This account represents you as a developer within the Blackbaud Developer Portal.\nAlready have an account? Sign in to continue with the Getting Started with Payments API (Beta). Step 2 – Join the Payments API Preview group\nTo view and use the Payments API during Closed Beta, you must be a member of the Payments API Preview group and signed in with your Blackbaud developer account. Otherwise, you will see an error page.\nContact us to request joining this group. Please include your name and your organization's name. We will reply to confirm when you’ve been added, so you can continue with next steps. Step 3 – Get Payments API subscription keys You must include a valid API subscription key with each request to the Payments API. This subscription key is associated with your Blackbaud developer account. How to get API subscription keys?\nTo request a subscription to the Payments API, from the Products page select Payments API Preview. Note: This option is not the same as the SKY API Standard Edition subscription. If you don't see the Payments API Preview option, make sure you completed step 2. Click Review terms and subscribe. The SKY API Terms of Use will appear in a pop-up window.\nReview and agree to the Terms of Use.\nTo submit your request, click Add subscription.\nBlackbaud approves all subscription requests for the Payments API. You will receive an email notification when your request is approved. After it is approved, you can view the subscription details within your developer profile. For developers using multiple APIs, note that the Payments API subscription is different than your other SKY API subscription. About your subscription Your developer profile provides details about your API subscriptions. Each subscription contains a Primary key and a Secondary key. You can use either key as the subscription key value for the Bb-Api-Subscription-Key request header in calls to the API. Step 4 – View the Endpoint reference Now, you are ready to explore the endpoints available to you. Open the Endpoint Reference and select Payments (Beta). A list of endpoints appears. If you are not logged in or are not part of the preview group, the Payments (Beta) option does not appear in the Endpoint Reference.\nSelect an endpoint from the list.\nReview the information in the reference, including the:\nRequest URL\nRequest parameters\nRequest headers\nResponse codes\nResponse body\nSample JSON data\nCode samples Step 5 – Try it When you are signed in, you can test the Payments API with the SKY API Console. From the Payments API Endpoint Reference, navigate to an endpoint such as GET Payment configuration list, and click Try it. This activates the SKY API Console.\nUnder Query parameters, enter a parameter. For example, enter true for the include_inactive parameter.\nUnder Headers, select the Show/Hide icon in the Bb-Api-Subscription-Key field. The value reflects one of your Payments API subscription keys.\nNote: The Request URL and HTTP request change based on the values for the parameter and request header field values. Under Authorization, select Authorization code in the Blackbaud OAuth 2.0 Service field. The Blackbaud OAuth 2.0 Service displays a SKY API Console pop-up window. Select your Blackbaud Merchant Services instance.Note: Your Blackbaud Merchant Services instance will not appear unless your admin has invited you to an environment and you have accepted the invite. Click Authorize.\nThe HTTP request is populated with the Authorization:Bearer header. This represents the access token for the request. Click Send to submit the API request.\nThe response includes a status, latency, and content including JSON data for the requested endpoint. Step 6 – Join the Developer Community Join our Developer Community to engage with Blackbaud and other developers.\nShare feedback about your initial experience, and ask ongoing questions, in the Payments API forum.\nSubscribe to receive notifications for recent SKY API Announcements and Developer Discussions. Submit new ideas for how we can improve the Payments API. Vote and comment on existing ideas. Step 7 – Create a Payments API user account The Payments API uses the OAuth 2.0 protocol to authorize API requests. This provides a secure mechanism for your application to access Blackbaud Merchant Services customer data and capabilities without exposing user credentials (username/password) to your application. Instead, users must authorize your application to call the API on their behalf. Refer to our Authorization section for more details.\nYour organization may wish to create a new, dedicated Blackbaud user account, to be used to authorize your application(s) to make Payments API requests on its behalf. During this Closed Beta phase, this step requires manual coordination with us.\nCreate a new Blackbaud user account that you will use as your Payments API user. Sign in as your new Payments API user. While signed in, click here or manually navigate to https://signin.blackbaud.com/api/user. You should see a page that looks like below. Copy the contents of this page and email it to us. We will reply to confirm when your API user has been properly configured, so you can continue with next steps. Step 8 – Next steps Once you’ve gotten started with the Payments API, you can use available resources to build an application using Payments API.\nLearn how to create an application with SKY API.\nNote: During this Closed Beta phase, you will not be able to complete Step 3 of this tutorial on your own for apps using Payments API. Instead, contact us with your application ID so we can activate it on your behalf.\nLearn how Authorization works, including the associated tutorials and code samples. Subscribe to SKY API status updates. "
    }
   ],
   "text": " Comments Edit in GitHub Getting Started To get started using SKY API, follow this step-by-step guide. After you complete this tutorial, you'll have your Blackbaud developer account, a subscription key, and you'll learn how to try our SKY API console. Step 1 – Set up a developer account\nSign up for a Blackbaud developer account. This account represents you as a developer within the Blackbaud Developer Portal.\nAlready have an account? Sign in to continue with the Getting Started. Step 2 – Get a subscription key\nWe require you to have an approved subscription key to a specific API product before you can use the SKY API. This subscription key is associated with your Blackbaud developer account.\nHow to get a subscription key? To request a subscription to an API product, from the Products page select SKY API Standard Edition.\nClick Subscribe. A confirmation screen appears.\nTo submit your request, click Confirm. Blackbaud approves the subscription requests. We will send you an email notification when your request is approved. After it is approved, you can view the subscription details within your developer profile. Important! In order to be approved for a subscription key, you must be an authorized user in at least one instance of Raiser's Edge NXT or Financial Edge NXT. This requirement ensures that you have a tenant to make API calls against. About your Subscription\nYour profile provides details about your subscriptions. Each subscription contains a Primary key and a Secondary key. You can use either key as the subscription key value for the Bb-Api-Subscription-Key request header in calls to the API. Step 3 – Activate the SKY API Console The SKY API Console is a Blackbaud application built into the Endpoint Reference that can be used to test the SKY API. Before jumping in to build your own applications, we recommend you add the SKY API Console to your or your customer's tenant to aid with testing and development. To access a tenant's data, the SKY API Console, must be approved by a tenant administrator. For Blackbaud customers, a tenant administrator is a user within the organization that is part of the Supervisor security group. This may include Partners or API subscribers that have their own dedicated tenant, or are Supervisor users in their customer's tenant. Administrators provide approval for applications, including the SKY API Console, by activating the application within the Applications area of the product. To activate the SKY API Console, the tenant administrator needs to do the following: Copy the SKY API Console Application ID:A056CA6B-A3A8-4AC7-B325-997666306E52 Visit the Control Panel, Applications area of the product. Select Add application, paste the SKY API Console Application ID, and select Save. Once added, The SKY API Console will appear in the list of activated applications for the tenant. Important! The same process can be followed to activate additional applications for your tenant. Simply substitute the application ID for the one provided in the My Applications area of your Developer Account to add your own application, or use the application ID provided to you by a Partner or third party developer that you know and trust. Step 4 – View the Endpoint Reference Now, you are ready to explore the endpoints available to you! Open the Endpoint Reference and select an API. A list of endpoints appears.\nSelect an endpoint from the list.\nReview the information in the reference, including the:\nRequest URL\nRequest parameters\nRequest headers\nResponse codes\nSample JSON data\nCode samples Step 5 – Try it! When you are signed in, you can test the SKY API with the SKY API Console. From an Endpoint Reference, click Try it. For example, in the Constituent Endpoint Reference, select the Constituent (Get) endpoint and click Try it. This activates the SKY API Console. Under Query parameters, enter a parameter. For example, enter 280 for the constituentId parameter.\nUnder Headers, select the show/hide icon in the Bb-Api-Subscription-Key field. The value reflects the selected subscription key from the Authorization section.\nNote: The Request URL and HTTP request change based on the values for the parameter and request header field values. Under Authorization, select Authorization code in the Blackbaud OAuth 2.0 Service field. The Blackbaud Authorization Service displays a SKY API Console pop-up window. Select a tenant. Approved API subscribers with access to their own dedicated tenant need to activate the SKY API Console as an approved application. Click Authorize. This gives the SKY API Console access to your SKY API data for the selected tenant.\nAfter you approve the SKY API Console to access the API data for your Blackbaud developer account, the HTTP request is populated with the `Authorization:Bearer ` header. This represents the access token for the request. After you have a bearer token and configure the values for the URI parameters, click Send to submit the request. The response includes a response status, latency, and content including JSON data for the requested endpoint. Step 6 – Next steps Learn how to create an application with SKY API. Learn how Authorization works, including the Authorization Code Flow and associated tutorials. Review our support resources including our Changelog, Issues, Ideas, and FAQ. Clone our code samples that demonstrate the Authorization Code Flow and SKY UX, Blackbaud’s next-generation user-experience framework. Join our Developer Community, and subscribe to stay up-to-date with the latest hot topics and announcements. "
  },
  {
   "name": "Getting Started with Payments API (Beta)",
   "description": "Obtain the necessary knowledge to make calls to the Payments API using our interactive <%= stache.config.dev_console_name %>",
   "order": 100,
   "layout": "layout-tutorial",
   "published": true,
   "back_to_top": true,
   "title": "Getting Started with Payments API",
   "sidebarLayoutSecondaryColumn": "col-lg-2 col-md-3 col-sm-12 sidebar-tutorial",
   "sidebarLayoutPrimaryColumn": "col-lg-8 col-md-8 col-sm-12",
   "bootstrap_container": "bg-tutorial",
   "markdown": false,
   "showInNav": false,
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": false,
   "showInFooter": false,
   "showInSearch": true,
   "breadcrumbs": "Docs Getting-started Payments",
   "abspath": "docs/getting-started/payments/index.md",
   "uri": "/docs/getting-started/payments/",
   "text": " Comments Edit in GitHub Getting Started with Payments API (Beta) To get started using the Payments API (Beta), follow this step-by-step guide. After you complete this tutorial, you'll have your Blackbaud developer account and API subscription keys, and you'll learn how to try our SKY API console.\nFor information about changes to the Payments API (Beta), see the changelog. Step 1 – Set up a developer account\nSign up for a Blackbaud developer account. This account represents you as a developer within the Blackbaud Developer Portal.\nAlready have an account? Sign in to continue with the Getting Started with Payments API (Beta). Step 2 – Join the Payments API Preview group\nTo view and use the Payments API during Closed Beta, you must be a member of the Payments API Preview group and signed in with your Blackbaud developer account. Otherwise, you will see an error page.\nContact us to request joining this group. Please include your name and your organization's name. We will reply to confirm when you’ve been added, so you can continue with next steps. Step 3 – Get Payments API subscription keys You must include a valid API subscription key with each request to the Payments API. This subscription key is associated with your Blackbaud developer account. How to get API subscription keys?\nTo request a subscription to the Payments API, from the Products page select Payments API Preview. Note: This option is not the same as the SKY API Standard Edition subscription. If you don't see the Payments API Preview option, make sure you completed step 2. Click Review terms and subscribe. The SKY API Terms of Use will appear in a pop-up window.\nReview and agree to the Terms of Use.\nTo submit your request, click Add subscription.\nBlackbaud approves all subscription requests for the Payments API. You will receive an email notification when your request is approved. After it is approved, you can view the subscription details within your developer profile. For developers using multiple APIs, note that the Payments API subscription is different than your other SKY API subscription. About your subscription Your developer profile provides details about your API subscriptions. Each subscription contains a Primary key and a Secondary key. You can use either key as the subscription key value for the Bb-Api-Subscription-Key request header in calls to the API. Step 4 – View the Endpoint reference Now, you are ready to explore the endpoints available to you. Open the Endpoint Reference and select Payments (Beta). A list of endpoints appears. If you are not logged in or are not part of the preview group, the Payments (Beta) option does not appear in the Endpoint Reference.\nSelect an endpoint from the list.\nReview the information in the reference, including the:\nRequest URL\nRequest parameters\nRequest headers\nResponse codes\nResponse body\nSample JSON data\nCode samples Step 5 – Try it When you are signed in, you can test the Payments API with the SKY API Console. From the Payments API Endpoint Reference, navigate to an endpoint such as GET Payment configuration list, and click Try it. This activates the SKY API Console.\nUnder Query parameters, enter a parameter. For example, enter true for the include_inactive parameter.\nUnder Headers, select the Show/Hide icon in the Bb-Api-Subscription-Key field. The value reflects one of your Payments API subscription keys.\nNote: The Request URL and HTTP request change based on the values for the parameter and request header field values. Under Authorization, select Authorization code in the Blackbaud OAuth 2.0 Service field. The Blackbaud OAuth 2.0 Service displays a SKY API Console pop-up window. Select your Blackbaud Merchant Services instance.Note: Your Blackbaud Merchant Services instance will not appear unless your admin has invited you to an environment and you have accepted the invite. Click Authorize.\nThe HTTP request is populated with the Authorization:Bearer header. This represents the access token for the request. Click Send to submit the API request.\nThe response includes a status, latency, and content including JSON data for the requested endpoint. Step 6 – Join the Developer Community Join our Developer Community to engage with Blackbaud and other developers.\nShare feedback about your initial experience, and ask ongoing questions, in the Payments API forum.\nSubscribe to receive notifications for recent SKY API Announcements and Developer Discussions. Submit new ideas for how we can improve the Payments API. Vote and comment on existing ideas. Step 7 – Create a Payments API user account The Payments API uses the OAuth 2.0 protocol to authorize API requests. This provides a secure mechanism for your application to access Blackbaud Merchant Services customer data and capabilities without exposing user credentials (username/password) to your application. Instead, users must authorize your application to call the API on their behalf. Refer to our Authorization section for more details.\nYour organization may wish to create a new, dedicated Blackbaud user account, to be used to authorize your application(s) to make Payments API requests on its behalf. During this Closed Beta phase, this step requires manual coordination with us.\nCreate a new Blackbaud user account that you will use as your Payments API user. Sign in as your new Payments API user. While signed in, click here or manually navigate to https://signin.blackbaud.com/api/user. You should see a page that looks like below. Copy the contents of this page and email it to us. We will reply to confirm when your API user has been properly configured, so you can continue with next steps. Step 8 – Next steps Once you’ve gotten started with the Payments API, you can use available resources to build an application using Payments API.\nLearn how to create an application with SKY API.\nNote: During this Closed Beta phase, you will not be able to complete Step 3 of this tutorial on your own for apps using Payments API. Instead, contact us with your application ID so we can activate it on your behalf.\nLearn how Authorization works, including the associated tutorials and code samples. Subscribe to SKY API status updates. "
  },
  {
   "layout": "layout-container",
   "name": "Status",
   "description": "Check the SKY API status and sign up for notifications.",
   "order": 400,
   "showInNav": true,
   "published": true,
   "showInHeader": true,
   "title": "Status",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Status",
   "abspath": "status/index.md",
   "uri": "/status/",
   "text": " "
  },
  {
   "layout": "layout-sidebar",
   "name": "Support",
   "description": "Tools and knowledge to help you along your way.",
   "order": 300,
   "published": true,
   "showInNav": true,
   "showInHeader": true,
   "showInFooter": false,
   "title": "Support",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInSearch": true,
   "breadcrumbs": "Support",
   "abspath": "support/index.md",
   "uri": "/support/",
   "nav_links": [
    {
     "layout": "layout-container",
     "name": "Changelog",
     "description": "Information on additions, removals, and bug fixes of the API.",
     "order": 100,
     "published": true,
     "showInNav": true,
     "icon": "fa fa-file-text-o",
     "back_to_top": true,
     "title": "Changelogs",
     "APIs": [
      {
       "description": "Monitor this page to keep up with common changes shared across all our APIs.",
       "icon": "fa-cloud",
       "location": "shared",
       "title": "Shared"
      },
      {
       "description": "Monitor this page to keep up with the latest changes to the Accounts Payable API.",
       "icon": "fa-university",
       "location": "ap",
       "title": "Accounts Payable"
      },
      {
       "description": "Monitor this page to keep up with the latest changes to the Constituent API.",
       "icon": "fa-user",
       "location": "constituent",
       "title": "Constituent"
      },
      {
       "description": "Monitor this page to keep up with the latest changes to the Fundraising API.",
       "icon": "fa-line-chart",
       "location": "fundraising",
       "title": "Fundraising"
      },
      {
       "description": "Monitor this page to keep up with the latest changes to the General Ledger API.",
       "icon": "fa-book",
       "location": "gl",
       "title": "General Ledger"
      },
      {
       "description": "Monitor this page to keep up with the latest changes to the Gift API.",
       "icon": "fa-gift",
       "location": "gift",
       "title": "Gift"
      },
      {
       "description": "Monitor this page to keep up with the latest changes to the Opportunity API.",
       "icon": "fa-handshake-o",
       "location": "opportunity",
       "title": "Opportunity"
      },
      {
       "description": "Monitor this page to keep up with the latest changes to the Treasury API.",
       "icon": "fa-money",
       "location": "treasury",
       "title": "Treasury"
      }
     ],
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Support Changelog",
     "abspath": "support/changelog/index.md",
     "uri": "/support/changelog/",
     "nav_links": [
      {
       "layout": "layout-sidebar",
       "name": "Accounts Payable",
       "description": "Information on additions and changes for the Accounts Payable API.",
       "order": 75,
       "published": true,
       "showInNav": true,
       "icon": "fa fa-university",
       "back_to_top": true,
       "title": "Accounts Payable Changelog",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Support Changelog Ap",
       "abspath": "support/changelog/ap/index.md",
       "uri": "/support/changelog/ap/",
       "text": " Accounts Payable\nMonitor this page to keep up with the Accounts Payable API latest changes and SKY API service releases.\n2018-07-19\nNew\nAdded the following endpoint: Operation Method Route Vendor attachment POST /vendors/attachments The Vendor attachment endpoint supports physical attachments and link attachments. Note the shape of the request in JSON form: { \"parent_id\": 0, \"name\": \"string\", \"url\": \"string\", \"type\": \"Link\", \"media_type\": \"string\", \"file\": { \"ContentLength\": 0, \"ContentType\": \"string\", \"FileName\": \"string\", \"InputStream\": { \"CanRead\": true, \"CanSeek\": true, \"CanTimeout\": true, \"CanWrite\": true, \"Length\": 0, \"Position\": 0, \"ReadTimeout\": 0, \"WriteTimeout\": 0 } }\n} The type field accepts Physical or Link but defaults to Link.\nThe url field is required for link attachments but not for physical attachments.\nThe file field is HttpPostedFileBase. It is required for physical attachments but not for link attachments.\nFor physical attachments, requests must be multipart/form-data. For example: public static Task PostMultiPartDataFormAsync(this HttpClient client, string route, Attachment content) { var httpContent = new MultipartFormDataContent(); var streamContent = new StreamContent(content.File.InputStream); var ContentDisposition = new ContentDispositionHeaderValue(\"form-data\"); ContentDisposition.Name = \"File\"; ContentDisposition.FileName = content.File.FileName; streamContent.Headers.ContentDisposition = ContentDisposition; streamContent.Headers.ContentType = new MediaTypeHeaderValue(content.File.ContentType); httpContent.Add(streamContent); httpContent.Add(new StringContent(content.ParentId.ToString()), \"ParentId\"); httpContent.Add(new StringContent(content.Name), \"Name\"); httpContent.Add(new StringContent(content.Type.ToString()), \"Type\"); httpContent.Add(new StringContent(content.MediaType.ToString()), \"MediaType\"); var request = new HttpRequestMessage(HttpMethod.Post, route) { Content = httpContent }; return SendAsync(client, request); } In application/json requests, field names must use snake casing such as parent_id and media_type, whereas in multipart/form-data requests, field names must use camel case, such as ParentId and MediaType.\nLink attachments should be sent as application/json formatted requests with the file field omitted.\nIf the file field is populated in application/json formatted requests, the request fails unless type is set to Link because then the request ignores the file. June\n2018-06-28\nNew\nAdded the following endpoint: Operation Method Route Transaction code (List) GET /transactioncodes Transaction code value (List) GET /transactioncodes/{transaction_code_id}/value These endpoints currently exist in the General Ledger API. We decided to include them in the Accounts Payable API (and Treasury API) because values from those endpoints may be required to create Accounts Payable (or Treasury) records.\n2018-06-12\nAnnouncement: Changes for Accounts Payable API\nWe implemented new operation ID values in the OpenApi (fka Swagger) definitions for all endpoints in the Accounts Payable API. Note that any existing code relying on these endpoints will continue to function, since all routes and parameters are unchanged. However, if you make use of client-side generated code and want to regenerate your client wrapper, compile-time errors in your code stemming from new operation ID values will arise and need to be addressed.\n2018-06-04\nAnnouncement: Changes Planned for Accounts Payable, General Ledger, and Treasury (Beta) APIs\nWe will implement new operation ID values in the OpenApi (fka Swagger) definitions for several SKY APIs. This change will improve client-side tooling support for code generation by making these values more deterministic and friendlier across different languages. Going forward, we expect high stability of these values (meaning, we won’t need to change them again).\nNote that any existing code that has been deployed will continue to function with no problems, since we are not changing any routes or parameters. If you make use of client-side generated code and want to regenerate your client wrapper, you’ll need to fix any compile-time errors in your code stemming from new method names.\n2018-06-01\nNew\nAdded the following endpoint: Operation Method Route Invoice edit PATCH /invoices/{invoice_id} With the new endpoint, note the following: You can edit the following properties of an existing invoice:\nvendor_id\nvendor_name\ninvoice_number\ninvoice_date\ndue_date\ndescription\nstatus\ninvoice_payment_details\npost_status\npost_date\ndistribution_discounts\ndistributions\ncustom_fields You cannot edit Posted or Paid invoices.\nYou cannot update an invoice to change the status to Posted, Paid, or Partially Paid.\nIf you omit fields from PATCH requests, the endpoint does not edit them with default values. For example, the following code sample only edits the description property.{ “description”: \"edited description\"\n} April\n2018-04-20\nChanged\nWe made several changes to the Invoice attachment endpoint: The endpoint now supports Physical attachments (previously only supported Link attachments)\nNote the shape of the request in JSON form: {\n\"parent_id\": 0,\n\"name\": \"string\",\n\"url\": \"string\",\n\"type\": \"Link\",\n\"media_type\": \"string\",\n\"file\": { \"ContentLength\": 0, \"ContentType\": \"string\", \"FileName\": \"string\", \"InputStream\": { \"CanRead\": true, \"CanSeek\": true, \"CanTimeout\": true, \"CanWrite\": true, \"Length\": 0, \"Position\": 0, \"ReadTimeout\": 0, \"WriteTimeout\": 0 } }\n} The type field now accepts Physical (defaults to Link if not provided)\nA url is not required for Physical attachments\nA file must be provided for Physical attachments\nA url must be provided for Link attachments\nThe new file field is HttpPostedFileBase The request must be a multipart/form-data request. For example, public static Task PostMultiPartDataFormAsync(this HttpClient client, string route, Attachment content) { var httpContent = new MultipartFormDataContent(); var streamContent = new StreamContent(content.File.InputStream); var ContentDisposition = new ContentDispositionHeaderValue(\"form-data\"); ContentDisposition.Name = \"File\"; ContentDisposition.FileName = content.File.FileName; streamContent.Headers.ContentDisposition = ContentDisposition; streamContent.Headers.ContentType = new MediaTypeHeaderValue(content.File.ContentType); httpContent.Add(streamContent); httpContent.Add(new StringContent(content.ParentId.ToString()), \"ParentId\"); httpContent.Add(new StringContent(content.Name), \"Name\"); httpContent.Add(new StringContent(content.Type.ToString()), \"Type\"); httpContent.Add(new StringContent(content.MediaType.ToString()), \"MediaType\"); var request = new HttpRequestMessage(HttpMethod.Post, route) { Content = httpContent }; return SendAsync(client, request); } JSON requests for url attachments will work the same as they did prior to this release\nJSON requests containing files will fail or ignore the file if type is set to link\nJSON request field names need to use snake casing, such as parent_id and media_type whereas multipart/form-data requests need to use camel case, such as ParentId and MediaType March\n2018-03-30\nChanged\nFor the Invoice (List) endpoint, we made the following changes: The payment_method of the invoice is now returned in the listed objects, which includes EFT, Credit card, Bank draft, or Check.\nThe payment_method field can also be filtered during search. January\n2018-01-17\nChanged\nFor the Invoice (List) endpoint, we added the delete, paid, and partially paid statuses.\n2017\n2017-11-17\nChanged\nAdded additional fields to the following endpoint: Operation Method Route Payment term (list) GET /paymentterms 2017-10-12\nNew\nAdded the following endpoint: Operation Method Route Payment term (list) GET /paymentterms 2017-09-28\nChanged\nFor the following endpoint, we added the payment_default field which includes credit limit, payment terms, and bank account information: Operation Method Route Vendors GET /vendors 2017-06-30\nNew\nAdded the following endpoints: Operation Method Route Invoice attachment POST /invoices/attachments Media type (List) GET /mediatypes 2017-05-05\nNew\nAdded the following endpoints: Operation Method Route Invoice 1099 amount GET /invoices/{invoice_id}/1099amount Invoice 1099 box numbers GET /invoices/{invoice_id}/1099boxnumber 2016\n2016-12-06\nNew Added the following endpoints: Operation Method Route Invoice custom field (List) GET /invoices/customfields Vendor custom field (List) GET /vendors/customfields Added new custom field entities to the following endpoints: Operation Method Route Invoice POST /invoices Invoice GET /invoices/{invoice_id} Vendor POST /vendors Vendor GET /vendors/{vendor_id} Changed\nFor consistency across APIs, all responses to GET endpoints that return collections now return an object with \"count\" and \"value\" properties. The following endpoints are affected: Operation Method Route Address (List) GET /vendors/{vendor_id}/addresses Contact method (List) GET /vendors/{vendor_id}/addresses/{address_id}/contactmethods Note (List) GET /vendors/{vendor_id}/notes 2016-11-14\nAnnouncement: Breaking Changes Planned for Accounts Payable API\nFor consistency across APIs, we will implement the following change:\nAll responses to GET endpoints that return collections will return an object with \"count\" and \"value\" properties. The following endpoints are affected: Operation Method Route Address (List) GET /vendors/{vendor_id}/addresses Contact method (List) GET /vendors/{vendor_id}/addresses/{address_id}/contactmethods Note (List) GET /vendors/{vendor_id}/notes 2016-10-12\nChanged\nFor consistency across APIs, we implemented the following changes: All responses to POST requests changed from \"RecordId\" to \"record_id\".\nThe following endpoints and their associated fields changed from CamelCase to snake_case: Operation Method Route Invoice GET /invoice Invoice POST /invoice 2016-10-04\nAnnouncement: Breaking Changes Planned for Accounts Payable API\nFor consistency across APIs, we will implement the following changes: All responses to POST requests will change from \"RecordId\" to \"record_id\".\nThe following endpoints and their associated fields will change from CamelCase to snake_case: Operation Method Route Invoice GET /invoice Invoice POST /invoice 2016-08-12\nBreaking Change\nWe changed the default and maximum record limits on the following search and list endpoints. The default is now 100 records, and the maximum is 500 records. Operation Method Route Vendor (List) GET /vendors Invoice (List) GET /invoices 2016-08-04\nNew\nThe Accounts Payable API is now available. Use this API to manage accounts payable, including vendors and invoices. "
      },
      {
       "layout": "layout-sidebar",
       "name": "Constituent",
       "description": "Information on additions and changes for the Constituent API.",
       "order": 100,
       "published": true,
       "showInNav": true,
       "icon": "fa fa-user",
       "back_to_top": true,
       "title": "Constituent Changelog",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Support Changelog Constituent",
       "abspath": "support/changelog/constituent/index.md",
       "uri": "/support/changelog/constituent/",
       "text": " Constituent\nMonitor this page to keep up with the Constituent API latest changes and SKY API service releases.\n2018-07-03\nNew\nAdded the following endpoint: Operation Method Route Membership list (All constituents) GET /memberships Added a read-only fundraiser_status property to the constituent entity. Added a fundraiser_status filter to the Constituent list endpoint. Added an optional search_field query parameter to the Constituent (Search) endpoint. It indicates the property to search with the provided search_field filter and returns the exact match if available. Currently, this filter only accepts lookup_id. Added an optional computed_status query parameter to the Action list (All constituents) endpoint. It accepts a single value of Open, Completed, or PastDue and returns constituent actions that match the filter. Added an optional status_code query parameter to the Action list (All constituents) endpoint. The parameter can be specified multiple times to imply a logical OR and filters the results to only include the items associated with the specified status codes. For example, status_code=Pending&status_code=Sent returns actions with a status of either Pending and Sent. 2018-06-01\nAnnouncement: Changes for Constituent API\nWe implemented new operation ID values in the OpenApi (fka Swagger) definitions for all endpoints in the Constituent API. Note that any existing code relying on these endpoints will continue to function, since all routes and parameters are unchanged. However, if you make use of client-side generated code and want to regenerate your client wrapper, compile-time errors in your code stemming from new operation ID values will arise and need to be addressed.\nMay\n2018-05-25\nNew\nWe added the following properties to the action entity: The new computed_status property computes the status based on the completed and date properties when the system is not configured to use custom action statuses. Otherwise, the field calculates the status based on the action's date property and whether the status property is configured as \"Completed.\"\nThe new status_code property specifies the action status code. Available values are in the Action Status table. This property is only returned when the system is configured to use custom action statuses. These properties are available in the Action (Get), Action list (All constituents), and Action list (Single constituent) endpoints.\nAnnouncement: Changes Planned for Constituent, Fundraising (Beta), Gift (Beta), and Opportunity (Beta) APIs\nWe will implement new operation ID values in the OpenApi (fka Swagger) definitions for several SKY APIs. This change will improve client-side tooling support for code generation by making these values more deterministic and friendlier across different languages. Going forward, we expect high stability of these values (meaning, we won’t need to change them again).\nNote that any existing code that has been deployed will continue to function with no problems, since we are not changing any routes or parameters. If you make use of client-side generated code and want to regenerate your client wrapper, you’ll need to fix any compile-time errors in your code stemming from new method names.\n2018-05-15\nNew\nAdded the following endpoint: Operation Method Route Document (Create) POST /documents 2018-05-11\nAnnouncement: Released Action Category Enhancement for Constituent API\nWe updated the Constituent API Action category value from Phone Call to Phone call. This change impacts the Action (Get) and Action list (Single constituent) endpoints.\nApril\n2018-04-25\nAnnouncement: Future Enhancement Planned for Constituent API\nWe will update the Constituent API Action category value from Phone Call to Phone call for consistency across all endpoints. This change will impact the Action (Get) and Action list (Single constituent) endpoints.\n2018-04-13\nNew\nAdded the following endpoint: Operation Method Route Fundraiser assignment list (Single constituent)* GET /constituents/{constituent_id}/fundraiserassignments * We deprecated the Fundraiser list (Single constituent) endpoint and replaced it with the Fundraiser assignment list (Single constituent) endpoint. We will continue to support deprecated endpoint for v1 of the Constituent API, but we recommend transitioning to the new endpoint for a more robust and consistent response.\n2018-04-06\nChanged\nWe corrected an issue with the last_modified parameter on the Relationship list (All constituents) endpoint, where returned results and the provided sort_token were keying off of date_added instead of date_modified.\nAnnouncement: Released Display Name Enhancement for Constituent API\nConstituent names in the API now reflect the upcoming display name configuration setting in Raiser's Edge NXT. This initially affects the default name values on the Constituent GET, search, and list endpoints, and on the Relationship GET and list endpoints. Moving forward, display name settings will be configurable from the web view, and the API will reflect any changes to the display name format.\nIn addition, when a supervisor user changes the display name configuration settings, the date_modified value will increment on all constituents in the organization's database. This impact will not occur until display name configuration options are available in the Raiser's Edge NXT web view, slated for release in mid-April.\nAnnouncement: Released Solicit Code Security Enhancement for Constituent API\nThe Constituent API now respects the new Solicit Code security setting available in the Raiser's Edge NXT database view. This affects the Communication Preference GET, POST, PATCH, and DELETE endpoints.\nMarch\n2018-03-29\nNew\nAdded the following endpoints: Operation Method Route Action custom field category details* GET /actions/customfields/categories/details Constituent custom field category details* GET /constituents/customfields/categories/details * We deprecated the Action custom field categories endpoints and Constituent custom field categories endpoints and replaced them with the Action custom field category details and Constituent custom field category details endpoints. We will continue to support deprecated endpoints for v1 of the Constituent API, but we recommend transitioning to the new endpoints for a more robust and consistent response.\nAnnouncement: Future Enhancement Planned for Constituent API\nRaiser's Edge NXT recently introduced a new security setting in the database view for Solicit Codes. The API will soon reflect this setting for consistency, and that will affect the Communication Preference GET, POST, PATCH, and DELETE endpoints.\n2018-03-20\nAnnouncement: Future Enhancement Planned for Constituent API\nRaiser's Edge NXT will soon introduce a new configuration setting for how to display names in the product. The API will soon reflect this configuration option for consistency. This will affect constituent name properties on the Constituent GET, search, and list endpoints, and on the Relationship GET and list endpoints.\nFebruary\n2018-02-21\nNew\nThe optional strict_search query parameter is now available on the Constituent (Search) endpoint. It indicates whether to exclude constituents that sound like the search criteria but are spelled differently. By default, this parameter is set to false.\n2018-02-02\nChanged The Address list (All constituents), Email address list (All constituents), Online presence list (All constituents), and Phone list (All constituents) endpoints now include an option to filter based on their associated constituents. The optional constituent_id query parameter, which can be specified multiple times to imply a logical OR, filters the results to only include the items associated with the specified constituent record IDs. For example, &constituent_id=1242&constituent_id=385 filters the results to only include results associated with two constituent records: \"1242\" and \"385.\"\nWe updated the value filter on the Constituent custom field list (All constituents) endpoint to support filtering on fuzzy date values. The endpoint documentation describes how to filter on fuzzy dates. January\n2018-01-25\nChanged We added the date property to the attachment entity.\nTo remove confusion with the gift entity in the Gift API, we have renamed the Constituent gift entity to Giving Summary. 2018-01-19\nNew\nAdded the following endpoint: Operation Method Route Attachment tags GET /attachmenttags Changed\nWe resolved an issue with the Action (Create) and Action (Edit) endpoints. The 255-character limit is now correctly applied to summary instead of description on the action entity.\n2018-01-17\nNew\nAdded the following endpoints: Operation Method Route Alias (Edit) PATCH /aliases/{alias_id} Alias (Delete) DELETE /aliases/{alias_id} 2018-01-11\nNew\nAdded the following endpoints: Operation Method Route Name format summary GET /constituents/{constituent_id}/nameformats/summary Name format (Create) POST /nameformats Name format (Edit) PATCH /nameformats/{name_format_id} Name format (Delete) DELETE /nameformats/{name_format_id} Primary name format (Create) POST /primarynameformats Primary name format (Edit) PATCH /primarynameformats/{primary_name_format_id} Primary name format (Delete) DELETE /primarynameformats/{primary_name_format_id} Changed The Name format list (Single constituent) endpoint has been replaced by the Name format summary endpoint.\n2017\n2017-12-20\nNew Operation Method Route Education list (All constituents) GET /educations Changed The Relationship list (Single constituent) and Relationship list (All constituents) endpoints now return the reciprocal_relationship_id property on the relationship entity.\nThe Constituent custom field list (All constituents) endpoint now includes options to filter custom fields based on their categories and values. The optional category and value parameters filter the results to only custom fields with the specified categories and values.\nThe Currency configuration endpoint now returns the iso_alpha_2_code property on the currency configuration entity. 2017-12-07\nNew Operation Method Route Alias list (Single constituent) GET /constituents/{constituent_id}/aliases Alias (Create) POST /aliases Name format configuration list GET /nameformatconfigurations Name format types GET /nameformattypes 2017-12-01\nNew\nAdded the following endpoints: Operation Method Route Relationship list (All constituents) GET /relationships Alias types GET /aliastypes Changed The Relationship list (Single constituent) endpoint now returns the date_added and date_modified properties on the relationship entity. 2017-11-09\nNew\nAdded the following endpoint: Operation Method Route Note list (All constituents) GET /notes Changed The Note (Get) and Note list (Single constituent) endpoints now return the date_added and date_modified properties on the note entity.\nThe Constituent (Search) endpoint now returns the inactive and deceased properties on the search result entity.\nThe Constituent (Search) endpoint also now returns suffix information in the name field when constituent records include suffix or suffix_2.\nThe optional include_inactive query parameter is now available on Constituent (Search) endpoint to indicate whether to include inactive constituents. By default, this parameter is set to true. 2017-10-24\nAnnouncement: Breaking Changes Planned for Constituent API\nWe will change the name format entity to support custom name formats and provide a more robust entity.\nAdditionally, we will update the Name format list (Single constituent) endpoint to support the next generation of name formats. Currently, the endpoint returns only the primary addressee and primary salutation for a constituent. With our change, it will also return the other non-primary name formats as part of the updated entity model mentioned above.\n2017-10-20\nChanged\nThe Constituent list endpoint now includes an option to filter constituents based on their record IDs. The optional constituent_id query parameter, which can be specified multiple times to imply a logical OR, filters the results to only constituents with the specified IDs. For example, &constituent_id=1242&constituent_id=385 filters the results to only two constituents records: \"1242\" and \"385.\"\n2017-08-28\nNew\nAdded the following endpoint: Operation Method Route Action locations GET /actionlocations Changed On the Constituent (Create) endpoint, we updated the gender property to set the default value to unknown when the property is not supplied in the request body.\nWe added the start_time, end_time, location, priority, direction, and outcome properties to the action entity.\nThe completed_date property on the action entity is now writable on the Action (Create) and Action (Edit) endpoints. 2017-08-08\nNew\nAdded the following endpoint: Operation Method Route Relationship (Edit) PATCH /relationships/{relationship_id} 2017-06-28\nChanged\nWe added the start, end, seasonal_start, and seasonal_end properties to the address entity.\n2017-06-27\nChanged\nWe updated the concept of inactive addresses to be consistent across address endpoints and better aligned with the web interface. Now, addresses are only marked inactive if their end_date is in the past.\n2017-05-17\nNew\nAdded the following endpoint: Operation Method Route Action list (All constituents) GET /actions 2017-05-12\nChanged\nWe added the comment property to the relationship entity.\n2017-05-09\nChanged The Communication preference (Edit) endpoint now supports patching the start and end fields on a communication preference. The Action (Get) and Action list (Single constituent) endpoints now return the date_added and date_modified properties on the action entity. 2017-04-25\nNew\nAdded the following endpoints: Operation Method Route Relationship POST /constituent/constituents/relationships Relationship types GET /constituent/constituents/relationshiptypes Organization contact types GET /constituent/constituents/organizationcontacttypes Changed\nGET operations such as Relationship list (Single constituent) that return relationship entities now return the following new properties: Property Type Description reciprocal_type string The reciprocal relationship type. Describes the constituent's relationship to the related constituent. For example, in a relationship between a male constituent and a female sibling, the reciprocal relationship type would be brother. Available values are the entries in the Relationships table. is_spouse boolean Indicates whether the related constituent is the constituent's spouse. Only applies to relationships between individuals. is_organization_contact boolean Indicates whether the related individual represents the organization as a contact. Only applies to relationships between organizations and individuals. is_primary_business boolean Indicates whether the related organization is the individual's primary business. Only applies to relationships between organizations and individuals. organization_contact_type string The contact type that provides context for interactions with the related individual who represents the organization as a contact. Available values are the entries in the Contact Types table. Only applies to relationships between organizations and individuals. position string The individual's position in the organization. Only applies to relationships between organizations and individuals. 2017-04-20\nChanged The date_added parameter on the Constituent list endpoint now returns a sort_token on the next_link URL to enable pagination for stable data syncing.\nThe Constituent list endpoint now includes a sort parameter to sort constituents based on specified fields. For example, sort=date_modified,-last returns constituents in ascending order based on the date_modified field and then orders constituents with the same last-modified date in descending order based on their last names. If the sort parameter provides only the date_modified field or only the date_added field, then it returns a sort_token on the next_link URL. 2017-04-06\nChanged The Constituent list endpoint now populates the marital_status property by default. 2017-02-23\nChanged The Constituent list endpoint now includes an optional custom_field_category parameter to retrieve constituents only if their active custom fields match specified custom field categories.\nThe Fundraiser list (Single constituent) endpoint now returns the appropriate value for the constituent_id field. 2017-02-09\nChanged The major and minor properties on the education entity have been updated to return an array of strings. They have been renamed majors and minors.\nThe subject_of_study property on the education entity is no longer returned in the major property. Instead, it uses a dedicated property for UK-formatted databases.\nThe Address (Create) endpoint no longer requires the country property. When country is not provided, the endpoint uses the organization's default country configuration.\nThe country property on the address entity now accepts a country ID, name, or abbreviation. The property uses preferential selection to match against ID first, then name, and then abbreviation.\nThe Ratings list (Single constituent) endpoint now includes an optional most_recent_only parameter to retrieve only the most recent rating for each category. New\nAdded the following endpoints: Operation Method Route Countries (Get) GET /countries Education (Create) POST /educations Education (Edit) PATCH /educations/{education_id} Education (Delete) DELETE /educations/{education_id} Education schools (Get) GET /educations/schools Education types (Get) GET /educations/types Education statuses (Get) GET /educations/statuses Education subjects (Get) GET /educations/subjects Education degrees (Get) GET /educations/degrees Education departments (Get) GET /educations/departments Education degree classes (Get) GET /educations/degreeclasses Education faculties (Get) GET /educations/faculties 2017-01-31\nAnnouncement: Breaking Changes Planned for Constituent API\nWe are updating some properties on the education entity to improve overall feature parity and to support upcoming POST and PATCH education endpoints in the Constituent API. The major and minor properties will both be updated to return an array of strings. They will also be renamed majors and minors.\nThe subject_of_study property will no longer be returned in the major property. Instead, it will use a dedicated property for UK-formatted databases. 2017-01-11\nChanged\nOn the Address (Create) endpoint, we updated the do_not_mail and preferred properties to set the default value to false when the properties are not supplied in the request body.\n2017-01-10\nChanged\nWe added the campus, known_name, and social_organization properties to the education entity.\n2017-01-06\nChanged We updated the Constituent custom field list (Single constituent) endpoint to populate the date_added and date_modified properties. We updated the Constituent code list (Single constituent) endpoint to populate the inactive, date_added, and date_modified properties. 2016\n2016-12-12\nNew\nAdded the following endpoint: Operation Method Route Rating category values (Get) GET /ratings/categories/values Changed We changed the format of the name property on the Constituent (Get) endpoint to \"FirstName LastName\" for consistency with the Constituent list endpoint. We updated the Email address (Edit) and Online presence (Edit) endpoints to respect the type property. We changed the Rating (Create) endpoint to require the \"source\" property for categories that have a source. 2016-11-23\nChanged We updated the Constituent (Create), Constituent (Edit), Constituent (Get), and Constituent list endpoints to ensure that the lookup_id, inactive, and gives_anonymously properties are respected and populated. We updated the Constituent (Edit) endpoint to appropriately respect Constituent Biographical Edit permissions. 2016-11-16\nChanged\nThe Constituent list endpoint now includes an option to filter constituents based on their associated constituent codes. The optional constituent_code query parameter returns constituents if any of the specified constituent codes match any of their active constituent codes. For example, constituent_code=Board Member&amp;constituent_code=Volunteer returns constituents with either \"Board Member\" or \"Volunteer\" constituent codes.\n2016-11-14\nNew\nAdded the following endpoints: Operation Method Route Constituent code list (All Constituents) GET /constituents/constituentcodes Constituent custom field list (All constituents) GET /constituents/customfields Changed We renamed all existing list endpoints to implement a new naming convention that better indicates whether the endpoints return data for a single constituent or for all constituents. Endpoints that return data for a single constituent are now postfixed with (Single constituent). Endpoints that return data for all constituents are now postfixed with (All constituents). The Address list (All constituents) endpoint no longer includes inactive addresses by default. To include inactive addresses, use the optional include_inactive parameter in the request. The Address list (All constituents) endpoint now populates the formatted_address property. We updated the following endpoints to appropriately respect constituent record-level security: Operation Method Route Address (List) GET /addresses Email address (List) GET /emailaddresses Online presence (List) GET /onlinepresences Phone (List) GET /phones 2016-10-20\nNew\nAdded the following endpoints: Operation Method Route Address (List)* GET /addresses Email address (List)* GET /emailaddresses Online presence (List)* GET /onlinepresences Phone (List)* GET /phones * The new endpoints assume the names of existing endpoints, which were renamed in the endpoint reference. The previous Address (List) is now Constituent address (List); the previous Email address (List) is now Constituent email address (List); the previous Online presence (List) is now Constituent online presence (List); and the previous Phone (List) is now Constituent phone (List). Changed\nWe added the date_added and date_modified properties to the address, email address, online presence, and phone entities.\n2016-10-17\nChanged\nThe fundraisers property on the action entity now contains an array of strings populated with the constituent_id of fundraisers instead of an array of action fundraiser entities.\nNew\nAdded the following endpoints: Operation Method Route Action custom field (List) GET /actions/{action_id}/customfields Action custom field (Create) POST /actions/customfields Action custom field (Edit) PATCH /actions/customfields/{custom_field_id} Action custom field (Delete) DELETE /actions/customfields/{custom_field_id} Action custom field categories (Get) GET /actions/customfields/categories Action custom field category values (Get) GET /actions/customfields/categories/values 2016-10-03\nNew\nAdded the following endpoints: Operation Method Route Prospect status (Get) GET /constituents/{constituent_id}/prospectstatus Fundraiser (List) GET /constituents/{constituent_id}/fundraisers 2016-09-28\nChanged The Constituent (List) endpoint now includes the option to select specific properties on its return object by using the optional fieldsquery parameter. This can reduce the response payload size and improve the response time.\nThe Constituent (List) endpoint no longer returns deceased constituents by default. Instead, they are included by setting the new include_deceased option to true.\nThe Communication preference (List) endpoint can now be paginated using the new limit and offset query parameters. If not specified, the default limit is 10000.\nWe changed the following query string parameters to snake case:\nincludeInactive is now include_inactive on Constituent (List), Email address (List), Online presence (List), Phone (List), Rating (List), Rating categories (Get), and Rating sources (Get).\ncategoryName is now category_name on Constituent custom field category values (Get).\nsearchText is now search_text on Constituent (Search). 2016-09-27\nAnnouncement: Breaking Changes Planned for Constituent API\nWe will change the fundraisers property on the action entity so that it contains a list of strings populated with the constituent_id of fundraisers instead of an array of action fundraiser entities.\n2016-09-23\nAnnouncement: Breaking Changes Planned for Constituent API\nWe will change the query string parameter includeInactive to include_inactive on the Constituent (List) endpoint.\n2016-09-14\nAnnouncement: Breaking Changes Planned for Constituent API The Constituent (List) endpoint will no longer return deceased constituents by default. Instead, they will be included by setting a new include_deceased option to true.\nWe will change the following query string parameters to snake case:\nincludeInactive will be include_inactive on Email address (List), Online presence (List), Phone (List), Rating (List), Rating categories (Get), and Rating sources (Get).\ncategoryName will be category_name on Constituent custom field category values (Get).\nsearchText will be search_text on Constituent (Search). New\nAdded the following endpoints: Operation Method Route Rating sources (Get) GET /ratings/sources Rating categories (Get) GET /ratings/categories Action attachment (Edit) PATCH /actions/attachments/{attachmentId} Action attachment (Delete) DELETE /actions/attachments/{attachmentId} Constituent attachment (Edit) PATCH /constituents/attachments/{attachmentId} Constituent attachment (Delete) DELETE /constituents/attachments/{attachmentId} Changed\nNew tags included in the request will be automatically added to the Document Tags table when adding or updating attachments.\n2016-09-07\nNew\nAdded the following endpoints: Operation Method Route Communication preference (Edit) PATCH /communicationpreferences/{communicationPreferenceId} Rating (Create) POST /ratings Rating (Edit) PATCH /ratings/{ratingId} Rating (Delete) DELETE /ratings/{ratingId} Changed\nWe added the lookup_id property to the search results entity.\n2016-09-02\nChanged\nAll POST endpoints now return a JSON object containing the id, in the form { \"id\": \"123\" }, instead of the previous string response.\n2016-08-31\nNew\nAdded the following endpoints: Operation Method Route Action attachment (List) GET /actions/{actionId}/attachments Action attachment (Create) POST /actions/attachments Changed We changed the URL for the Constituent Attachment (Create) endpoint to /constituents/attachments. The constituentId is now expected in the request body as parent_id.\nThe Constituent (Create) endpoint now supports adding a constituent with the following child entity properties: address, phone number, email address, and online presence.\nWe updated the Constituent (Edit) endpoint to include marital_status, deceased_date, former_name, title_2, and suffix_2 as available PATCH request body properties. 2016-08-29\nAnnouncement: Breaking Changes Planned for Constituent API\nAll POST endpoints will now return a JSON object containing the id, in the form { \"id\": \"123\" }, instead of the current string response.\n2016-08-26\nChanged We renamed the proposal_id property to opportunity_id on actions to be consistent with product verbiage. The Constituent (List) endpoint no longer includes inactive constituents by default. To include inactive constituents, use the optional includeInactive parameter in the request. Announcement: Breaking Changes Planned for Constituent API\nWe will change the URL for the Constituent Attachment (Create) endpoint to /constituents/attachments.\n2016-08-22\nNew\nAdded the following endpoints: Operation Method Route Currency configuration (Get) GET /currencyconfiguration Changed The data type assigned to the value property on the rating entity was changed from a string to an object. Previously, all values were returned as strings that needed to be parsed (by the requestor) into the intended types. Currently, the rating value will be returned with its data type intact based on the type with the following mapping: Type Description boolean Defines the rating value as a boolean JSON data type. codetable Defines the rating value as a string JSON data type that refers to a code table entry. currency Defines the rating value as a number JSON data type. datetime Defines the rating value as a string JSON data type in ISO-8601 format: 2015-09-18T00:00:00. number Defines the rating value as a number JSON data type. text Defines the rating value as a string JSON data type. We corrected an issue with the postal_code filter within the Constituent (List) endpoint where incorrect values were returned if the postal codes filter listed multiple postal codes that were separated by commas or if postal codes contained leading space characters. Announcement: Breaking Changes Planned for Constituent API We will rename the constituent_id property to parent_id to support additional attachment areas such as action attachments.\nWe will rename the proposal_id property to opportunity_id on actions to be consistent with product verbiage. 2016-08-18\nAnnouncement: Breaking Changes Planned for Constituent API\nThe Constituent (List) endpoint will no longer include inactive constituents by default. To include inactive constituents, use the optional includeInactive parameter in the request.\n2016-08-16\nAnnouncement: Breaking Changes Planned for Constituent API\nThe data type assigned to the value property on the rating entity will be changed from a string to an object. As it stands today, all values are returned as a string, which must then be parsed (by the requestor) into the intended type. After release, the Rating value will be returned with its data type intact.\n2016-08-11\nNew\nAdded the following endpoints: Operation Method Route Communication preference (Create) POST /communicationpreferences Communication preference (Delete) DELETE /communicationpreferences/{communicationPreferenceId} Communication preferences (Get) GET /communicationpreferences Changed We added start and end to the communication preference entity to represent optional start and end dates.\nWe added the ability to retrieve inactive rating records by including a new, optional includeInactive parameter in the request. 2016-08-03\nNew\nAdded the following endpoints: Operation Method Route Communication preference (List) GET /constituents/{constituentId}/communicationpreferences Changed We removed boolean_value, code_table_value, constituent_id_value, date_value, fuzzy_date_value, currency_value, numeric_value, text_value and replaced them with a single value property for use with any type on the custom field entity.\nWe added the gpa, class_of_degree, faculty, department, and registration_number properties to the education entity.\nWe added the ability to paginate search results by including a new, optional limit and offset parameters in the request.\nWe added the ability to retrieve inactive address records by including a new, optional includeInactive parameter in the request. 2016-07-29\nAnnouncement: Breaking Changes Planned for Constituent API We will remove boolean_value, code_table_value, constituent_id_value, date_value, fuzzy_date_value, currency_value, numeric_value, text_value and replace them with a single value property for use with any type on the custom field entity.\nThis change is planned to take effect on Monday, August 1st. 2016-07-27\nAdded the following endpoints: Operation Method Route Constituent (Edit) PATCH /constituents/{constituentId} 2016-07-22\nNew\nAdded the following endpoints: Operation Method Route Rating (List) GET /constituents/{constituentId}/ratings/ Constituent custom field (Create) POST /constituents/customfields/ Constituent custom field (Edit) PATCH /constituents/customfields/{customFieldId} Constituent custom field (Delete) DELETE /constituents/customfields/{customFieldId} Constituent custom field category values (Get) GET /constituents/customfields/categories/values Changed\nWe added the date_added, date_modified, title_2, suffix_2, marital_status, deceased_date properties to the constituent entity.\n2016-07-18\nNew\nAdded the following endpoint: Operation Method Route Constituent (Create) POST /constituents Changed\nWe removed the business property from the constituent entity.\n2016-07-07\nChanged We renamed kind to type and types to tags on the attachment entity.\nWe renamed nickname to preferred_name on the constituent entity. 2016-07-01\nNew\nAdded the following endpoints: Operation Method Route First gift (Get) GET /constituents/{constituentId}/givingsummary/first Latest gift (Get) GET /constituents/{constituentId}/givingsummary/latest Greatest gift (Get) GET /constituents/{constituentId}/givingsummary/greatest Constituent custom field categories (Get) GET /constituents/customfields/categories Titles (Get) GET /titles Suffixes (Get) GET /suffixes Marital statuses (Get) GET /maritalstatuses 2016-06-30\nAnnouncement: Breaking Changes Planned for Constituent API We will rename kind to type and types to tags on the attachment entity.\nWe will rename nickname to preferred_name on the constituent entity.\nThis change is planned to take effect on Wednesday, July 6. 2016-06-27\nNew Added the following endpoint: Operation Method Route Address (Edit) PATCH /addresses/{addressId} Added the ability to retrieve inactive email address, online presence, and phone records by including a new, optional includeInactive parameter in the request. 2016-06-20\nChanged\nWe updated the Constituent (List) endpoint to include a new, optional postal_code parameter which provides the ability to filter constituents by postal code based on their preferred address. The parameter value supports multiple postal codes separated by commas. Postal codes will match on a constituent if the preferred address postal code begins with one of the specified filter postal codes. For example, given the query postal_code=99577,10001, the response could contain constituents whose preferred address has a postal code of 99577-0727 or 10001.\n2016-06-15\nNew\nAdded the following endpoint: Operation Method Route Address (Delete) DELETE /addresses/{addressId} Changed\nWe added a versioning indicator to the Constituent API's base URL. Specifically, all new API requests must begin with https://api.sky.blackbaud.com/constituent/v1.\n2016-06-10\nAnnouncement: Breaking Changes Planned for Constituent API We will be adding a versioning indicator to the Constituent API's base URL. Specifically, all new API requests should begin with https://api.sky.blackbaud.com/constituent/v1.\nThis change is planned to take effect on Wednesday, June 15. 2016-06-09\nNew\nAdded the following endpoint: Operation Method Route Address (Create) POST /addresses 2016-06-06\nNew\nAdded the following endpoints: Operation Method Route Lifetime giving (Get) GET /constituents/{constituentId}/givingsummary/lifetimegiving Membership (List) GET /constituents/{constituentId}/memberships 2016-06-01\nNew\nAdded the following endpoints: Operation Method Route Action types (Get) GET /actiontypes Action status types (Get) GET /actionstatustypes 2016-05-27\nNew Added the following endpoints: Operation Method Route Note types (Get) GET /notetypes Added a General Ledger changelog to help you keep up with General Ledger API changes. 2016-05-24\nNew\nAdded the following endpoints: Operation Method Route Address types (Get) GET /addresstypes Changed\nWe renamed send_mail to do_not_mail on the address entity. Additionally, the boolean logic has been switched.\n2016-05-20\nAnnouncement: Breaking Changes Planned for Constituent API We will rename send_mail to do_not_mail on the address entity. Additionally, the boolean logic will be switched.\nWe will remove the business property from the constituent entity. New\nAdded the following endpoints: Operation Method Route Phone (Create) POST /phones Phone (Edit) PATCH /phones/{phoneId} Phone (Delete) DELETE /phones/{phoneId} Phone types (Get) GET /phonetypes Email address types (Get) GET /emailaddresstypes Online presence types (Get) GET /onlinepresencetypes Constituent code types (Get) GET /constituentcodetypes Changed\nWe implemented the following breaking changes: We removed the following address properties:\nprimary_business\nstart\nend\nseasonal\nseasonal_start\nseasonal_end\nin_season\nvalid We renamed the address to formatted_address. 2016-05-16\nAnnouncement: Breaking Changes Planned for Constituent API We will remove the following address properties: primary_business\nstart\nend\nseasonal\nseasonal_start\nseasonal_end\nin_season\nvalid We will remove the business property from the constituent entity. 2016-05-13\nNew We updated the Constituent (List) endpoint to include a new, optional date_added parameter which provides the ability to poll for recently added constituents since a specified date/time. The parameter value should consist of a URL encoded UTC datetime. When specified, the list is sorted by date added in ascending order. We updated the Constituent (List) endpoint to include a new, optional last_modified parameter which provides the ability to poll for recently changed constituents since a specified date/time. The parameter value should consist of a URL encoded UTC datetime. When specified, the list is sorted by last modified in ascending order.\nThe response includes a sort_token within the next_link property. sort_token represents a token filter for providing the next set of constituents, ordered by the last modified date. Note: The Constituent (List) endpoint returns data with an average latency of 30 minutes. 2016-05-06\nNew Added the following granular address properties: address_lines\ncity\nsuburb\nstate\npostal_code\ncounty\ncountry Addresses are returned by the following endpoints: Operation Method Route Constituent (Get) GET /constituents/{constituentId} Constituent (List) GET /constituents Address (List) GET /constituents/{constituentId}/addresses Added international address field support for the following countries. Field United States Canada United Kingdom Australia New Zealand address_lines city * suburb state ! postal_code county country * Australia - City or suburb data is returned with the city field for GET operations. Future endpoints will allow you to POST and PATCH address data. In these cases, you can use either the suburb or city properties, but not both at the same time. Providing both property values in future POST and PATCH operations will result in an error. ! Canada - Use the state property to track a Canadian Province Changed For consistency, constituent_id is included in the following entities: Address\nAttachment\nConstituent code\nEmail address\nOnline presence\nPhone\nCustom field\nName format\nProfile picture\nAction\nNote When editing, existing endpoints that previously used the PUT HTTP verb have been replaced with PATCH. PATCH can be used to update partial resources. For instance, when you only need to update one field of the resource. Impacted constituent related endpoints include: Operation New Method Route Action (Edit) PATCH /actions/{actionId} Constituent code (Edit) PATCH /constituentcodes/{constituentCodeId} Email address (Edit) PATCH /emailaddresses/{emailAddressId} Note (Edit) PATCH /notes/{noteId} Online presence (Edit) PATCH /onlinepresences/{onlinePresenceId} We made changes to the custom field entity: To better denote the fields that can represent the \"value\" of the custom field, we appended a _value suffix to the field name for the following fields: constituent_id_value\ndate_value\ntext_value\nnumber_value\ncurrency_value\nboolean_value\ncode_table_value\nfuzzy_date_value Renamed the constituent_id property to parent_id to avoid confusion with the constituent_id_value field and to facilitate the re-use of this type across other entities. The parent_id represents the parent object's identifier. For example, in the case of constituent custom fields, the parent_id represents the constituent identifier. Added date and comment properties. 2016-04-26\nAnnouncement: Breaking Changes Planned for Constituent API\nIn the coming days two breaking changes will be placed into effect: We will replace existing PUT endpoints to use PATCH, instead. Unlike PUT, PATCH can be used to update partial resources. For instance, when you only need to update one field of the resource. In this way the payload size is optimized. 2016-04-25\nNew Added the ability to create, edit, and delete email addresses: Operation Method Route Email address (Create) POST /emailaddresses Email address (Edit) PUT /emailaddresses/{emailAddressId} Email address (Delete) DELETE /emailaddresses/{emailAddressId} Added the ability to create and edit constituent codes: Operation Method Route Constituent code (Create) POST /constituentcodes Constituent code (Edit) PUT /constituentcodes/{constituentCodeId} Constituent code (Delete) DELETE /constituentcodes/{constituentCodeId} 2016-04-15\nNew\nAdded the ability to create, edit, and delete online presence entities: Operation Method Route Online presence (Create) POST /onlinepresences Online presence (Edit) PUT /onlinepresences/{onlinePresenceId} Online presence (Delete) DELETE /onlinepresences/{onlinePresenceId} 2016-04-08\nNew Added the ability to return a paginated list of constituents. For this release, the list will be ordered by name (last name for individuals, organization name for organizations). Operation Method Route Constituent (List) GET /constituents The endpoint supports the following the optional request parameters. Pagination is facilitated through the results via the top and skip parameters: Property Description top Optional. Integer. Represents the number of records to return. If not specified, the default is 100. The maximum allowed value is 500. skip Optional. Integer. Represents the number of records to skip. Changed Breaking change implemented for the Constituent API endpoints that return a collection of objects. This change allows us to be consistent in the representation of data collections and supports pagination for certain endpoints. See the 2016-03-31 changelog entry for a listing of affected endpoints. Constituent (Search) now supports the ability to search on an email address (same functionality as found in the RE NXT search feature). This expanded search will match against constituent email addresses when the searchText parameter is a valid email address. Note that we currently support exact match only. 2016-03-31\nAnnouncement: Breaking Changes Planned for Constituent API endpoints\nIn the coming weeks, we will be standardizing the shape of our responses that return a collection of objects. This standardization will allow us to be consistent across each endpoint as well as to facilitate some future enhancements around pagination within those endpoints. The new representation of a collection will be a JSON object with two properties, a count which represents the total number of records meeting the criteria and a value property which represents the array of items for the current paged response.\nThis change is scheduled for release by April 8, 2016. How a collection response is formed today (Phones used as an example):\n{ \"phones\": [ { \"id\": \"95\", \"type\": \"Home\", \"number\": \"303-997-3301\", \"do_not_call\": false, \"primary\": true, \"inactive\": false }, { \"id\": \"330\", \"type\": \"Home\", \"number\": \"(312) 997-3301\", \"do_not_call\": false, \"primary\": false, \"inactive\": false } ]\n} How the response will be formed after release:\n{ \"count\": 10, // total number of elements in the collection \"value\": [ // collection of items included in this response { \"id\": \"95\", \"type\": \"Home\", \"number\": \"303-997-3301\", \"do_not_call\": false, \"primary\": true, \"inactive\": false }, { \"id\": \"330\", \"type\": \"Home\", \"number\": \"(312) 997-3301\", \"do_not_call\": false, \"primary\": false, \"inactive\": false } ]\n} * Please note that the response format may change before official release.\nEndpoints affected: Operation Method Route Action (List) GET /constituent/constituents/{constituentId}/actions Address (List) GET /constituent/constituents/{constituentId}/addresses Constituent attachment (List) GET /constituent/constituents/{constituentId}/attachments Constituent code (List) GET /constituent/constituents/{constituentId}/constituentcodes Constituent (Search) GET /constituent/constituents/search/?searchText={searchText} Constituent custom field (List) GET /constituent/constituents/{constituentId}/customfields Education (List) GET /constituent/constituents/{constituentId}/educations Email address (List) GET /constituent/constituents/{constituentId}/emailaddresses Name format (List) GET /constituent/constituents/{constituentId}/nameformats Note (List) GET /constituent/constituents/{constituentId}/notes Online presence (List) GET /constituent/constituents/{constituentId}/onlinepresences Phone (List) GET /constituent/constituents/{constituentId}/phones Relationship (List) GET /constituent/constituents/{constituentId}/relationships 2016-03-30\nNew Added the ability to return a list of relationships for a specified constituent. Operation Method Route Relationship (List) GET /constituents/{constituentId}/relationships Added the ability to return a constituent's profile picture. Operation Method Route Profile picture (Get) GET /constituents/{constituentId}/profilepicture Changed\nGET operations that return an attachment endpoint, such as Constituent attachment (List), return the following new properties: Property Description thumbnail_url Read only. String. Represents an image thumbnail URI for a picture to display. Endpoints that add or edit attachments ignore this property. file_size Read only. Long integer. The file size of the attachment in bytes. Only applies to physical attachments. Helps to determine how to display large images. Endpoints that add or edit attachments ignore this property. 2016-03-10\nNew Added the ability to return a list of education items for a specified constituent. Operation Method Route Education (List) GET /constituents/{constituentId}/educations Added the ability to edit and delete actions and notes for a constituent: Operation Method Route Action (Edit) PUT /actions/{actionId} Action (Delete) DELETE /actions/{actionId} Note (Edit) PUT /notes/{noteId} Note (Delete) DELETE /notes/{noteId} Changed OAuth and Constituent API URLs changed. See Base URLs. The route for the authorization endpoint is no longer prefixed with renxt. Operation Method Old Route New Route authorization (Get) GET /renxt/authorization /authorization The base URL for the Constituent API has changed: Old New https://api.nxt.blackbaud-dev.com/constituents/ https://api.sky.blackbaud.com/constituent After creating an attachment for a constituent, the returned representation of an attachment now includes the attachment identifier (id). Values for the Constituent gender property now return the values using the correct casing (lowercase). GET and POST routes for actions and notes endpoints have changed: Operation Method Old Route New Route Action (Get) GET /{constituentId}/actions/{actionId} /actions/{actionId} Action (Create) POST /{constituentId}/actions /actions Note (Get) GET /{constituentId}/notes/{noteId} /notes/{noteId} Note (Create) POST /{constituentId}/notes /notes Deleted\nWe removed the following endpoints: GET Attachment\nGET Constituent code\nGET Custom field\nGET Email address\nGET Online presence\nGET Phone\nGET Primary business\nGET Spouse 2015\n2015-10-20\nNew Added 3 new endpoints covering constituent attachments\nGet a list of constituent attachments\nGet a specific attachment for a constituent\nAdd an attachment for a constituent Note that currently, all attachment records are viewable through the SKY API, but only link attachments can be added. Changed Removed Author from the constituent note entity. The author is now inferred from the context of the user calling the SKY API. "
      },
      {
       "layout": "layout-sidebar",
       "name": "Fundraising",
       "description": "Information on additions and changes for the Fundraising API.",
       "order": 125,
       "published": true,
       "showInNav": true,
       "icon": "fa fa-line-chart",
       "back_to_top": true,
       "title": "Fundraising Changelog",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Support Changelog Fundraising",
       "abspath": "support/changelog/fundraising/index.md",
       "uri": "/support/changelog/fundraising/",
       "text": " Fundraising\nMonitor this page to keep up with the Fundraising API latest changes and SKY API service releases.\n2018-07-11\nAnnouncement: Changes for Fundraising API\nWe will transition the Fundraising (Beta) API out of its current public beta phase and into a formal v1 release.\nJune\n2018-06-19\nNew\nAdded the following endpoints: Operation Method Route Package list GET /packages 2018-06-01\nAnnouncement: Changes for Fundraising API\nWe implemented new operation ID values in the OpenApi (fka Swagger) definitions for all endpoints in the Fundraising API. Note that any existing code relying on these endpoints will continue to function, since all routes and parameters are unchanged. However, if you make use of client-side generated code and want to regenerate your client wrapper, compile-time errors in your code stemming from new operation ID values will arise and need to be addressed.\nNew\nAdded the following endpoint: Operation Method Route Document (Create) POST /documents May\n2018-05-25\nAnnouncement: Changes Planned for Constituent, Fundraising, Gift, and Opportunity APIs\nWe will implement new operation ID values in the OpenApi (fka Swagger) definitions for several SKY APIs. This change will improve client-side tooling support for code generation by making these values more deterministic and friendlier across different languages. Going forward, we expect high stability of these values (meaning, we won’t need to change them again).\nNote that any existing code that has been deployed will continue to function with no problems, since we are not changing any routes or parameters. If you make use of client-side generated code and want to regenerate your client wrapper, you’ll need to fix any compile-time errors in your code stemming from new method names.\nApril\n2018-04-19\nNew\nAdded the following endpoints: Operation Method Route Fundraiser assignment list (Single fundraiser) GET /fundraisers/{fundraiser_id}/assignments Fundraiser assignment (Create) POST /fundraisers/assignments Fundraiser assignment (Edit) PATCH /fundraisers/assignments/{assignment_id} Fundraiser assignment (Delete) DELETE /fundraisers/assignments/{assignment_id} Fundraiser types GET /fundraisers/types February\n2018-02-27\nNew\nAdded the following endpoints: Operation Method Route Fundraiser goal list (Single constituent) GET /fundraisers/{fundraiser_id}goals Fundraiser goal (Create) POST /fundraisers/goals Fundraiser goal (Edit) PATCH /fundraisers/goals/{goal_id} Fundraiser goal (Delete) DELETE /fundraisers/goals/{goal_id} Appeal categories GET /appeals/categories Campaign categories GET /campaigns/categories Fund categories GET /funds/categories Changed\nWe changed the URL for the Goal categories (Get) endpoint to /fundraisers/goals/categories as previously announced.\n2018-02-09\nAnnouncement: Breaking Changes Planned for Fundraising API\nWe will change the URL for the Goal categories (Get) endpoint to /fundraisers/goals/categories.\n2018-02-05\nChanged\nWe added the type property to the fund entity.\nJanuary\n2018-01-29\nNew\nAdded the following endpoint: Operation Method Route Attachment tags GET /attachmenttags Changed We added the date property to the attachment entity.\nWe added the category property to the campaign, fund, and appeal entities. 2017\n2017-12-15\nNew\nAdded the following endpoints: Operation Method Route Goal categories GET /fundraising/goalcategories Package GET /packages/{package_id} 2017-08-28\nNew\nAdded the following endpoints: Operation Method Route Appeal attachment list (Single appeal) GET /appeals/{appeal_id}/attachments Appeal attachment (Create) POST /appeals/attachments Appeal attachment (Edit) PATCH /appeals/attachments/{attachment_id} Appeal attachment (Delete) DELETE /appeals/attachments/{attachment_id} Campaign attachment list (Single campaign) GET /campaigns/{campaign_id}/attachments Campaign attachment (Create) POST /campaigns/attachments Campaign attachment (Edit) PATCH /campaigns/attachments/{attachment_id} Campaign attachment (Delete) DELETE /campaigns/attachments/{attachment_id} Fund attachment list (Single fund) GET /funds/{fund_id}/attachments Fund attachment (Create) POST /funds/attachments Fund attachment (Edit) PATCH /funds/attachments/{attachment_id} Fund attachment (Delete) DELETE /funds/attachments/{attachment_id} 2017-05-09\nChanged\nThe Appeal list, Campaign list, and Fund list endpoints now exclude inactive records by default. To include inactive records, set the include_inactive parameter to true.\n2017-04-28\nAnnouncement: Breaking Changes Planned for Fundraising API\nWe will update the default value of the include_inactive filter to false on the Appeal list, Campaign list, and Fund list endpoints to exclude inactive records by default. Currently, the filter defaults to true and includes inactive records when no value is supplied.\n2017-04-06\nNew\nAdded the following endpoints: Operation Method Route Appeal list GET /appeals Campaign list GET /campaigns Fund list GET /funds 2017-03-08\nNew\nThe Fundraising API has been released for a public beta. This API handles information related to the fundraising hierarchy, including the campaign, fund, and appeal entities: Campaigns set the overall objectives and initiatives for raising money, and they are typically the top tier of the fundraising hierarchy. For example, organizations can create campaigns to encompass fundraising efforts related to annual operating expenses, new buildings, or endowments.\nFunds represent the donor's intent for how to use or earmark a gift. For example, the gift can be intended for a specific cause or financial purpose. Funds are often linked to financial suites and indicate where to allocate a gift.\nAppeals are the sources and solicitations that bring in gifts, and they are typically the most granular piece of the fundraising hierarchy. Examples of appeals include direct mailings, online donation pages, phonathons, auctions, and events. The initial release contains endpoints to retrieve these entities by ID and to manage custom fields. For more information, see the entity and endpoint references. "
      },
      {
       "layout": "layout-sidebar",
       "name": "Gift",
       "description": "Information on additions and changes for the Gift API.",
       "order": 175,
       "published": true,
       "showInNav": true,
       "icon": "fa fa-gift",
       "back_to_top": true,
       "title": "Gift Changelog",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Support Changelog Gift",
       "abspath": "support/changelog/gift/index.md",
       "uri": "/support/changelog/gift/",
       "text": " Gift\nMonitor this page to keep up with the Gift API latest changes and SKY API service releases.\n2018-07-11\nAnnouncement: Changes for Gift API\nWe will transition the Gift (Beta) API out of its current public beta phase and into a formal v1 release.\nJune\n2018-06-05\nAnnouncement: Changes for Gift API\nWe implemented new operation ID values in the OpenApi (fka Swagger) definitions for all endpoints in the Gift API. Note that any existing code relying on these endpoints will continue to function, since all routes and parameters are unchanged. However, if you make use of client-side generated code and want to regenerate your client wrapper, compile-time errors in your code stemming from new operation ID values will arise and need to be addressed.\nNew\nAdded the following endpoint: Operation Method Route Document (Create) POST /documents Changed\nWe added the id property to the gift split entity.\nMay\n2018-05-25\nAnnouncement: Changes Planned for Constituent, Fundraising, Gift, and Opportunity APIs\nWe will implement new operation ID values in the OpenApi (fka Swagger) definitions for several SKY APIs. This change will improve client-side tooling support for code generation by making these values more deterministic and friendlier across different languages. Going forward, we expect high stability of these values (meaning, we won’t need to change them again).\nNote that any existing code that has been deployed will continue to function with no problems, since we are not changing any routes or parameters. If you make use of client-side generated code and want to regenerate your client wrapper, you’ll need to fix any compile-time errors in your code stemming from new method names.\nJanuary\n2018-01-29\nNew\nAdded the following endpoint: Operation Method Route Attachment tags GET /attachmenttags Changed\nWe added the date property to the attachment entity.\n2017\n2017-12-11\nChanged\nWe added the package_id property to the gift split entity.\n2017-12-01\nChanged The Gift list endpoint now includes an option to filter gifts based on their post statuses. The optional post_status query parameter, which can be specified multiple times to imply a logical OR, filters the results to only include gifts with the specified post statuses. For example, post_status=DoNotPost&post_status=Posted filters the results to only include gifts that are marked either DoNotPost or Posted. The Gift list endpoint now includes an option to filter gifts based on their gift types. The optional gift_type query parameter, which can be specified multiple times to imply a logical OR, filters the results to only include gifts with the specified gift types. For example, gift_type=MatchingGiftPledge&gift_type=RecurringGift filters the results to only include gifts with the MatchingGiftPledge or RecurringGift types. 2017-11-01\nChanged\nWe added the batch_number property to the gift entity. This property is read-only.\n2017-10-27\nNew\nAdded the following endpoint: Operation Method Route Gift (Create) POST /gifts Changed\nThe Gift list endpoint now includes an option to filter gifts based on their associated constituents. The optional constituent_id query parameter, which can be specified multiple times to imply a logical OR, filters the results to only include gifts associated with the specified constituent record IDs. For example, &constituent_id=1242&constituent_id=385 filters the results to only include gifts associated with two constituent records: \"1242\" and \"385.\"\n2017-10-04\nChanged\nWe added the acknowledgements, receipts, and balance properties to the gift entity.\n2017-09-07\nNew\nAdded the following endpoint: Operation Method Route Gift custom field list (All gifts) GET /gifts/customfields Changed\nThe date property on the gift entity no longer returns an offset. Instead, it now uses ISO-8601 format: 2015-09-18T00:00:00.\n2017-08-30\nAnnouncement: Breaking Changes Planned for Gift API\nWe will update the date property on the gift entity to no longer return an offset. Instead, it will use ISO-8601 format: 2015-09-18T00:00:00.\n2017-08-08\nNew\nAdded the following endpoint: Operation Method Route Gift subtypes (Get) GET /giftsubtypes Changed\nWe added the payments property to the gift entity.\n2017-08-04\nChanged\nWe updated the next_link property on the Gift list endpoint to be more consistent with other lists.\n2017-06-23\nChanged\nWe added the gift_aid_amount and gift_aid_qualification_status properties to the gift entity for UK tenants.\n2017-04-25\nNew\nAdded the following endpoints: Operation Method Route Gift custom field (Create) POST /gifts/customfields Gift custom field (Edit) PATCH /gifts/customfields/{custom_field_id} Gift custom field categories (Get) GET /gifts/customfields/categories Gift custom field category values (Get) GET /gifts/customfields/values 2017-03-20\nChanged\nWe added the post_date property to the gift entity.\n2017-03-08\nNew\nThe Gift API has been released for a public beta. This API handles information related to gifts, including related entities such as gift splits, gift fundraisers, and soft credits.\nThe initial release contains endpoints to retrieve a list of all gifts, to retrieve gifts by their IDs, and to manage attachments. For more information, check out the entity and endpoint references. "
      },
      {
       "layout": "layout-sidebar",
       "name": "General Ledger",
       "description": "Information on additions and changes for the General Ledger API.",
       "order": 150,
       "published": true,
       "showInNav": true,
       "icon": "fa fa-book",
       "back_to_top": true,
       "title": "General Ledger Changelog",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Support Changelog Gl",
       "abspath": "support/changelog/gl/index.md",
       "uri": "/support/changelog/gl/",
       "text": " General Ledger\nMonitor this page to keep up with the General Ledger API latest changes and SKY API service releases.\n2018-07-19\nNew\nAdded the following endpoints: Operation Method Route Budget detail GET /budgets/{scenario_id}/details Budget PATCH /budgets/{scenario_id} Budget detail lines (List) GET /budgets/{scenario_id}/details/lines Changed\nWe made several changes to the Journal entry batch attachment endpoint: The endpoint now supports physical attachments. (Previously, it only supported link attachments.)\nNote the shape of the request in JSON form: {\n\"parent_id\": 0,\n\"name\": \"string\",\n\"url\": \"string\",\n\"type\": \"Link\",\n\"media_type\": \"string\",\n\"file\": { \"ContentLength\": 0, \"ContentType\": \"string\", \"FileName\": \"string\", \"InputStream\": { \"CanRead\": true, \"CanSeek\": true, \"CanTimeout\": true, \"CanWrite\": true, \"Length\": 0, \"Position\": 0, \"ReadTimeout\": 0, \"WriteTimeout\": 0 } }\n} The type field now accepts Physical but defaults to Link. The url is required for link attachments but not for physical attachments\nThe file field is HttpPostedFileBase. It is required for physical attachments but not for link attachments.\nFor physical attachments, requests must be multipart/form-data. For example: public static Task PostMultiPartDataFormAsync(this HttpClient client, string route, Attachment content) { var httpContent = new MultipartFormDataContent(); var streamContent = new StreamContent(content.File.InputStream); var ContentDisposition = new ContentDispositionHeaderValue(\"form-data\"); ContentDisposition.Name = \"File\"; ContentDisposition.FileName = content.File.FileName; streamContent.Headers.ContentDisposition = ContentDisposition; streamContent.Headers.ContentType = new MediaTypeHeaderValue(content.File.ContentType); httpContent.Add(streamContent); httpContent.Add(new StringContent(content.ParentId.ToString()), \"ParentId\"); httpContent.Add(new StringContent(content.Name), \"Name\"); httpContent.Add(new StringContent(content.Type.ToString()), \"Type\"); httpContent.Add(new StringContent(content.MediaType.ToString()), \"MediaType\"); var request = new HttpRequestMessage(HttpMethod.Post, route) { Content = httpContent }; return SendAsync(client, request); } In application/json requests, field names must use snake casing such as parent_id and media_type, whereas in multipart/form-data requests, field names must use camel case, such as ParentId and MediaType.\nLink attachments should be sent as application/json formatted requests with the file field omitted.\nIf the file field is populated in application/json formatted requests, the request fails unless type is set to Link because then the request ignores the file. June\n2018-06-28\nNew\nAdded the following endpoint: Operation Method Route Journal entry batch summary GET /journalentrybatches/{batch_id}/summary Journal entries (List) GET /journalentrybatches/{batch_id}/journalentries * We deprecated the Journal entry batch (GET) endpoint and replaced it with the Journal entry batch summary (Get) and Journal entries (List) endpoints. We will continue to support deprecated endpoints for v1 of the General Ledger API, but we recommend transitioning to the new endpoints for a more robust and consistent response.\n2018-06-20\nChanged\nWe made changes to the following endpoints: The Journal entry batch (List) endpoint now includes a new search_text request parameter that can match description or ui_batch_id. For example, ?search_text=100 returns a list of batches with a ui_batch_id that contains \"100\" or a description that contains \"100\".\nThe Budget (List) endpoint now includes a new scenario_id field that returns the scenario ID associated with the budget. 2018-06-12\nAnnouncement: Changes for General Ledger API\nWe implemented new operation ID values in the OpenApi (fka Swagger) definitions for all endpoints in the General Ledger API. Note that any existing code relying on these endpoints will continue to function, since all routes and parameters are unchanged. However, if you make use of client-side generated code and want to regenerate your client wrapper, compile-time errors in your code stemming from new operation ID values will arise and need to be addressed.\n2018-06-04\nAnnouncement: Changes Planned for Accounts Payable, General Ledger, and Treasury (Beta) APIs\nWe will implement new operation ID values in the OpenApi (fka Swagger) definitions for several SKY APIs. This change will improve client-side tooling support for code generation by making these values more deterministic and friendlier across different languages. Going forward, we expect high stability of these values (meaning, we won’t need to change them again).\nNote that any existing code that has been deployed will continue to function with no problems, since we are not changing any routes or parameters. If you make use of client-side generated code and want to regenerate your client wrapper, you’ll need to fix any compile-time errors in your code stemming from new method names.\nMay\n2018-05-24\nChanged\nWe made changes to the following endpoints: The Transaction distribution (List) endpoint now returns proper account_class information.\nThe Journal entry batch (GET) endpoint now returns the correct number of journal_entries.\nIn the Period summary process (GET) endpoint, the status field has been enumerated and all values can now be seen in the Period summary process schema. April\n2018-04-20\nNew\nAdded the following endpoint: Operation Method Route Journal entry batch PATCH /journalentrybatches/{batch_id} With the new endpoint, note the following: You can edit the description, create_interfund_sets, and create_bank_account_adjustments values of an existing journal entry batch.\nPosted journal entry batches cannot be edited.\nOmitting a field from a PATCH request does not edit that field with a default value. In the example below, only create_interfund_entries is edited, but the other fields are not. { “create_interfund_sets”: false\n} March\n2018-03-02\nNew\nAdded the following endpoints: Operation Method Route Client names (List) GET /configuration/client_names Grant status (List) GET /grants/statuses Grant type (List) GET /grants/types Grant custom field (List) GET /grants/customfields Changed\nFor the Period summary process (Start) endpoint, a fiscal_period_id was previously required. Now, when no object is sent or when a fiscal_period_id with value 0 is sent, all open and unoptimized fiscal periods are summarized.\nJanuary\n2018-01-17\nChanged\nFor the Journal entry batch (Post) endpoint, transaction_code_value can now include “” empty string for value.\n2017\n2017-11-20\nNew\nAdded the following endpoints: Operation Method Route Period summary (List) GET /periodsummary/summaries Period summary process GET /periodsummary/processinginfo Period summary process (Start) POST /periodsummary/summarize 2017-08-14\nNew\nAdded the following endpoints: Operation Method Route Journal entry batch attachment POST /journalentrybatches/attachments Media type (List) GET /mediaTypes Changed For the following endpoint, we added the division, department, location, and type filters. Additional data is also returned: Operation Method Route Project GET /projects For the following endpoint, we added the encumbrance and post date filters. Additional data is also returned: Operation Method Route Transaction distribution (List) GET /transactiondistributions 2017-06-15\nChanged\nWe made several changes to the Get Account (Search), Get Project (Search), Get Journal entry batch (List), and Get Transaction distribution (List) endpoints. The following properties are now returned: date_added, date_modified, added_by, and modified_by. The last_modified filter is now included. This filter causes the response to only include results where date_modified is greater than or equal to the last_modified filter value. 2017-05-05\nNew\nAdded the following endpoints: Operation Method Route Budget grant (List) GET /budgets/{scenario_id}/grants Budget project (List) GET /budgets/{scenario_id}/projects Changed\nWe increased the maximum record limit from 500 to 5000 on the following Get endpoint: Operation Method Route Transaction distribution GET /transactiondistributions 2017-01-18\nNew\nAdded the following endpoints: Operation Method Route Account GET /accounts/{account_id} Project GET /projects/{project_id} Account cashflows (List) GET /accounts/cashflows Account working capitals (List) GET /accounts/workingcapitals Account custom fields (List) GET /accounts/customfields 2016\n2016-12-06\nNew Added the following endpoints: Operation Method Route Journal entry custom field (List) GET /journalentries/customfields Project custom field (List) GET /projects/customfields Budget GET /budgets Budget (List) GET /budgets/{scenario_id} Budget account (List) GET /budgets/{scenario_id}/accounts Ledger summary (List) GET /summary/{fiscal_year_id} Added new custom field entities to the following endpoints: Operation Method Route Project POST /projects Journal entry POST /journalentrybatches/{batch_id}/journalentries Journal entry batch GET /journalentrybatches/{batch_id} Changed\nFor consistency across APIs, all responses to GET endpoints that return collections now return an object with \"count\" and \"value\" properties. The following endpoints are affected: Operation Method Route Class (List) GET /classes Journal code (List) GET /journalcodes Project department (List) GET /projects/departments Project division (List) GET /projects/divisions Project location (List) GET /projects/locations Project status (List) GET /projects/statuses Project type (List) GET /projects/types Transaction code (List) GET /transactioncodes Transaction code value (List) GET /transactioncodes/{transaction_code_id}/values 2016-11-14\nAnnouncement: Breaking Change Planned for General Ledger API\nFor consistency across APIs, we will implement the following changes: All responses to GET endpoints that return collections will return an object with \"count\" and \"value\" properties.\nThe following endpoints are affected: Operation Method Route Class (List) GET /classes Journal code (List) GET /journalcodes Project department (List) GET /projects/departments Project division (List) GET /projects/divisions Project location (List) GET /projects/locations Project status (List) GET /projects/statuses Project type (List) GET /projects/types Transaction code (List) GET /transactioncodes Transaction code value (List) GET /transactioncodes/{transaction_code_id}/values 2016-11-01\nNew\nAdded the following endpoints: Operation Method Route Create project (Post) POST /projects Create project contact (Post) POST /projects/{project_id}/contacts 2016-10-06\nNew\nAdded the following endpoints: Operation Method Route Fiscal year (List) GET /fiscalyears Class (List) GET /classes Account structure GET /accounts/structure Account segment value (List) GET /accounts/segments Account code (List) GET /accounts/codes Account fund (List) GET /accounts/funds Project type (List) GET /projects/types Project status (List) GET /projects/statuses Project division (List) GET /projects/divisions Project department (List) GET /projects/departments Project location (List) GET /projects/locations Changed\nYou can now specify Class on journal entries (this affects all endpoints associated with journal entry batches).\n2016-08-12\nBreaking Change\nWe changed the default and maximum record limits on the following search and list endpoints. The default is now 100 records, and the maximum is 500 records. Operation Method Route Transaction distribution (Search) GET /transactiondistributions Account (Search) GET /accounts Project (Search) GET /projects Journal entry batch (List) GET /journalentrybatches 2016-07-05\nChanged\nWe implemented a previously announced, breaking change. We removed the Journal entry batch (Edit) PUT endpoint. At a later date, we plan to replace PUT with PATCH, instead.\n2016-06-30\nAnnouncement: Breaking Change Planned for General Ledger API\nIn the coming days, a breaking change will be placed into effect. We will remove the Journal entry batch (Edit) PUT endpoint. At a later date, we plan to replace PUT with PATCH, instead.\n2016-06-22\nNew\nAdded the following endpoint: Operation Method Route Transaction distribution (Search) GET /transactiondistributions 2016-06-15\nChanged\nWe've added a versioning indicator to the General Ledger API's base URL. Specifically, all new API requests must begin with https://api.sky.blackbaud.com/generalledger/v1.\n2016-06-10\nAnnouncement: Breaking Changes Planned for General Ledger API We will be adding a versioning indicator to the General Ledger API's base URL. Specifically, all new API requests should begin with https://api.sky.blackbaud.com/generalledger/v1.\nThis change is planned to take effect on Wednesday, June 15. 2016-05-27\nNew Added a General Ledger getting started guide to help you make your first General Ledger API call with our interactive SKY API Console. "
      },
      {
       "layout": "layout-sidebar",
       "name": "Opportunity",
       "description": "Information on additions and changes for the Opportunity API.",
       "order": 200,
       "published": true,
       "showInNav": true,
       "icon": "fa fa-handshake",
       "back_to_top": true,
       "title": "Opportunity Changelog",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Support Changelog Opportunity",
       "abspath": "support/changelog/opportunity/index.html",
       "uri": "/support/changelog/opportunity/",
       "text": " Opportunity\nMonitor this page to keep up with the Opportunity API latest changes and SKY API service releases.\n2018-07-11\nAnnouncement: Changes for Opportunity API\nWe will transition the Opportunity (Beta) API out of its current public beta phase and into a formal v1 release.\nJune\n2018-06-01\nAnnouncement: Changes for Opportunity API\nWe implemented new operation ID values in the OpenApi (fka Swagger) definitions for all endpoints in the Opportunity API. Note that any existing code relying on these endpoints will continue to function, since all routes and parameters are unchanged. However, if you make use of client-side generated code and want to regenerate your client wrapper, compile-time errors in your code stemming from new operation ID values will arise and need to be addressed.\nNew\nAdded the following endpoint: Operation Method Route Document (Create) POST /documents May\n2018-05-25\nAnnouncement: Changes Planned for Constituent, Fundraising, Gift, and Opportunity APIs\nWe will implement new operation ID values in the OpenApi (fka Swagger) definitions for several SKY APIs. This change will improve client-side tooling support for code generation by making these values more deterministic and friendlier across different languages. Going forward, we expect high stability of these values (meaning, we won’t need to change them again).\nNote that any existing code that has been deployed will continue to function with no problems, since we are not changing any routes or parameters. If you make use of client-side generated code and want to regenerate your client wrapper, you’ll need to fix any compile-time errors in your code stemming from new method names.\nJanuary\n2018-01-24\nNew\nAdded the following endpoints: Operation Method Route Attachment tags GET /attachmenttags Changed\nWe added the date property to the attachment entity.\n2017\n2017-12-01\nChanged\nThe Opportunity list endpoint now includes an option to filter opportunities based on their associated constituents. The optional constituent_id query parameter, which can be specified multiple times to imply a logical OR, filters the results to only include opportunities associated with the specified constituent record IDs. For example, &constituent_id=1242&constituent_id=385 filters the results to only include opportunities associated with two constituent records: \"1242\" and \"385.\"\n2017-05-10\nChanged\nWe updated the Opportunity (GET) endpoint to return the date_added and date_modified properties.\n2017-04-27\nChanged\nWe added the linked_gifts property to the opportunity entity. This property is an array of identifiers for the gifts that are related to the opportunity.\n2017-04-12\nNew\nThe Opportunity API has been released for a public beta. This API handles information related to opportunities, including the opportunity, opportunity attachments, and opportunity fundraiser entities.\nThe initial release contains endpoints to retrieve these entities by ID and to manage custom fields. For more information, check out the entity and endpoint references. "
      },
      {
       "layout": "layout-sidebar",
       "name": "Payments (Beta)",
       "description": "Information on additions and changes for the Payments API (Beta).",
       "order": 210,
       "published": true,
       "showInNav": false,
       "icon": "fa fa-credit-card",
       "back_to_top": true,
       "title": "Payments (Beta) Changelog",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": false,
       "showInFooter": false,
       "showInSearch": true,
       "breadcrumbs": "Support Changelog Payments",
       "abspath": "support/changelog/payments/index.md",
       "uri": "/support/changelog/payments/",
       "text": " Payments (Beta)\nMonitor this page to keep up with the Payments API (Beta) latest changes and SKY API service releases. "
      },
      {
       "layout": "layout-sidebar",
       "name": "School (Beta)",
       "description": "Information on additions and changes for the School API (Beta).",
       "order": 210,
       "published": true,
       "showInNav": false,
       "icon": "fa fa-graduation-cap",
       "back_to_top": true,
       "title": "School (Beta) Changelog",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": false,
       "showInFooter": false,
       "showInSearch": true,
       "breadcrumbs": "Support Changelog School",
       "abspath": "support/changelog/school/index.md",
       "uri": "/support/changelog/school/",
       "text": " School (Beta)\nMonitor this page to keep up with the School API (Beta) latest changes and SKY API service releases.\n02 July 2018\nNew\nAdded the following endpoint(s): Operation Method Route Sport list GET /athletics/sports[?season_id] Team roster GET /users/extended?base_role_ids={base_role_ids}[&marker] 30 May 2018\nNew\nAdded the following endpoint(s): Operation Method Route Student list (single section) GET /academics/sections/{section_id}/students User extended list GET /users/extended?base_role_ids={base_role_ids}[&marker] 15 May 2018\nNew\nAdded the following endpoint(s): Operation Method Route Student enrollment list GET /academics/enrollments/{student_id}[?school_year] Phone type list GET /users/phonetypes Assignment list (single section) GET /academics/sections/{section_id}/assignments[?types][&status][&persona_id][&filter][&search] Section list GET /academics/sections[?level_num][&school_year] Relationship list (single user) GET /users/{user_id}/relationships "
      },
      {
       "layout": "layout-sidebar",
       "name": "Shared",
       "description": "Common changes shared across all our APIs.",
       "order": 50,
       "published": true,
       "showInNav": true,
       "icon": "fa fa-cloud",
       "back_to_top": true,
       "title": "Shared Changelog",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Support Changelog Shared",
       "abspath": "support/changelog/shared/index.md",
       "uri": "/support/changelog/shared/",
       "text": " Shared\nMonitor this page to keep up with common changes shared across all our APIs.\nMay 2017\n2017-05-31\nChanged\nWe moved the Status page link from the Support menu to the top navigation. This makes it even quicker for you to see the current state of API availability. If you haven't signed up yet, we encourage you to subscribe to automatic incident notifications. You can subscribe by email, SMS or RSS feed.\n2017-05-04\nNew\nWe added a new step-by-step guide to help you learn the steps required to Create an App with SKY API. We recommend you complete this guide after you follow the Getting Started documentation.\nMarch 2017\n2017-3-10\nNew\nIn response to a request from the Blackbaud Community, we are pleased to announce a new PHP code sample and accompanying PHP tutorial. These two new resources demonstrate the Blackbaud Auth Code Flow using PHP.\n2017-3-03\nNew\nThe SKY API developer site now offers commenting capability through Disqus. We encourage community involvement to improve our documentation. We will monitor comments just like we monitor feedback in our GitHub repository, and we will incorporate feedback to make our docs better. See something that is unclear? Want more detail? Leave a comment and let us know!\nOn the SKY API developer site, comments now appear at the bottom of most documentation pages, and buttons are available at the top of pages to take users to the comments.\n2016\n2016-12-02\nWe added a new Status link to the Support menu. This link takes you to our SKY API status page. The status page provides the current state of API availability, as well as specific details on downtime incidents. We also provide the option for you to subscribe to automatic incident notifications by email, SMS, or feed.\n2016-10-17\nLogos can now be associated with your applications. The logo is the icon that users will see on the consent form when they give an application authorization to use their product's account to access the API. Logos can be added to new and existing applications through the My Applications page. Application logo images must be: 512 by 512 pixels\nSmaller than 2MB\nPNG or JPEG format 2016-09-22\nSKY API's support for CORS now includes accept and content-type in the list of accepted request headers. You can now specify these headers in API requests from within a browser.\n2016-07-08\nTo support approved API subscribers with access to their own dedicated tenants, we've added instructions for activating the SKY API Console\nto our Basics guide.\n2016-06-27 When requesting an access token, you may now supply your application ID and secret as part of the request body as client_id and client_secret parameters, respectively. This is an alternative to using the Authorization header. See Authorization Code Flow. Created a C# Auth Code Flow code sample and tutorial. 2016-06-09\nNew We've added the OAuth2 Implicit Flow for use in web browser and mobile apps where application secret confidentiality is not guaranteed. A new feature allows you to export API definitions in Swagger and WADL formats from within the SKY API Console. Use these files to generate client-side code by using tools such as Swagger Codegen. You can import these files into API client tools such as Postman and start calling the API in very little time. 2016-05-27\nChanged\nWhen registering your application, we've relaxed the https requirement for whitelisted redirect URIs. To facilitate and shorten the development process, we now accept http://localhost:* (or, http://127.0.0.1:*) whitelisted web addresses to redirect to after users grant or deny permission for your app. You will no longer need to install a self-signed SSL certificate on your local machine when building your applications.\n2016-05-13\nNew\nA next_link property has been added to our paginated collection responses and represents the URI for the next page of results. This property takes into account any relevant pagination parameters, such as limit, offset, or last_modified, and date_added provided on the request.\n2016-05-06\nChanged limit and offset have replaced top and skip parameters for Pagination. Pagination behavior will remain unchanged. When editing, existing endpoints that previously used the PUT HTTP verb have been replaced with PATCH. PATCH can be used to update partial resources. For instance, when you only need to update one field of the resource. 2016-04-26\nPagination will be facilitated through the results via the use of limit and offset instead of top and skip parameters. Pagination behavior will remain unchanged.\n2016-03-15\nUpdates to code samples including Authorization Code Flow Tutorial and Barkbaud: Authorization Code Flow Tutorial Environment variables automatically load when the application starts. Tutorial instructions have been simplified accordingly.\nUsing AngularJS for display of Log in button, Log out button and constituent data.\nOAuth and Constituent API routes have been updated to reflect recent changes to our base URLs. Barkbaud Environment variables automatically load when the application starts. README instructions have been simplified accordingly.\nBiographies, owner and medical history for each animal are now stored in a MongoDB database at mLab instead of Parse. The Parse database service will be retired on January 28, 2017.\nOAuth and Constituent API routes have been updated to reflect recent changes to our base URLs. 2016-03-11\nUsage limits are now in effect. Exceeding the rate limit results in a 429 - Too Many Requests response status code. Exceeding the quota results in a 403 - Quota Exceeded response status code.\n2016-03-10\nChanged OAuth and Constituent API URLs changed. See Base URLs. The route for the authorization endpoint is no longer prefixed with renxt. Operation Method Old Route New Route authorization (Get) GET /renxt/authorization /authorization 2015\n2015-12-8\nNew The My Applications page now includes the ability to edit applications. Once registered, your application will automatically have access to the Developer Sandbox tenant. The Auth Code Flow Tutorial demonstrates how to create a small server-side application that negotiates authorization and access constituent data. Code Samples include Barkbaud which was introduced at bbcon 2015. Also included is the source code for the Auth Code Flow Tutorial. General Enhancements Enhanced FAQ, including new questions and references to new Auth Code Flow Tutorial and application management. 2015-11-20\nNew\nThe My Applications page and associated documentation provide self-service application registration for the purpose of accessing data via SKY API.\n2015-10-20\nChanged Improved handling of enumerations within the API. Enumeration values are now emitted using string representations instead of numeric representations. For example, Constituent.Type now returns individual or organization. Improved handling of default values within the SKY API. Previously, default values were not included in the JSON response. Values are now included in the payload. Enhanced sample response representations in the developer portal to account for enumeration and default value handling. Added a Support menu to the developer portal, with links to the Changelog, Issues, Ideas, and FAQ. "
      },
      {
       "layout": "layout-sidebar",
       "name": "Statistical Unit (Beta)",
       "description": "Information on additions and changes for the Statistical Unit API (Beta).",
       "order": 223,
       "published": true,
       "showInNav": false,
       "icon": "fa fa-balance-scale",
       "back_to_top": true,
       "title": "Statistical Unit (Beta) Changelog",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": false,
       "showInFooter": false,
       "showInSearch": true,
       "breadcrumbs": "Support Changelog Statistical-unit",
       "abspath": "support/changelog/statistical-unit/index.md",
       "uri": "/support/changelog/statistical-unit/",
       "text": " Statistical Unit (Beta)\nMonitor this page to keep up with the Statistical Unit API (Beta) latest changes and SKY API service releases.\n2018-MONTH-DAY\nNew\nThe Statistical Unit API has been released for a private beta. This API handles information related to tracking statistical units for financial reporting and allocations.\nThe initial release contains endpoints to define non-financial statistical measures and manage counts for those measures. Note that this API is only available if you have Statistical units in Financial Edge NXT. At a future time, we will make this available for all Financial Edge NXT customers.\nFor more information, check out the entity refs x-ref and endpoint refs x-ref references. "
      },
      {
       "layout": "layout-sidebar",
       "name": "Treasury",
       "description": "Information on additions and changes for the Treasury API.",
       "order": 225,
       "published": true,
       "showInNav": true,
       "icon": "fa fa-money",
       "back_to_top": true,
       "title": "Treasury Changelog",
       "sortKey": "order",
       "sortDirection": "asc",
       "showInHeader": true,
       "showInFooter": true,
       "showInSearch": true,
       "breadcrumbs": "Support Changelog Treasury",
       "abspath": "support/changelog/treasury/index.md",
       "uri": "/support/changelog/treasury/",
       "text": " Treasury\nMonitor this page to keep up with the Treasury API latest changes and SKY API service releases.\n2018-07-11\nAnnouncement: Changes for Treasury API\nWe will transition the Treasury (Beta) API out of its current public beta phase and into a formal v1 release.\nJune\n2018-06-28\nNew\nAdded the following endpoint: Operation Method Route Transaction code (List) GET /transactioncodes Transaction code value (List) GET /transactioncodes/{transaction_code_id}/value These endpoints currently exist in the General Ledger API. We decided to include them in the Treasury API (and Accounts Payable API) because values from those endpoints may be required to create Treasury (or Accounts Payable) records.\nChanged\nWe fixed an issue for Deposit (Get) to set the name in transaction_code_values in distribution_splits.\n2018-06-12\nAnnouncement: Changes for Treasury API\nWe implemented new operation ID values in the OpenApi (fka Swagger) definitions for all endpoints in the Treasury API. Note that any existing code relying on these endpoints will continue to function, since all routes and parameters are unchanged. However, if you make use of client-side generated code and want to regenerate your client wrapper, compile-time errors in your code stemming from new operation ID values will arise and need to be addressed.\n2018-06-04\nAnnouncement: Changes Planned for Accounts Payable, General Ledger, and Treasury APIs\nWe will implement new operation ID values in the OpenApi (fka Swagger) definitions for several SKY APIs. This change will improve client-side tooling support for code generation by making these values more deterministic and friendlier across different languages. Going forward, we expect high stability of these values (meaning, we won’t need to change them again).\nNote that any existing code that has been deployed will continue to function with no problems, since we are not changing any routes or parameters. If you make use of client-side generated code and want to regenerate your client wrapper, you’ll need to fix any compile-time errors in your code stemming from new method names.\nApril\n2018-04-26\nChanged For the Bank account (List) endpoint, the bank_name field is now included in the list of returned objects separate from account_name.\nThe Bank account register (List), Checks (List), Deposits (List), and Adjustments (List) endpoints now return the transaction_id field. This field helps to ensure that \"register\" items correctly map to checks, deposits, and adjustments. January\n2018-01-17\nChanged\nFor the Checks (List) endpoint, we made the following changes: The new payee field is now returned in the listed objects.\nThe list is now sorted by check number (ascending).\nWe added the starting_check_number and ending_check_number variables to the check filter. When only starting_check_number is provided, a list of checks (starting with that number and higher) is returned. When only ending_check_number is provided, a list of checks (less than or equal to that number) is returned. When both variables are provided, a range of checks is returned. 2017\n2017-04-25\nNew\nThe Treasury API has been released for a public beta. This API handles information related to bank accounts, including related entities such as adjustments, checks, and deposits.\nThe initial release contains endpoints to retrieve a list of all bank accounts and all bank account transactions, and to manage deposits, cash receipts, and adjustments. For more information, check out the entity and endpoint references. "
      }
     ],
     "text": " Changelog Shared Monitor this page to keep up with common changes shared across all our APIs. Accounts Payable Monitor this page to keep up with the latest changes to the Accounts Payable API. Constituent Monitor this page to keep up with the latest changes to the Constituent API. Fundraising Monitor this page to keep up with the latest changes to the Fundraising API. General Ledger Monitor this page to keep up with the latest changes to the General Ledger API. Gift Monitor this page to keep up with the latest changes to the Gift API. Opportunity Monitor this page to keep up with the latest changes to the Opportunity API. Treasury Monitor this page to keep up with the latest changes to the Treasury API. "
    },
    {
     "layout": "layout-container",
     "name": "Community",
     "description": "Learn and get help from your peers in the Blackbaud Developer Community.",
     "order": 50,
     "showInNav": true,
     "published": true,
     "showInHeader": true,
     "title": "Developer Community",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Support Community",
     "abspath": "support/community/index.md",
     "uri": "/support/community/",
     "text": " "
    },
    {
     "layout": "layout-sidebar",
     "order": 300,
     "name": "FAQ",
     "description": "A listing of frequently asked questions and answers.",
     "icon": "fa fa-comment-o fa-4x",
     "published": true,
     "showInNav": true,
     "back_to_top": true,
     "title": "FAQs",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Support Faq",
     "abspath": "support/faq/index.md",
     "uri": "/support/faq/",
     "text": " Comments Edit in GitHub Frequently Asked Questions\nLearn the answers to commonly asked questions, recommended patterns, and best practices for the SKY API.\nBasics\nHow do I get started?\nThe Getting Started guide and Authorization Code Flow tutorial demonstrate basic implementations of SKY API using easy-to-follow setup instructions.\nDo you have any code samples?\nSee Code Samples. Our Endpoint Reference contains code samples in multiple languages.\nI am seeing an issue, where can I get support?\nSee our Issues page for any existing issues. If you find a new issue, please contact us.\nAuthorization\nHow do I pass security credentials from my application to the SKY API?\nTo call the SKY API, your application will need to provide two things: Your developer subscription key - this key represents Blackbaud's permission for you to call the API, and it should be sent as part of the Bb-Api-Subscription-Key request header. An access token - this represents a Blackbaud customer's permission for you to access their data, and it should be sent as part of the authorization request header. This token is associated with the authenticated user's account and organization, and can only be used to access data to which the user has permission. For more information, see request headers.\nWhat is the recommended authorization flow for a browser-based app?\nIn applications where you cannot maintain the confidentiality of their Application secret, the most appropriate OAuth flow to use in this case is the Implicit Flow.\nBrowser-based (javascript) apps run entirely in the browser after loading the source code from a web page. Since the entire source code is available to the browser, they cannot maintain the confidentiality of their Application secret, so the secret is not used in this case.\nSee Authorization to learn about the OAuth flows that are supported.\nWhat is the recommended authorization flow for a native applications?\nLike browser-based apps, the most appropriate flow to use for a native applications (desktop and mobile devices) is the Implicit Flow.\nSee Authorization to learn about the OAuth flows that are supported.\nI want to create a script that adds new constituents to my database every day. Is there a way I can do this without having to open the browser and log in? (My username and password would preferably be set in the script.)\nThe SKY API doesn’t support basic authorization through username/password. Instead, obtain an access token through the Authorization Code Flow.\nWhen should my application initiate authorization?\nAuthorization begins when your application redirects the user's browser to our https://oauth2.apim.blackbaud.com/authorization Authorization endpoint. Exactly when you decide to make this request is up to you. You can request authorization when your application gathers initial information from the user, or when the user first attempts to access some data from the SKY API.\nSee Authorization.\nWhen I register my app, can I use localhost in my redirect URIs?\nYes. We allow you to register multiple redirect URIs with your application. For production, we require https, but to facilitate local development we allow http and the use of localhost or the localhost IP (127.0.0.1).\nSee Register your application and the Auth Code Flow tutorial.\nAfter redirection occurs, how can I track where authorization initiated?\nAfter the user grants (or denies) access to your application, we'll redirect the browser to the URI that you passed to us when you initiated the authorization process (this URI must exactly match one of the values you registered with your application).\nWe also support the OAuth 2.0 state parameter (described in Section 4.1.1 of the OAuth 2.0 spec), which allows you to provide some context to us that we will echo back to your redirect URI after the user grants (or denies) access to your application. We recommend that you use an opaque value and verify that it matches the value you provided when your app initiated authorization. In this way, you can prevent cross-site request forgeries as well as track where your application initiated the authorization flow. You can then further redirect the user's browser to the appropriate area within your application upon consent.\nSee Authorization.\nWhen must my application re-authenticate the user?\nIf both your access token and refresh token have expired, then you'll need to send the user back through the interactive authorization process. If your access token has expired but you have a valid refresh token, then you can simply exchange the refresh token for a new access token (and a new refresh token) non-interactively.\nSee Authorization.\nCORS\nDo you support cross-origin resource sharing to allow you to interact securely with our API from within the browser?\nYes, we've enabled CORS support in the SKY API. We allow all origins (*), support the GET, PUT, POST, PATCH, and DELETE methods, and allow Bb-Api-Subscription-Key, authorization, accept, and content-type request headers.\nTokens\nWhen do my tokens expire?\nDuring the initial user-interactive authorization process, the authorization code sent to your application will expire in 5 minutes, which means you have a very short window of time in which to exchange the authorization code for an access token.\nAccess tokens will expire in 60 minutes, after which you can use the refresh token to obtain a new access token (and a new refresh token). For the Authorization Code Flow, refreshing an access token does not involve any user interaction, so your application can have indefinite connectivity to the SKY API once the user provides consent. Refresh tokens are longer-lived values that will eventually expire in 60 days, using a sliding window model. As long as your application connects at least once to the SKY API within the window, it will be able to retain connectivity to the customer's data.\nSee Token Expiration.\nMay I store access tokens in my application's database?\nYes, you may store access tokens and refresh tokens within your app, associated with your app's concept of a user (if applicable). When the user logs in with your application's credentials, you can check to see if you have an access token for that user and adjust your app's experience accordingly. For example, you may immediately route the user through the authorization process in order to obtain an access token, or disable functionality until the user provides consent.\nIf your application doesn't have the notion of user credentials, you can simply direct the user to log in with their Blackbaud credentials when they log into your application. We'll provide you with the user's access token and expiration details as part of the Token response during the authorization code flow.\nIn any case, be sure to store access tokens and refresh tokens securely in your system so that they aren't exposed to the public.\nSubscription keys\nWhat is the purpose of the subscription key?\nThe subscription key is associated with your developer account and must be provided as part of the Bb-Api-Subscription-Key header when calling the SKY API. It represents our permission for you to call the API, and we also use it to enforce usage limits (see Rate limits and Quotas) to ensure that the API performs well for everyone. We also aggregate API call analytics associated with your subscription to show you how your apps are performing within the Analytics area of the portal.\nSee Subscription.\nWhy do I have two subscription keys?\nWhen you obtain a subscription to the SKY API, we'll provide two keys (primary and secondary) that you can use when calling the API. Both keys are equally functional; we provide two keys to support rotation on your end.\nWe don't require you to rotate your subscription keys, and you can adopt whatever key rotation schedule and strategy that best fits your needs. If you do need to regenerate your subscription keys, you can do so from your profile.\nImportant! Subscription keys are associated with your developer account, and should NOT be shared with the public since it would allow someone else to impersonate you when calling the SKY API! My app\nHow do I register my application and get an OAuth 2.0 ID and secret?\nYou can register your app in the My Applications area to obtain the unique ID and secret, which will be used during the authorization process to obtain an access token to call the API.\nSee Managing your apps.\nMy application secret may have been compromised, what should I do?\nIf you believe your application's secret has been exposed, you should regenerate the secret and update your application to use the new value when calling the SKY API.\nWhat control does a Blackbaud customer have over my application?\nCustomers always have control over whether or not an application can access their data. An administrator within the customer's organization must first enable your app before any user will be able to use it, and at any time the administrator can remove your application. If that happens, the application will not be able to obtain or refresh any access tokens to use when calling the API.\nIf your application is removed, users will see the following message in the authorization process: “This application has not been approved by your administrator…” See Authorization.\nScopes\nWhat scopes do you support and how do I pass them in my authorization request?\nOAuth 2.0 Scopes are not yet supported within the SKY API. In the future, applications may be able to express intent via scopes but for now API access is always within the context of an authenticated user, which means that API access is limited to the user's security permissions. "
    },
    {
     "layout": "layout-container",
     "name": "Ideas",
     "description": "Provide feedback on how to improve the Blackbaud APIs and developer experience.",
     "order": 200,
     "published": true,
     "showInNav": true,
     "showInHeader": true,
     "showInFooter": true,
     "icon": "fa fa-lightbulb-o",
     "title": "Ideas",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInSearch": true,
     "breadcrumbs": "Support Ideas",
     "abspath": "support/ideas/index.md",
     "uri": "/support/ideas/",
     "text": " Ideas Have feedback on how to improve the SKY API developer experience? Add your idea below, or vote and comment on existing ideas. Your browser does not support iframes. "
    },
    {
     "layout": "layout-sidebar",
     "name": "Issues",
     "description": "Information on additions, removals, and bug fixes of the API.",
     "order": 150,
     "published": true,
     "showInNav": true,
     "icon": "fa fa-file-text-o",
     "back_to_top": true,
     "title": "Issues",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Support Issues",
     "abspath": "support/issues/index.md",
     "uri": "/support/issues/",
     "text": " Issues\nIf you find an issue, please contact us.\n2018-06-07\nWe are aware of an issue with the Journal entry batch (GET) endpoint. A timeout occurs when batches with large numbers of journal entries cannot be returned. We are working to resolve this issue and will post an update as soon as it is available.\nResolved\nFor the issue reported on 2018-06-07, we deprecated the Journal entry batch (GET) endpoint and replaced it with the Journal entry batch summary (Get) and Journal entries (List) endpoints. We will continue to support deprecated endpoints for v1 of the General Ledger API, but we recommend transitioning to the new endpoints for a more robust and consistent response.\n2018-05-09\nWe are aware of an issue with the Transaction distribution (List) endpoint returning incorrect account_class information. We are working to resolve this issue and will post an update as soon as it is available.\nResolved\nFor the issue reported on 2018-05-09, distribution account_class information is now correct.\n2018-05-03\nWe are aware of an issue where breaking changes in our API management tool are causing operation ID values in the Swagger document to be replaced with numeric IDs instead of human readable values. This causes problems when creating autogenerated clients from the Swagger document, and we are actively working to resolve the issue. We will soon release a more standard naming convention for operation IDs. 2018-04-26\nWe are aware of a discrepancy in the values being returned by the Address list (Single constituent) and Address list (All constituents) endpoints. We are actively working to resolve this issue and will post an update as soon as it is available. 2017-12-12\nWe are aware of an issue with the new Period summary\nand Period summary list endpoints returning incorrect balances\nfor some accounts.\nResolved\nFor the issue reported on 2017-12-12, incorrect balances have been resolved.\n2017-04-26\nResolved\nFor the issue reported on 2017-04-06, the time zone inconsistencies have been resolved. But note that daylight savings time is not universally applied/respected.\n2017-04-12\nWe are aware of an issue that is affecting a subset of Raiser's Edge NXT customers, that is causing excessive latency for the List endpoints within the Constituent and Gift APIs. We are actively working to resolve the issue, and will post an update as soon as it is available.\nResolved\nFor the issue reported earlier today, the latency issue has been resolved. 2017-04-06\nWe are aware of an issue with the new Appeal list, Campaign list, and Fund list endpoints possibly returning unexpected results with the last_modified parameter due to time zone inconsistencies. We are working to resolve this issue, and will provide an update when it is resolved.\n2017-02-17\nResolved\nFor the issue reported earlier today about the Applications page, the functionality has been restored. 2017-02-17\nWe are aware of an issue on the Control Panel, Applications page in SKY API enabled Blackbaud products. The Applications page does not load. Previous applications you authorized do not appear. While they have not been deleted, during this time you may get an error message that your application doesn’t have access to any SKY API enabled Blackbaud products. API calls, however, are not impacted. We are working to resolve this issue as soon as possible, and will provide an update when functionality has been restored. 2016-11-14\nResolved\nFor the issue reported on 2016-10-20, the behavior of the attributes has been addressed so that they no longer fail to populate on returned address entities.\n2016-10-21\nService Resolved\nFor the issue reported earlier on 2016-10-21, the availability of the API has been restored.\nWe are aware of an issue that is currently disrupting the availability of the API. The disruption is related to a massive East Coast outage caused by a denial of service attack that is severely degrading Internet services. We are working with one of our DNS providers to restore service and will post another update when we have more information. 2016-10-20\nWe are aware of an issue with the new Address (List) where the formatted_address and inactive attributes are not populated on the returned address entities. We are addressing this issue and will post an update when we fix it.\n2016-10-17\nService Resolved\nFor the intermittent issue reported on 2016-10-15, service has been restored as of Monday, October 17th, 2016 at 9:30 AM EDT (1:30 PM UTC).\n2016-10-15\nWe are aware of an intermittent issue affecting a subset of Raiser's Edge NXT tenants, whereby Constituent API requests result in exceedingly long response times or timeouts. We are researching the issue and will post another update soon when we have more information.\n2016-08-01\nResolved: Firefox Hangs on Authorization\nThe issue has been resolved as of Monday, August 1st, 2016 at 3:20 PM EDT (7:20 PM UTC).\n2016-07-29\nFirefox Hangs on Authorization\nFirefox hangs when loading the SKY API OAuth 2.0 Authorization endpoint https://oauth2.apim.blackbaud.com/authorization.\nWe are currently researching the issue. Stay tuned for details.\n2016-04-22\nSKY API Console autofill bug\nOn specific SKY API Console pages that display an operation which contains either a query parameter or header data entry field before the Bb-Api-Subscription-Key control, Chrome mistakenly treats the Bb-Api-Subscription-Key control as a password. As a result Chrome treats the page as a login page. If the developer elects to save their a user name and password when prompted, Chrome incorrectly auto-fills the page the next time the page loads : Workaround steps Open Settings in Chrome\nClick the Show advanced settings link at the bottom of the Settings page.\nWithin the Passwords and forms section, click Manage passwords.\nDelete any mistakenly saved passwords for developer.sky.blackbaud.com. 2016-04-04\nResolved: My Applications page not displaying within Microsoft Edge browsers\nThe issue has been resolved as of Monday, April 4, 2016 at 8:00 AM EDT (Monday, April 4, 2016 at 12:00 PM UTC).\n2016-03-15\nMy Applications page not displaying within Microsoft Edge browsers\nWe have noticed an issue with the My Applications page not displaying within Microsoft Edge browsers. We are currently researching the issue. Stay tuned for details. In the meantime, we recommend using other browsers for managing your applications. "
    }
   ],
   "text": " "
  },
  {
   "layout": "layout-container",
   "name": "Changelog",
   "description": "Information on additions, removals, and bug fixes of the API.",
   "order": 100,
   "published": true,
   "showInNav": true,
   "icon": "fa fa-file-text-o",
   "back_to_top": true,
   "title": "Changelogs",
   "APIs": [
    {
     "description": "Monitor this page to keep up with common changes shared across all our APIs.",
     "icon": "fa-cloud",
     "location": "shared",
     "title": "Shared"
    },
    {
     "description": "Monitor this page to keep up with the latest changes to the Accounts Payable API.",
     "icon": "fa-university",
     "location": "ap",
     "title": "Accounts Payable"
    },
    {
     "description": "Monitor this page to keep up with the latest changes to the Constituent API.",
     "icon": "fa-user",
     "location": "constituent",
     "title": "Constituent"
    },
    {
     "description": "Monitor this page to keep up with the latest changes to the Fundraising API.",
     "icon": "fa-line-chart",
     "location": "fundraising",
     "title": "Fundraising"
    },
    {
     "description": "Monitor this page to keep up with the latest changes to the General Ledger API.",
     "icon": "fa-book",
     "location": "gl",
     "title": "General Ledger"
    },
    {
     "description": "Monitor this page to keep up with the latest changes to the Gift API.",
     "icon": "fa-gift",
     "location": "gift",
     "title": "Gift"
    },
    {
     "description": "Monitor this page to keep up with the latest changes to the Opportunity API.",
     "icon": "fa-handshake-o",
     "location": "opportunity",
     "title": "Opportunity"
    },
    {
     "description": "Monitor this page to keep up with the latest changes to the Treasury API.",
     "icon": "fa-money",
     "location": "treasury",
     "title": "Treasury"
    }
   ],
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Support Changelog",
   "abspath": "support/changelog/index.md",
   "uri": "/support/changelog/",
   "nav_links": [
    {
     "layout": "layout-sidebar",
     "name": "Accounts Payable",
     "description": "Information on additions and changes for the Accounts Payable API.",
     "order": 75,
     "published": true,
     "showInNav": true,
     "icon": "fa fa-university",
     "back_to_top": true,
     "title": "Accounts Payable Changelog",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Support Changelog Ap",
     "abspath": "support/changelog/ap/index.md",
     "uri": "/support/changelog/ap/",
     "text": " Accounts Payable\nMonitor this page to keep up with the Accounts Payable API latest changes and SKY API service releases.\n2018-07-19\nNew\nAdded the following endpoint: Operation Method Route Vendor attachment POST /vendors/attachments The Vendor attachment endpoint supports physical attachments and link attachments. Note the shape of the request in JSON form: { \"parent_id\": 0, \"name\": \"string\", \"url\": \"string\", \"type\": \"Link\", \"media_type\": \"string\", \"file\": { \"ContentLength\": 0, \"ContentType\": \"string\", \"FileName\": \"string\", \"InputStream\": { \"CanRead\": true, \"CanSeek\": true, \"CanTimeout\": true, \"CanWrite\": true, \"Length\": 0, \"Position\": 0, \"ReadTimeout\": 0, \"WriteTimeout\": 0 } }\n} The type field accepts Physical or Link but defaults to Link.\nThe url field is required for link attachments but not for physical attachments.\nThe file field is HttpPostedFileBase. It is required for physical attachments but not for link attachments.\nFor physical attachments, requests must be multipart/form-data. For example: public static Task PostMultiPartDataFormAsync(this HttpClient client, string route, Attachment content) { var httpContent = new MultipartFormDataContent(); var streamContent = new StreamContent(content.File.InputStream); var ContentDisposition = new ContentDispositionHeaderValue(\"form-data\"); ContentDisposition.Name = \"File\"; ContentDisposition.FileName = content.File.FileName; streamContent.Headers.ContentDisposition = ContentDisposition; streamContent.Headers.ContentType = new MediaTypeHeaderValue(content.File.ContentType); httpContent.Add(streamContent); httpContent.Add(new StringContent(content.ParentId.ToString()), \"ParentId\"); httpContent.Add(new StringContent(content.Name), \"Name\"); httpContent.Add(new StringContent(content.Type.ToString()), \"Type\"); httpContent.Add(new StringContent(content.MediaType.ToString()), \"MediaType\"); var request = new HttpRequestMessage(HttpMethod.Post, route) { Content = httpContent }; return SendAsync(client, request); } In application/json requests, field names must use snake casing such as parent_id and media_type, whereas in multipart/form-data requests, field names must use camel case, such as ParentId and MediaType.\nLink attachments should be sent as application/json formatted requests with the file field omitted.\nIf the file field is populated in application/json formatted requests, the request fails unless type is set to Link because then the request ignores the file. June\n2018-06-28\nNew\nAdded the following endpoint: Operation Method Route Transaction code (List) GET /transactioncodes Transaction code value (List) GET /transactioncodes/{transaction_code_id}/value These endpoints currently exist in the General Ledger API. We decided to include them in the Accounts Payable API (and Treasury API) because values from those endpoints may be required to create Accounts Payable (or Treasury) records.\n2018-06-12\nAnnouncement: Changes for Accounts Payable API\nWe implemented new operation ID values in the OpenApi (fka Swagger) definitions for all endpoints in the Accounts Payable API. Note that any existing code relying on these endpoints will continue to function, since all routes and parameters are unchanged. However, if you make use of client-side generated code and want to regenerate your client wrapper, compile-time errors in your code stemming from new operation ID values will arise and need to be addressed.\n2018-06-04\nAnnouncement: Changes Planned for Accounts Payable, General Ledger, and Treasury (Beta) APIs\nWe will implement new operation ID values in the OpenApi (fka Swagger) definitions for several SKY APIs. This change will improve client-side tooling support for code generation by making these values more deterministic and friendlier across different languages. Going forward, we expect high stability of these values (meaning, we won’t need to change them again).\nNote that any existing code that has been deployed will continue to function with no problems, since we are not changing any routes or parameters. If you make use of client-side generated code and want to regenerate your client wrapper, you’ll need to fix any compile-time errors in your code stemming from new method names.\n2018-06-01\nNew\nAdded the following endpoint: Operation Method Route Invoice edit PATCH /invoices/{invoice_id} With the new endpoint, note the following: You can edit the following properties of an existing invoice:\nvendor_id\nvendor_name\ninvoice_number\ninvoice_date\ndue_date\ndescription\nstatus\ninvoice_payment_details\npost_status\npost_date\ndistribution_discounts\ndistributions\ncustom_fields You cannot edit Posted or Paid invoices.\nYou cannot update an invoice to change the status to Posted, Paid, or Partially Paid.\nIf you omit fields from PATCH requests, the endpoint does not edit them with default values. For example, the following code sample only edits the description property.{ “description”: \"edited description\"\n} April\n2018-04-20\nChanged\nWe made several changes to the Invoice attachment endpoint: The endpoint now supports Physical attachments (previously only supported Link attachments)\nNote the shape of the request in JSON form: {\n\"parent_id\": 0,\n\"name\": \"string\",\n\"url\": \"string\",\n\"type\": \"Link\",\n\"media_type\": \"string\",\n\"file\": { \"ContentLength\": 0, \"ContentType\": \"string\", \"FileName\": \"string\", \"InputStream\": { \"CanRead\": true, \"CanSeek\": true, \"CanTimeout\": true, \"CanWrite\": true, \"Length\": 0, \"Position\": 0, \"ReadTimeout\": 0, \"WriteTimeout\": 0 } }\n} The type field now accepts Physical (defaults to Link if not provided)\nA url is not required for Physical attachments\nA file must be provided for Physical attachments\nA url must be provided for Link attachments\nThe new file field is HttpPostedFileBase The request must be a multipart/form-data request. For example, public static Task PostMultiPartDataFormAsync(this HttpClient client, string route, Attachment content) { var httpContent = new MultipartFormDataContent(); var streamContent = new StreamContent(content.File.InputStream); var ContentDisposition = new ContentDispositionHeaderValue(\"form-data\"); ContentDisposition.Name = \"File\"; ContentDisposition.FileName = content.File.FileName; streamContent.Headers.ContentDisposition = ContentDisposition; streamContent.Headers.ContentType = new MediaTypeHeaderValue(content.File.ContentType); httpContent.Add(streamContent); httpContent.Add(new StringContent(content.ParentId.ToString()), \"ParentId\"); httpContent.Add(new StringContent(content.Name), \"Name\"); httpContent.Add(new StringContent(content.Type.ToString()), \"Type\"); httpContent.Add(new StringContent(content.MediaType.ToString()), \"MediaType\"); var request = new HttpRequestMessage(HttpMethod.Post, route) { Content = httpContent }; return SendAsync(client, request); } JSON requests for url attachments will work the same as they did prior to this release\nJSON requests containing files will fail or ignore the file if type is set to link\nJSON request field names need to use snake casing, such as parent_id and media_type whereas multipart/form-data requests need to use camel case, such as ParentId and MediaType March\n2018-03-30\nChanged\nFor the Invoice (List) endpoint, we made the following changes: The payment_method of the invoice is now returned in the listed objects, which includes EFT, Credit card, Bank draft, or Check.\nThe payment_method field can also be filtered during search. January\n2018-01-17\nChanged\nFor the Invoice (List) endpoint, we added the delete, paid, and partially paid statuses.\n2017\n2017-11-17\nChanged\nAdded additional fields to the following endpoint: Operation Method Route Payment term (list) GET /paymentterms 2017-10-12\nNew\nAdded the following endpoint: Operation Method Route Payment term (list) GET /paymentterms 2017-09-28\nChanged\nFor the following endpoint, we added the payment_default field which includes credit limit, payment terms, and bank account information: Operation Method Route Vendors GET /vendors 2017-06-30\nNew\nAdded the following endpoints: Operation Method Route Invoice attachment POST /invoices/attachments Media type (List) GET /mediatypes 2017-05-05\nNew\nAdded the following endpoints: Operation Method Route Invoice 1099 amount GET /invoices/{invoice_id}/1099amount Invoice 1099 box numbers GET /invoices/{invoice_id}/1099boxnumber 2016\n2016-12-06\nNew Added the following endpoints: Operation Method Route Invoice custom field (List) GET /invoices/customfields Vendor custom field (List) GET /vendors/customfields Added new custom field entities to the following endpoints: Operation Method Route Invoice POST /invoices Invoice GET /invoices/{invoice_id} Vendor POST /vendors Vendor GET /vendors/{vendor_id} Changed\nFor consistency across APIs, all responses to GET endpoints that return collections now return an object with \"count\" and \"value\" properties. The following endpoints are affected: Operation Method Route Address (List) GET /vendors/{vendor_id}/addresses Contact method (List) GET /vendors/{vendor_id}/addresses/{address_id}/contactmethods Note (List) GET /vendors/{vendor_id}/notes 2016-11-14\nAnnouncement: Breaking Changes Planned for Accounts Payable API\nFor consistency across APIs, we will implement the following change:\nAll responses to GET endpoints that return collections will return an object with \"count\" and \"value\" properties. The following endpoints are affected: Operation Method Route Address (List) GET /vendors/{vendor_id}/addresses Contact method (List) GET /vendors/{vendor_id}/addresses/{address_id}/contactmethods Note (List) GET /vendors/{vendor_id}/notes 2016-10-12\nChanged\nFor consistency across APIs, we implemented the following changes: All responses to POST requests changed from \"RecordId\" to \"record_id\".\nThe following endpoints and their associated fields changed from CamelCase to snake_case: Operation Method Route Invoice GET /invoice Invoice POST /invoice 2016-10-04\nAnnouncement: Breaking Changes Planned for Accounts Payable API\nFor consistency across APIs, we will implement the following changes: All responses to POST requests will change from \"RecordId\" to \"record_id\".\nThe following endpoints and their associated fields will change from CamelCase to snake_case: Operation Method Route Invoice GET /invoice Invoice POST /invoice 2016-08-12\nBreaking Change\nWe changed the default and maximum record limits on the following search and list endpoints. The default is now 100 records, and the maximum is 500 records. Operation Method Route Vendor (List) GET /vendors Invoice (List) GET /invoices 2016-08-04\nNew\nThe Accounts Payable API is now available. Use this API to manage accounts payable, including vendors and invoices. "
    },
    {
     "layout": "layout-sidebar",
     "name": "Constituent",
     "description": "Information on additions and changes for the Constituent API.",
     "order": 100,
     "published": true,
     "showInNav": true,
     "icon": "fa fa-user",
     "back_to_top": true,
     "title": "Constituent Changelog",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Support Changelog Constituent",
     "abspath": "support/changelog/constituent/index.md",
     "uri": "/support/changelog/constituent/",
     "text": " Constituent\nMonitor this page to keep up with the Constituent API latest changes and SKY API service releases.\n2018-07-03\nNew\nAdded the following endpoint: Operation Method Route Membership list (All constituents) GET /memberships Added a read-only fundraiser_status property to the constituent entity. Added a fundraiser_status filter to the Constituent list endpoint. Added an optional search_field query parameter to the Constituent (Search) endpoint. It indicates the property to search with the provided search_field filter and returns the exact match if available. Currently, this filter only accepts lookup_id. Added an optional computed_status query parameter to the Action list (All constituents) endpoint. It accepts a single value of Open, Completed, or PastDue and returns constituent actions that match the filter. Added an optional status_code query parameter to the Action list (All constituents) endpoint. The parameter can be specified multiple times to imply a logical OR and filters the results to only include the items associated with the specified status codes. For example, status_code=Pending&status_code=Sent returns actions with a status of either Pending and Sent. 2018-06-01\nAnnouncement: Changes for Constituent API\nWe implemented new operation ID values in the OpenApi (fka Swagger) definitions for all endpoints in the Constituent API. Note that any existing code relying on these endpoints will continue to function, since all routes and parameters are unchanged. However, if you make use of client-side generated code and want to regenerate your client wrapper, compile-time errors in your code stemming from new operation ID values will arise and need to be addressed.\nMay\n2018-05-25\nNew\nWe added the following properties to the action entity: The new computed_status property computes the status based on the completed and date properties when the system is not configured to use custom action statuses. Otherwise, the field calculates the status based on the action's date property and whether the status property is configured as \"Completed.\"\nThe new status_code property specifies the action status code. Available values are in the Action Status table. This property is only returned when the system is configured to use custom action statuses. These properties are available in the Action (Get), Action list (All constituents), and Action list (Single constituent) endpoints.\nAnnouncement: Changes Planned for Constituent, Fundraising (Beta), Gift (Beta), and Opportunity (Beta) APIs\nWe will implement new operation ID values in the OpenApi (fka Swagger) definitions for several SKY APIs. This change will improve client-side tooling support for code generation by making these values more deterministic and friendlier across different languages. Going forward, we expect high stability of these values (meaning, we won’t need to change them again).\nNote that any existing code that has been deployed will continue to function with no problems, since we are not changing any routes or parameters. If you make use of client-side generated code and want to regenerate your client wrapper, you’ll need to fix any compile-time errors in your code stemming from new method names.\n2018-05-15\nNew\nAdded the following endpoint: Operation Method Route Document (Create) POST /documents 2018-05-11\nAnnouncement: Released Action Category Enhancement for Constituent API\nWe updated the Constituent API Action category value from Phone Call to Phone call. This change impacts the Action (Get) and Action list (Single constituent) endpoints.\nApril\n2018-04-25\nAnnouncement: Future Enhancement Planned for Constituent API\nWe will update the Constituent API Action category value from Phone Call to Phone call for consistency across all endpoints. This change will impact the Action (Get) and Action list (Single constituent) endpoints.\n2018-04-13\nNew\nAdded the following endpoint: Operation Method Route Fundraiser assignment list (Single constituent)* GET /constituents/{constituent_id}/fundraiserassignments * We deprecated the Fundraiser list (Single constituent) endpoint and replaced it with the Fundraiser assignment list (Single constituent) endpoint. We will continue to support deprecated endpoint for v1 of the Constituent API, but we recommend transitioning to the new endpoint for a more robust and consistent response.\n2018-04-06\nChanged\nWe corrected an issue with the last_modified parameter on the Relationship list (All constituents) endpoint, where returned results and the provided sort_token were keying off of date_added instead of date_modified.\nAnnouncement: Released Display Name Enhancement for Constituent API\nConstituent names in the API now reflect the upcoming display name configuration setting in Raiser's Edge NXT. This initially affects the default name values on the Constituent GET, search, and list endpoints, and on the Relationship GET and list endpoints. Moving forward, display name settings will be configurable from the web view, and the API will reflect any changes to the display name format.\nIn addition, when a supervisor user changes the display name configuration settings, the date_modified value will increment on all constituents in the organization's database. This impact will not occur until display name configuration options are available in the Raiser's Edge NXT web view, slated for release in mid-April.\nAnnouncement: Released Solicit Code Security Enhancement for Constituent API\nThe Constituent API now respects the new Solicit Code security setting available in the Raiser's Edge NXT database view. This affects the Communication Preference GET, POST, PATCH, and DELETE endpoints.\nMarch\n2018-03-29\nNew\nAdded the following endpoints: Operation Method Route Action custom field category details* GET /actions/customfields/categories/details Constituent custom field category details* GET /constituents/customfields/categories/details * We deprecated the Action custom field categories endpoints and Constituent custom field categories endpoints and replaced them with the Action custom field category details and Constituent custom field category details endpoints. We will continue to support deprecated endpoints for v1 of the Constituent API, but we recommend transitioning to the new endpoints for a more robust and consistent response.\nAnnouncement: Future Enhancement Planned for Constituent API\nRaiser's Edge NXT recently introduced a new security setting in the database view for Solicit Codes. The API will soon reflect this setting for consistency, and that will affect the Communication Preference GET, POST, PATCH, and DELETE endpoints.\n2018-03-20\nAnnouncement: Future Enhancement Planned for Constituent API\nRaiser's Edge NXT will soon introduce a new configuration setting for how to display names in the product. The API will soon reflect this configuration option for consistency. This will affect constituent name properties on the Constituent GET, search, and list endpoints, and on the Relationship GET and list endpoints.\nFebruary\n2018-02-21\nNew\nThe optional strict_search query parameter is now available on the Constituent (Search) endpoint. It indicates whether to exclude constituents that sound like the search criteria but are spelled differently. By default, this parameter is set to false.\n2018-02-02\nChanged The Address list (All constituents), Email address list (All constituents), Online presence list (All constituents), and Phone list (All constituents) endpoints now include an option to filter based on their associated constituents. The optional constituent_id query parameter, which can be specified multiple times to imply a logical OR, filters the results to only include the items associated with the specified constituent record IDs. For example, &constituent_id=1242&constituent_id=385 filters the results to only include results associated with two constituent records: \"1242\" and \"385.\"\nWe updated the value filter on the Constituent custom field list (All constituents) endpoint to support filtering on fuzzy date values. The endpoint documentation describes how to filter on fuzzy dates. January\n2018-01-25\nChanged We added the date property to the attachment entity.\nTo remove confusion with the gift entity in the Gift API, we have renamed the Constituent gift entity to Giving Summary. 2018-01-19\nNew\nAdded the following endpoint: Operation Method Route Attachment tags GET /attachmenttags Changed\nWe resolved an issue with the Action (Create) and Action (Edit) endpoints. The 255-character limit is now correctly applied to summary instead of description on the action entity.\n2018-01-17\nNew\nAdded the following endpoints: Operation Method Route Alias (Edit) PATCH /aliases/{alias_id} Alias (Delete) DELETE /aliases/{alias_id} 2018-01-11\nNew\nAdded the following endpoints: Operation Method Route Name format summary GET /constituents/{constituent_id}/nameformats/summary Name format (Create) POST /nameformats Name format (Edit) PATCH /nameformats/{name_format_id} Name format (Delete) DELETE /nameformats/{name_format_id} Primary name format (Create) POST /primarynameformats Primary name format (Edit) PATCH /primarynameformats/{primary_name_format_id} Primary name format (Delete) DELETE /primarynameformats/{primary_name_format_id} Changed The Name format list (Single constituent) endpoint has been replaced by the Name format summary endpoint.\n2017\n2017-12-20\nNew Operation Method Route Education list (All constituents) GET /educations Changed The Relationship list (Single constituent) and Relationship list (All constituents) endpoints now return the reciprocal_relationship_id property on the relationship entity.\nThe Constituent custom field list (All constituents) endpoint now includes options to filter custom fields based on their categories and values. The optional category and value parameters filter the results to only custom fields with the specified categories and values.\nThe Currency configuration endpoint now returns the iso_alpha_2_code property on the currency configuration entity. 2017-12-07\nNew Operation Method Route Alias list (Single constituent) GET /constituents/{constituent_id}/aliases Alias (Create) POST /aliases Name format configuration list GET /nameformatconfigurations Name format types GET /nameformattypes 2017-12-01\nNew\nAdded the following endpoints: Operation Method Route Relationship list (All constituents) GET /relationships Alias types GET /aliastypes Changed The Relationship list (Single constituent) endpoint now returns the date_added and date_modified properties on the relationship entity. 2017-11-09\nNew\nAdded the following endpoint: Operation Method Route Note list (All constituents) GET /notes Changed The Note (Get) and Note list (Single constituent) endpoints now return the date_added and date_modified properties on the note entity.\nThe Constituent (Search) endpoint now returns the inactive and deceased properties on the search result entity.\nThe Constituent (Search) endpoint also now returns suffix information in the name field when constituent records include suffix or suffix_2.\nThe optional include_inactive query parameter is now available on Constituent (Search) endpoint to indicate whether to include inactive constituents. By default, this parameter is set to true. 2017-10-24\nAnnouncement: Breaking Changes Planned for Constituent API\nWe will change the name format entity to support custom name formats and provide a more robust entity.\nAdditionally, we will update the Name format list (Single constituent) endpoint to support the next generation of name formats. Currently, the endpoint returns only the primary addressee and primary salutation for a constituent. With our change, it will also return the other non-primary name formats as part of the updated entity model mentioned above.\n2017-10-20\nChanged\nThe Constituent list endpoint now includes an option to filter constituents based on their record IDs. The optional constituent_id query parameter, which can be specified multiple times to imply a logical OR, filters the results to only constituents with the specified IDs. For example, &constituent_id=1242&constituent_id=385 filters the results to only two constituents records: \"1242\" and \"385.\"\n2017-08-28\nNew\nAdded the following endpoint: Operation Method Route Action locations GET /actionlocations Changed On the Constituent (Create) endpoint, we updated the gender property to set the default value to unknown when the property is not supplied in the request body.\nWe added the start_time, end_time, location, priority, direction, and outcome properties to the action entity.\nThe completed_date property on the action entity is now writable on the Action (Create) and Action (Edit) endpoints. 2017-08-08\nNew\nAdded the following endpoint: Operation Method Route Relationship (Edit) PATCH /relationships/{relationship_id} 2017-06-28\nChanged\nWe added the start, end, seasonal_start, and seasonal_end properties to the address entity.\n2017-06-27\nChanged\nWe updated the concept of inactive addresses to be consistent across address endpoints and better aligned with the web interface. Now, addresses are only marked inactive if their end_date is in the past.\n2017-05-17\nNew\nAdded the following endpoint: Operation Method Route Action list (All constituents) GET /actions 2017-05-12\nChanged\nWe added the comment property to the relationship entity.\n2017-05-09\nChanged The Communication preference (Edit) endpoint now supports patching the start and end fields on a communication preference. The Action (Get) and Action list (Single constituent) endpoints now return the date_added and date_modified properties on the action entity. 2017-04-25\nNew\nAdded the following endpoints: Operation Method Route Relationship POST /constituent/constituents/relationships Relationship types GET /constituent/constituents/relationshiptypes Organization contact types GET /constituent/constituents/organizationcontacttypes Changed\nGET operations such as Relationship list (Single constituent) that return relationship entities now return the following new properties: Property Type Description reciprocal_type string The reciprocal relationship type. Describes the constituent's relationship to the related constituent. For example, in a relationship between a male constituent and a female sibling, the reciprocal relationship type would be brother. Available values are the entries in the Relationships table. is_spouse boolean Indicates whether the related constituent is the constituent's spouse. Only applies to relationships between individuals. is_organization_contact boolean Indicates whether the related individual represents the organization as a contact. Only applies to relationships between organizations and individuals. is_primary_business boolean Indicates whether the related organization is the individual's primary business. Only applies to relationships between organizations and individuals. organization_contact_type string The contact type that provides context for interactions with the related individual who represents the organization as a contact. Available values are the entries in the Contact Types table. Only applies to relationships between organizations and individuals. position string The individual's position in the organization. Only applies to relationships between organizations and individuals. 2017-04-20\nChanged The date_added parameter on the Constituent list endpoint now returns a sort_token on the next_link URL to enable pagination for stable data syncing.\nThe Constituent list endpoint now includes a sort parameter to sort constituents based on specified fields. For example, sort=date_modified,-last returns constituents in ascending order based on the date_modified field and then orders constituents with the same last-modified date in descending order based on their last names. If the sort parameter provides only the date_modified field or only the date_added field, then it returns a sort_token on the next_link URL. 2017-04-06\nChanged The Constituent list endpoint now populates the marital_status property by default. 2017-02-23\nChanged The Constituent list endpoint now includes an optional custom_field_category parameter to retrieve constituents only if their active custom fields match specified custom field categories.\nThe Fundraiser list (Single constituent) endpoint now returns the appropriate value for the constituent_id field. 2017-02-09\nChanged The major and minor properties on the education entity have been updated to return an array of strings. They have been renamed majors and minors.\nThe subject_of_study property on the education entity is no longer returned in the major property. Instead, it uses a dedicated property for UK-formatted databases.\nThe Address (Create) endpoint no longer requires the country property. When country is not provided, the endpoint uses the organization's default country configuration.\nThe country property on the address entity now accepts a country ID, name, or abbreviation. The property uses preferential selection to match against ID first, then name, and then abbreviation.\nThe Ratings list (Single constituent) endpoint now includes an optional most_recent_only parameter to retrieve only the most recent rating for each category. New\nAdded the following endpoints: Operation Method Route Countries (Get) GET /countries Education (Create) POST /educations Education (Edit) PATCH /educations/{education_id} Education (Delete) DELETE /educations/{education_id} Education schools (Get) GET /educations/schools Education types (Get) GET /educations/types Education statuses (Get) GET /educations/statuses Education subjects (Get) GET /educations/subjects Education degrees (Get) GET /educations/degrees Education departments (Get) GET /educations/departments Education degree classes (Get) GET /educations/degreeclasses Education faculties (Get) GET /educations/faculties 2017-01-31\nAnnouncement: Breaking Changes Planned for Constituent API\nWe are updating some properties on the education entity to improve overall feature parity and to support upcoming POST and PATCH education endpoints in the Constituent API. The major and minor properties will both be updated to return an array of strings. They will also be renamed majors and minors.\nThe subject_of_study property will no longer be returned in the major property. Instead, it will use a dedicated property for UK-formatted databases. 2017-01-11\nChanged\nOn the Address (Create) endpoint, we updated the do_not_mail and preferred properties to set the default value to false when the properties are not supplied in the request body.\n2017-01-10\nChanged\nWe added the campus, known_name, and social_organization properties to the education entity.\n2017-01-06\nChanged We updated the Constituent custom field list (Single constituent) endpoint to populate the date_added and date_modified properties. We updated the Constituent code list (Single constituent) endpoint to populate the inactive, date_added, and date_modified properties. 2016\n2016-12-12\nNew\nAdded the following endpoint: Operation Method Route Rating category values (Get) GET /ratings/categories/values Changed We changed the format of the name property on the Constituent (Get) endpoint to \"FirstName LastName\" for consistency with the Constituent list endpoint. We updated the Email address (Edit) and Online presence (Edit) endpoints to respect the type property. We changed the Rating (Create) endpoint to require the \"source\" property for categories that have a source. 2016-11-23\nChanged We updated the Constituent (Create), Constituent (Edit), Constituent (Get), and Constituent list endpoints to ensure that the lookup_id, inactive, and gives_anonymously properties are respected and populated. We updated the Constituent (Edit) endpoint to appropriately respect Constituent Biographical Edit permissions. 2016-11-16\nChanged\nThe Constituent list endpoint now includes an option to filter constituents based on their associated constituent codes. The optional constituent_code query parameter returns constituents if any of the specified constituent codes match any of their active constituent codes. For example, constituent_code=Board Member&amp;constituent_code=Volunteer returns constituents with either \"Board Member\" or \"Volunteer\" constituent codes.\n2016-11-14\nNew\nAdded the following endpoints: Operation Method Route Constituent code list (All Constituents) GET /constituents/constituentcodes Constituent custom field list (All constituents) GET /constituents/customfields Changed We renamed all existing list endpoints to implement a new naming convention that better indicates whether the endpoints return data for a single constituent or for all constituents. Endpoints that return data for a single constituent are now postfixed with (Single constituent). Endpoints that return data for all constituents are now postfixed with (All constituents). The Address list (All constituents) endpoint no longer includes inactive addresses by default. To include inactive addresses, use the optional include_inactive parameter in the request. The Address list (All constituents) endpoint now populates the formatted_address property. We updated the following endpoints to appropriately respect constituent record-level security: Operation Method Route Address (List) GET /addresses Email address (List) GET /emailaddresses Online presence (List) GET /onlinepresences Phone (List) GET /phones 2016-10-20\nNew\nAdded the following endpoints: Operation Method Route Address (List)* GET /addresses Email address (List)* GET /emailaddresses Online presence (List)* GET /onlinepresences Phone (List)* GET /phones * The new endpoints assume the names of existing endpoints, which were renamed in the endpoint reference. The previous Address (List) is now Constituent address (List); the previous Email address (List) is now Constituent email address (List); the previous Online presence (List) is now Constituent online presence (List); and the previous Phone (List) is now Constituent phone (List). Changed\nWe added the date_added and date_modified properties to the address, email address, online presence, and phone entities.\n2016-10-17\nChanged\nThe fundraisers property on the action entity now contains an array of strings populated with the constituent_id of fundraisers instead of an array of action fundraiser entities.\nNew\nAdded the following endpoints: Operation Method Route Action custom field (List) GET /actions/{action_id}/customfields Action custom field (Create) POST /actions/customfields Action custom field (Edit) PATCH /actions/customfields/{custom_field_id} Action custom field (Delete) DELETE /actions/customfields/{custom_field_id} Action custom field categories (Get) GET /actions/customfields/categories Action custom field category values (Get) GET /actions/customfields/categories/values 2016-10-03\nNew\nAdded the following endpoints: Operation Method Route Prospect status (Get) GET /constituents/{constituent_id}/prospectstatus Fundraiser (List) GET /constituents/{constituent_id}/fundraisers 2016-09-28\nChanged The Constituent (List) endpoint now includes the option to select specific properties on its return object by using the optional fieldsquery parameter. This can reduce the response payload size and improve the response time.\nThe Constituent (List) endpoint no longer returns deceased constituents by default. Instead, they are included by setting the new include_deceased option to true.\nThe Communication preference (List) endpoint can now be paginated using the new limit and offset query parameters. If not specified, the default limit is 10000.\nWe changed the following query string parameters to snake case:\nincludeInactive is now include_inactive on Constituent (List), Email address (List), Online presence (List), Phone (List), Rating (List), Rating categories (Get), and Rating sources (Get).\ncategoryName is now category_name on Constituent custom field category values (Get).\nsearchText is now search_text on Constituent (Search). 2016-09-27\nAnnouncement: Breaking Changes Planned for Constituent API\nWe will change the fundraisers property on the action entity so that it contains a list of strings populated with the constituent_id of fundraisers instead of an array of action fundraiser entities.\n2016-09-23\nAnnouncement: Breaking Changes Planned for Constituent API\nWe will change the query string parameter includeInactive to include_inactive on the Constituent (List) endpoint.\n2016-09-14\nAnnouncement: Breaking Changes Planned for Constituent API The Constituent (List) endpoint will no longer return deceased constituents by default. Instead, they will be included by setting a new include_deceased option to true.\nWe will change the following query string parameters to snake case:\nincludeInactive will be include_inactive on Email address (List), Online presence (List), Phone (List), Rating (List), Rating categories (Get), and Rating sources (Get).\ncategoryName will be category_name on Constituent custom field category values (Get).\nsearchText will be search_text on Constituent (Search). New\nAdded the following endpoints: Operation Method Route Rating sources (Get) GET /ratings/sources Rating categories (Get) GET /ratings/categories Action attachment (Edit) PATCH /actions/attachments/{attachmentId} Action attachment (Delete) DELETE /actions/attachments/{attachmentId} Constituent attachment (Edit) PATCH /constituents/attachments/{attachmentId} Constituent attachment (Delete) DELETE /constituents/attachments/{attachmentId} Changed\nNew tags included in the request will be automatically added to the Document Tags table when adding or updating attachments.\n2016-09-07\nNew\nAdded the following endpoints: Operation Method Route Communication preference (Edit) PATCH /communicationpreferences/{communicationPreferenceId} Rating (Create) POST /ratings Rating (Edit) PATCH /ratings/{ratingId} Rating (Delete) DELETE /ratings/{ratingId} Changed\nWe added the lookup_id property to the search results entity.\n2016-09-02\nChanged\nAll POST endpoints now return a JSON object containing the id, in the form { \"id\": \"123\" }, instead of the previous string response.\n2016-08-31\nNew\nAdded the following endpoints: Operation Method Route Action attachment (List) GET /actions/{actionId}/attachments Action attachment (Create) POST /actions/attachments Changed We changed the URL for the Constituent Attachment (Create) endpoint to /constituents/attachments. The constituentId is now expected in the request body as parent_id.\nThe Constituent (Create) endpoint now supports adding a constituent with the following child entity properties: address, phone number, email address, and online presence.\nWe updated the Constituent (Edit) endpoint to include marital_status, deceased_date, former_name, title_2, and suffix_2 as available PATCH request body properties. 2016-08-29\nAnnouncement: Breaking Changes Planned for Constituent API\nAll POST endpoints will now return a JSON object containing the id, in the form { \"id\": \"123\" }, instead of the current string response.\n2016-08-26\nChanged We renamed the proposal_id property to opportunity_id on actions to be consistent with product verbiage. The Constituent (List) endpoint no longer includes inactive constituents by default. To include inactive constituents, use the optional includeInactive parameter in the request. Announcement: Breaking Changes Planned for Constituent API\nWe will change the URL for the Constituent Attachment (Create) endpoint to /constituents/attachments.\n2016-08-22\nNew\nAdded the following endpoints: Operation Method Route Currency configuration (Get) GET /currencyconfiguration Changed The data type assigned to the value property on the rating entity was changed from a string to an object. Previously, all values were returned as strings that needed to be parsed (by the requestor) into the intended types. Currently, the rating value will be returned with its data type intact based on the type with the following mapping: Type Description boolean Defines the rating value as a boolean JSON data type. codetable Defines the rating value as a string JSON data type that refers to a code table entry. currency Defines the rating value as a number JSON data type. datetime Defines the rating value as a string JSON data type in ISO-8601 format: 2015-09-18T00:00:00. number Defines the rating value as a number JSON data type. text Defines the rating value as a string JSON data type. We corrected an issue with the postal_code filter within the Constituent (List) endpoint where incorrect values were returned if the postal codes filter listed multiple postal codes that were separated by commas or if postal codes contained leading space characters. Announcement: Breaking Changes Planned for Constituent API We will rename the constituent_id property to parent_id to support additional attachment areas such as action attachments.\nWe will rename the proposal_id property to opportunity_id on actions to be consistent with product verbiage. 2016-08-18\nAnnouncement: Breaking Changes Planned for Constituent API\nThe Constituent (List) endpoint will no longer include inactive constituents by default. To include inactive constituents, use the optional includeInactive parameter in the request.\n2016-08-16\nAnnouncement: Breaking Changes Planned for Constituent API\nThe data type assigned to the value property on the rating entity will be changed from a string to an object. As it stands today, all values are returned as a string, which must then be parsed (by the requestor) into the intended type. After release, the Rating value will be returned with its data type intact.\n2016-08-11\nNew\nAdded the following endpoints: Operation Method Route Communication preference (Create) POST /communicationpreferences Communication preference (Delete) DELETE /communicationpreferences/{communicationPreferenceId} Communication preferences (Get) GET /communicationpreferences Changed We added start and end to the communication preference entity to represent optional start and end dates.\nWe added the ability to retrieve inactive rating records by including a new, optional includeInactive parameter in the request. 2016-08-03\nNew\nAdded the following endpoints: Operation Method Route Communication preference (List) GET /constituents/{constituentId}/communicationpreferences Changed We removed boolean_value, code_table_value, constituent_id_value, date_value, fuzzy_date_value, currency_value, numeric_value, text_value and replaced them with a single value property for use with any type on the custom field entity.\nWe added the gpa, class_of_degree, faculty, department, and registration_number properties to the education entity.\nWe added the ability to paginate search results by including a new, optional limit and offset parameters in the request.\nWe added the ability to retrieve inactive address records by including a new, optional includeInactive parameter in the request. 2016-07-29\nAnnouncement: Breaking Changes Planned for Constituent API We will remove boolean_value, code_table_value, constituent_id_value, date_value, fuzzy_date_value, currency_value, numeric_value, text_value and replace them with a single value property for use with any type on the custom field entity.\nThis change is planned to take effect on Monday, August 1st. 2016-07-27\nAdded the following endpoints: Operation Method Route Constituent (Edit) PATCH /constituents/{constituentId} 2016-07-22\nNew\nAdded the following endpoints: Operation Method Route Rating (List) GET /constituents/{constituentId}/ratings/ Constituent custom field (Create) POST /constituents/customfields/ Constituent custom field (Edit) PATCH /constituents/customfields/{customFieldId} Constituent custom field (Delete) DELETE /constituents/customfields/{customFieldId} Constituent custom field category values (Get) GET /constituents/customfields/categories/values Changed\nWe added the date_added, date_modified, title_2, suffix_2, marital_status, deceased_date properties to the constituent entity.\n2016-07-18\nNew\nAdded the following endpoint: Operation Method Route Constituent (Create) POST /constituents Changed\nWe removed the business property from the constituent entity.\n2016-07-07\nChanged We renamed kind to type and types to tags on the attachment entity.\nWe renamed nickname to preferred_name on the constituent entity. 2016-07-01\nNew\nAdded the following endpoints: Operation Method Route First gift (Get) GET /constituents/{constituentId}/givingsummary/first Latest gift (Get) GET /constituents/{constituentId}/givingsummary/latest Greatest gift (Get) GET /constituents/{constituentId}/givingsummary/greatest Constituent custom field categories (Get) GET /constituents/customfields/categories Titles (Get) GET /titles Suffixes (Get) GET /suffixes Marital statuses (Get) GET /maritalstatuses 2016-06-30\nAnnouncement: Breaking Changes Planned for Constituent API We will rename kind to type and types to tags on the attachment entity.\nWe will rename nickname to preferred_name on the constituent entity.\nThis change is planned to take effect on Wednesday, July 6. 2016-06-27\nNew Added the following endpoint: Operation Method Route Address (Edit) PATCH /addresses/{addressId} Added the ability to retrieve inactive email address, online presence, and phone records by including a new, optional includeInactive parameter in the request. 2016-06-20\nChanged\nWe updated the Constituent (List) endpoint to include a new, optional postal_code parameter which provides the ability to filter constituents by postal code based on their preferred address. The parameter value supports multiple postal codes separated by commas. Postal codes will match on a constituent if the preferred address postal code begins with one of the specified filter postal codes. For example, given the query postal_code=99577,10001, the response could contain constituents whose preferred address has a postal code of 99577-0727 or 10001.\n2016-06-15\nNew\nAdded the following endpoint: Operation Method Route Address (Delete) DELETE /addresses/{addressId} Changed\nWe added a versioning indicator to the Constituent API's base URL. Specifically, all new API requests must begin with https://api.sky.blackbaud.com/constituent/v1.\n2016-06-10\nAnnouncement: Breaking Changes Planned for Constituent API We will be adding a versioning indicator to the Constituent API's base URL. Specifically, all new API requests should begin with https://api.sky.blackbaud.com/constituent/v1.\nThis change is planned to take effect on Wednesday, June 15. 2016-06-09\nNew\nAdded the following endpoint: Operation Method Route Address (Create) POST /addresses 2016-06-06\nNew\nAdded the following endpoints: Operation Method Route Lifetime giving (Get) GET /constituents/{constituentId}/givingsummary/lifetimegiving Membership (List) GET /constituents/{constituentId}/memberships 2016-06-01\nNew\nAdded the following endpoints: Operation Method Route Action types (Get) GET /actiontypes Action status types (Get) GET /actionstatustypes 2016-05-27\nNew Added the following endpoints: Operation Method Route Note types (Get) GET /notetypes Added a General Ledger changelog to help you keep up with General Ledger API changes. 2016-05-24\nNew\nAdded the following endpoints: Operation Method Route Address types (Get) GET /addresstypes Changed\nWe renamed send_mail to do_not_mail on the address entity. Additionally, the boolean logic has been switched.\n2016-05-20\nAnnouncement: Breaking Changes Planned for Constituent API We will rename send_mail to do_not_mail on the address entity. Additionally, the boolean logic will be switched.\nWe will remove the business property from the constituent entity. New\nAdded the following endpoints: Operation Method Route Phone (Create) POST /phones Phone (Edit) PATCH /phones/{phoneId} Phone (Delete) DELETE /phones/{phoneId} Phone types (Get) GET /phonetypes Email address types (Get) GET /emailaddresstypes Online presence types (Get) GET /onlinepresencetypes Constituent code types (Get) GET /constituentcodetypes Changed\nWe implemented the following breaking changes: We removed the following address properties:\nprimary_business\nstart\nend\nseasonal\nseasonal_start\nseasonal_end\nin_season\nvalid We renamed the address to formatted_address. 2016-05-16\nAnnouncement: Breaking Changes Planned for Constituent API We will remove the following address properties: primary_business\nstart\nend\nseasonal\nseasonal_start\nseasonal_end\nin_season\nvalid We will remove the business property from the constituent entity. 2016-05-13\nNew We updated the Constituent (List) endpoint to include a new, optional date_added parameter which provides the ability to poll for recently added constituents since a specified date/time. The parameter value should consist of a URL encoded UTC datetime. When specified, the list is sorted by date added in ascending order. We updated the Constituent (List) endpoint to include a new, optional last_modified parameter which provides the ability to poll for recently changed constituents since a specified date/time. The parameter value should consist of a URL encoded UTC datetime. When specified, the list is sorted by last modified in ascending order.\nThe response includes a sort_token within the next_link property. sort_token represents a token filter for providing the next set of constituents, ordered by the last modified date. Note: The Constituent (List) endpoint returns data with an average latency of 30 minutes. 2016-05-06\nNew Added the following granular address properties: address_lines\ncity\nsuburb\nstate\npostal_code\ncounty\ncountry Addresses are returned by the following endpoints: Operation Method Route Constituent (Get) GET /constituents/{constituentId} Constituent (List) GET /constituents Address (List) GET /constituents/{constituentId}/addresses Added international address field support for the following countries. Field United States Canada United Kingdom Australia New Zealand address_lines city * suburb state ! postal_code county country * Australia - City or suburb data is returned with the city field for GET operations. Future endpoints will allow you to POST and PATCH address data. In these cases, you can use either the suburb or city properties, but not both at the same time. Providing both property values in future POST and PATCH operations will result in an error. ! Canada - Use the state property to track a Canadian Province Changed For consistency, constituent_id is included in the following entities: Address\nAttachment\nConstituent code\nEmail address\nOnline presence\nPhone\nCustom field\nName format\nProfile picture\nAction\nNote When editing, existing endpoints that previously used the PUT HTTP verb have been replaced with PATCH. PATCH can be used to update partial resources. For instance, when you only need to update one field of the resource. Impacted constituent related endpoints include: Operation New Method Route Action (Edit) PATCH /actions/{actionId} Constituent code (Edit) PATCH /constituentcodes/{constituentCodeId} Email address (Edit) PATCH /emailaddresses/{emailAddressId} Note (Edit) PATCH /notes/{noteId} Online presence (Edit) PATCH /onlinepresences/{onlinePresenceId} We made changes to the custom field entity: To better denote the fields that can represent the \"value\" of the custom field, we appended a _value suffix to the field name for the following fields: constituent_id_value\ndate_value\ntext_value\nnumber_value\ncurrency_value\nboolean_value\ncode_table_value\nfuzzy_date_value Renamed the constituent_id property to parent_id to avoid confusion with the constituent_id_value field and to facilitate the re-use of this type across other entities. The parent_id represents the parent object's identifier. For example, in the case of constituent custom fields, the parent_id represents the constituent identifier. Added date and comment properties. 2016-04-26\nAnnouncement: Breaking Changes Planned for Constituent API\nIn the coming days two breaking changes will be placed into effect: We will replace existing PUT endpoints to use PATCH, instead. Unlike PUT, PATCH can be used to update partial resources. For instance, when you only need to update one field of the resource. In this way the payload size is optimized. 2016-04-25\nNew Added the ability to create, edit, and delete email addresses: Operation Method Route Email address (Create) POST /emailaddresses Email address (Edit) PUT /emailaddresses/{emailAddressId} Email address (Delete) DELETE /emailaddresses/{emailAddressId} Added the ability to create and edit constituent codes: Operation Method Route Constituent code (Create) POST /constituentcodes Constituent code (Edit) PUT /constituentcodes/{constituentCodeId} Constituent code (Delete) DELETE /constituentcodes/{constituentCodeId} 2016-04-15\nNew\nAdded the ability to create, edit, and delete online presence entities: Operation Method Route Online presence (Create) POST /onlinepresences Online presence (Edit) PUT /onlinepresences/{onlinePresenceId} Online presence (Delete) DELETE /onlinepresences/{onlinePresenceId} 2016-04-08\nNew Added the ability to return a paginated list of constituents. For this release, the list will be ordered by name (last name for individuals, organization name for organizations). Operation Method Route Constituent (List) GET /constituents The endpoint supports the following the optional request parameters. Pagination is facilitated through the results via the top and skip parameters: Property Description top Optional. Integer. Represents the number of records to return. If not specified, the default is 100. The maximum allowed value is 500. skip Optional. Integer. Represents the number of records to skip. Changed Breaking change implemented for the Constituent API endpoints that return a collection of objects. This change allows us to be consistent in the representation of data collections and supports pagination for certain endpoints. See the 2016-03-31 changelog entry for a listing of affected endpoints. Constituent (Search) now supports the ability to search on an email address (same functionality as found in the RE NXT search feature). This expanded search will match against constituent email addresses when the searchText parameter is a valid email address. Note that we currently support exact match only. 2016-03-31\nAnnouncement: Breaking Changes Planned for Constituent API endpoints\nIn the coming weeks, we will be standardizing the shape of our responses that return a collection of objects. This standardization will allow us to be consistent across each endpoint as well as to facilitate some future enhancements around pagination within those endpoints. The new representation of a collection will be a JSON object with two properties, a count which represents the total number of records meeting the criteria and a value property which represents the array of items for the current paged response.\nThis change is scheduled for release by April 8, 2016. How a collection response is formed today (Phones used as an example):\n{ \"phones\": [ { \"id\": \"95\", \"type\": \"Home\", \"number\": \"303-997-3301\", \"do_not_call\": false, \"primary\": true, \"inactive\": false }, { \"id\": \"330\", \"type\": \"Home\", \"number\": \"(312) 997-3301\", \"do_not_call\": false, \"primary\": false, \"inactive\": false } ]\n} How the response will be formed after release:\n{ \"count\": 10, // total number of elements in the collection \"value\": [ // collection of items included in this response { \"id\": \"95\", \"type\": \"Home\", \"number\": \"303-997-3301\", \"do_not_call\": false, \"primary\": true, \"inactive\": false }, { \"id\": \"330\", \"type\": \"Home\", \"number\": \"(312) 997-3301\", \"do_not_call\": false, \"primary\": false, \"inactive\": false } ]\n} * Please note that the response format may change before official release.\nEndpoints affected: Operation Method Route Action (List) GET /constituent/constituents/{constituentId}/actions Address (List) GET /constituent/constituents/{constituentId}/addresses Constituent attachment (List) GET /constituent/constituents/{constituentId}/attachments Constituent code (List) GET /constituent/constituents/{constituentId}/constituentcodes Constituent (Search) GET /constituent/constituents/search/?searchText={searchText} Constituent custom field (List) GET /constituent/constituents/{constituentId}/customfields Education (List) GET /constituent/constituents/{constituentId}/educations Email address (List) GET /constituent/constituents/{constituentId}/emailaddresses Name format (List) GET /constituent/constituents/{constituentId}/nameformats Note (List) GET /constituent/constituents/{constituentId}/notes Online presence (List) GET /constituent/constituents/{constituentId}/onlinepresences Phone (List) GET /constituent/constituents/{constituentId}/phones Relationship (List) GET /constituent/constituents/{constituentId}/relationships 2016-03-30\nNew Added the ability to return a list of relationships for a specified constituent. Operation Method Route Relationship (List) GET /constituents/{constituentId}/relationships Added the ability to return a constituent's profile picture. Operation Method Route Profile picture (Get) GET /constituents/{constituentId}/profilepicture Changed\nGET operations that return an attachment endpoint, such as Constituent attachment (List), return the following new properties: Property Description thumbnail_url Read only. String. Represents an image thumbnail URI for a picture to display. Endpoints that add or edit attachments ignore this property. file_size Read only. Long integer. The file size of the attachment in bytes. Only applies to physical attachments. Helps to determine how to display large images. Endpoints that add or edit attachments ignore this property. 2016-03-10\nNew Added the ability to return a list of education items for a specified constituent. Operation Method Route Education (List) GET /constituents/{constituentId}/educations Added the ability to edit and delete actions and notes for a constituent: Operation Method Route Action (Edit) PUT /actions/{actionId} Action (Delete) DELETE /actions/{actionId} Note (Edit) PUT /notes/{noteId} Note (Delete) DELETE /notes/{noteId} Changed OAuth and Constituent API URLs changed. See Base URLs. The route for the authorization endpoint is no longer prefixed with renxt. Operation Method Old Route New Route authorization (Get) GET /renxt/authorization /authorization The base URL for the Constituent API has changed: Old New https://api.nxt.blackbaud-dev.com/constituents/ https://api.sky.blackbaud.com/constituent After creating an attachment for a constituent, the returned representation of an attachment now includes the attachment identifier (id). Values for the Constituent gender property now return the values using the correct casing (lowercase). GET and POST routes for actions and notes endpoints have changed: Operation Method Old Route New Route Action (Get) GET /{constituentId}/actions/{actionId} /actions/{actionId} Action (Create) POST /{constituentId}/actions /actions Note (Get) GET /{constituentId}/notes/{noteId} /notes/{noteId} Note (Create) POST /{constituentId}/notes /notes Deleted\nWe removed the following endpoints: GET Attachment\nGET Constituent code\nGET Custom field\nGET Email address\nGET Online presence\nGET Phone\nGET Primary business\nGET Spouse 2015\n2015-10-20\nNew Added 3 new endpoints covering constituent attachments\nGet a list of constituent attachments\nGet a specific attachment for a constituent\nAdd an attachment for a constituent Note that currently, all attachment records are viewable through the SKY API, but only link attachments can be added. Changed Removed Author from the constituent note entity. The author is now inferred from the context of the user calling the SKY API. "
    },
    {
     "layout": "layout-sidebar",
     "name": "Fundraising",
     "description": "Information on additions and changes for the Fundraising API.",
     "order": 125,
     "published": true,
     "showInNav": true,
     "icon": "fa fa-line-chart",
     "back_to_top": true,
     "title": "Fundraising Changelog",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Support Changelog Fundraising",
     "abspath": "support/changelog/fundraising/index.md",
     "uri": "/support/changelog/fundraising/",
     "text": " Fundraising\nMonitor this page to keep up with the Fundraising API latest changes and SKY API service releases.\n2018-07-11\nAnnouncement: Changes for Fundraising API\nWe will transition the Fundraising (Beta) API out of its current public beta phase and into a formal v1 release.\nJune\n2018-06-19\nNew\nAdded the following endpoints: Operation Method Route Package list GET /packages 2018-06-01\nAnnouncement: Changes for Fundraising API\nWe implemented new operation ID values in the OpenApi (fka Swagger) definitions for all endpoints in the Fundraising API. Note that any existing code relying on these endpoints will continue to function, since all routes and parameters are unchanged. However, if you make use of client-side generated code and want to regenerate your client wrapper, compile-time errors in your code stemming from new operation ID values will arise and need to be addressed.\nNew\nAdded the following endpoint: Operation Method Route Document (Create) POST /documents May\n2018-05-25\nAnnouncement: Changes Planned for Constituent, Fundraising, Gift, and Opportunity APIs\nWe will implement new operation ID values in the OpenApi (fka Swagger) definitions for several SKY APIs. This change will improve client-side tooling support for code generation by making these values more deterministic and friendlier across different languages. Going forward, we expect high stability of these values (meaning, we won’t need to change them again).\nNote that any existing code that has been deployed will continue to function with no problems, since we are not changing any routes or parameters. If you make use of client-side generated code and want to regenerate your client wrapper, you’ll need to fix any compile-time errors in your code stemming from new method names.\nApril\n2018-04-19\nNew\nAdded the following endpoints: Operation Method Route Fundraiser assignment list (Single fundraiser) GET /fundraisers/{fundraiser_id}/assignments Fundraiser assignment (Create) POST /fundraisers/assignments Fundraiser assignment (Edit) PATCH /fundraisers/assignments/{assignment_id} Fundraiser assignment (Delete) DELETE /fundraisers/assignments/{assignment_id} Fundraiser types GET /fundraisers/types February\n2018-02-27\nNew\nAdded the following endpoints: Operation Method Route Fundraiser goal list (Single constituent) GET /fundraisers/{fundraiser_id}goals Fundraiser goal (Create) POST /fundraisers/goals Fundraiser goal (Edit) PATCH /fundraisers/goals/{goal_id} Fundraiser goal (Delete) DELETE /fundraisers/goals/{goal_id} Appeal categories GET /appeals/categories Campaign categories GET /campaigns/categories Fund categories GET /funds/categories Changed\nWe changed the URL for the Goal categories (Get) endpoint to /fundraisers/goals/categories as previously announced.\n2018-02-09\nAnnouncement: Breaking Changes Planned for Fundraising API\nWe will change the URL for the Goal categories (Get) endpoint to /fundraisers/goals/categories.\n2018-02-05\nChanged\nWe added the type property to the fund entity.\nJanuary\n2018-01-29\nNew\nAdded the following endpoint: Operation Method Route Attachment tags GET /attachmenttags Changed We added the date property to the attachment entity.\nWe added the category property to the campaign, fund, and appeal entities. 2017\n2017-12-15\nNew\nAdded the following endpoints: Operation Method Route Goal categories GET /fundraising/goalcategories Package GET /packages/{package_id} 2017-08-28\nNew\nAdded the following endpoints: Operation Method Route Appeal attachment list (Single appeal) GET /appeals/{appeal_id}/attachments Appeal attachment (Create) POST /appeals/attachments Appeal attachment (Edit) PATCH /appeals/attachments/{attachment_id} Appeal attachment (Delete) DELETE /appeals/attachments/{attachment_id} Campaign attachment list (Single campaign) GET /campaigns/{campaign_id}/attachments Campaign attachment (Create) POST /campaigns/attachments Campaign attachment (Edit) PATCH /campaigns/attachments/{attachment_id} Campaign attachment (Delete) DELETE /campaigns/attachments/{attachment_id} Fund attachment list (Single fund) GET /funds/{fund_id}/attachments Fund attachment (Create) POST /funds/attachments Fund attachment (Edit) PATCH /funds/attachments/{attachment_id} Fund attachment (Delete) DELETE /funds/attachments/{attachment_id} 2017-05-09\nChanged\nThe Appeal list, Campaign list, and Fund list endpoints now exclude inactive records by default. To include inactive records, set the include_inactive parameter to true.\n2017-04-28\nAnnouncement: Breaking Changes Planned for Fundraising API\nWe will update the default value of the include_inactive filter to false on the Appeal list, Campaign list, and Fund list endpoints to exclude inactive records by default. Currently, the filter defaults to true and includes inactive records when no value is supplied.\n2017-04-06\nNew\nAdded the following endpoints: Operation Method Route Appeal list GET /appeals Campaign list GET /campaigns Fund list GET /funds 2017-03-08\nNew\nThe Fundraising API has been released for a public beta. This API handles information related to the fundraising hierarchy, including the campaign, fund, and appeal entities: Campaigns set the overall objectives and initiatives for raising money, and they are typically the top tier of the fundraising hierarchy. For example, organizations can create campaigns to encompass fundraising efforts related to annual operating expenses, new buildings, or endowments.\nFunds represent the donor's intent for how to use or earmark a gift. For example, the gift can be intended for a specific cause or financial purpose. Funds are often linked to financial suites and indicate where to allocate a gift.\nAppeals are the sources and solicitations that bring in gifts, and they are typically the most granular piece of the fundraising hierarchy. Examples of appeals include direct mailings, online donation pages, phonathons, auctions, and events. The initial release contains endpoints to retrieve these entities by ID and to manage custom fields. For more information, see the entity and endpoint references. "
    },
    {
     "layout": "layout-sidebar",
     "name": "Gift",
     "description": "Information on additions and changes for the Gift API.",
     "order": 175,
     "published": true,
     "showInNav": true,
     "icon": "fa fa-gift",
     "back_to_top": true,
     "title": "Gift Changelog",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Support Changelog Gift",
     "abspath": "support/changelog/gift/index.md",
     "uri": "/support/changelog/gift/",
     "text": " Gift\nMonitor this page to keep up with the Gift API latest changes and SKY API service releases.\n2018-07-11\nAnnouncement: Changes for Gift API\nWe will transition the Gift (Beta) API out of its current public beta phase and into a formal v1 release.\nJune\n2018-06-05\nAnnouncement: Changes for Gift API\nWe implemented new operation ID values in the OpenApi (fka Swagger) definitions for all endpoints in the Gift API. Note that any existing code relying on these endpoints will continue to function, since all routes and parameters are unchanged. However, if you make use of client-side generated code and want to regenerate your client wrapper, compile-time errors in your code stemming from new operation ID values will arise and need to be addressed.\nNew\nAdded the following endpoint: Operation Method Route Document (Create) POST /documents Changed\nWe added the id property to the gift split entity.\nMay\n2018-05-25\nAnnouncement: Changes Planned for Constituent, Fundraising, Gift, and Opportunity APIs\nWe will implement new operation ID values in the OpenApi (fka Swagger) definitions for several SKY APIs. This change will improve client-side tooling support for code generation by making these values more deterministic and friendlier across different languages. Going forward, we expect high stability of these values (meaning, we won’t need to change them again).\nNote that any existing code that has been deployed will continue to function with no problems, since we are not changing any routes or parameters. If you make use of client-side generated code and want to regenerate your client wrapper, you’ll need to fix any compile-time errors in your code stemming from new method names.\nJanuary\n2018-01-29\nNew\nAdded the following endpoint: Operation Method Route Attachment tags GET /attachmenttags Changed\nWe added the date property to the attachment entity.\n2017\n2017-12-11\nChanged\nWe added the package_id property to the gift split entity.\n2017-12-01\nChanged The Gift list endpoint now includes an option to filter gifts based on their post statuses. The optional post_status query parameter, which can be specified multiple times to imply a logical OR, filters the results to only include gifts with the specified post statuses. For example, post_status=DoNotPost&post_status=Posted filters the results to only include gifts that are marked either DoNotPost or Posted. The Gift list endpoint now includes an option to filter gifts based on their gift types. The optional gift_type query parameter, which can be specified multiple times to imply a logical OR, filters the results to only include gifts with the specified gift types. For example, gift_type=MatchingGiftPledge&gift_type=RecurringGift filters the results to only include gifts with the MatchingGiftPledge or RecurringGift types. 2017-11-01\nChanged\nWe added the batch_number property to the gift entity. This property is read-only.\n2017-10-27\nNew\nAdded the following endpoint: Operation Method Route Gift (Create) POST /gifts Changed\nThe Gift list endpoint now includes an option to filter gifts based on their associated constituents. The optional constituent_id query parameter, which can be specified multiple times to imply a logical OR, filters the results to only include gifts associated with the specified constituent record IDs. For example, &constituent_id=1242&constituent_id=385 filters the results to only include gifts associated with two constituent records: \"1242\" and \"385.\"\n2017-10-04\nChanged\nWe added the acknowledgements, receipts, and balance properties to the gift entity.\n2017-09-07\nNew\nAdded the following endpoint: Operation Method Route Gift custom field list (All gifts) GET /gifts/customfields Changed\nThe date property on the gift entity no longer returns an offset. Instead, it now uses ISO-8601 format: 2015-09-18T00:00:00.\n2017-08-30\nAnnouncement: Breaking Changes Planned for Gift API\nWe will update the date property on the gift entity to no longer return an offset. Instead, it will use ISO-8601 format: 2015-09-18T00:00:00.\n2017-08-08\nNew\nAdded the following endpoint: Operation Method Route Gift subtypes (Get) GET /giftsubtypes Changed\nWe added the payments property to the gift entity.\n2017-08-04\nChanged\nWe updated the next_link property on the Gift list endpoint to be more consistent with other lists.\n2017-06-23\nChanged\nWe added the gift_aid_amount and gift_aid_qualification_status properties to the gift entity for UK tenants.\n2017-04-25\nNew\nAdded the following endpoints: Operation Method Route Gift custom field (Create) POST /gifts/customfields Gift custom field (Edit) PATCH /gifts/customfields/{custom_field_id} Gift custom field categories (Get) GET /gifts/customfields/categories Gift custom field category values (Get) GET /gifts/customfields/values 2017-03-20\nChanged\nWe added the post_date property to the gift entity.\n2017-03-08\nNew\nThe Gift API has been released for a public beta. This API handles information related to gifts, including related entities such as gift splits, gift fundraisers, and soft credits.\nThe initial release contains endpoints to retrieve a list of all gifts, to retrieve gifts by their IDs, and to manage attachments. For more information, check out the entity and endpoint references. "
    },
    {
     "layout": "layout-sidebar",
     "name": "General Ledger",
     "description": "Information on additions and changes for the General Ledger API.",
     "order": 150,
     "published": true,
     "showInNav": true,
     "icon": "fa fa-book",
     "back_to_top": true,
     "title": "General Ledger Changelog",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Support Changelog Gl",
     "abspath": "support/changelog/gl/index.md",
     "uri": "/support/changelog/gl/",
     "text": " General Ledger\nMonitor this page to keep up with the General Ledger API latest changes and SKY API service releases.\n2018-07-19\nNew\nAdded the following endpoints: Operation Method Route Budget detail GET /budgets/{scenario_id}/details Budget PATCH /budgets/{scenario_id} Budget detail lines (List) GET /budgets/{scenario_id}/details/lines Changed\nWe made several changes to the Journal entry batch attachment endpoint: The endpoint now supports physical attachments. (Previously, it only supported link attachments.)\nNote the shape of the request in JSON form: {\n\"parent_id\": 0,\n\"name\": \"string\",\n\"url\": \"string\",\n\"type\": \"Link\",\n\"media_type\": \"string\",\n\"file\": { \"ContentLength\": 0, \"ContentType\": \"string\", \"FileName\": \"string\", \"InputStream\": { \"CanRead\": true, \"CanSeek\": true, \"CanTimeout\": true, \"CanWrite\": true, \"Length\": 0, \"Position\": 0, \"ReadTimeout\": 0, \"WriteTimeout\": 0 } }\n} The type field now accepts Physical but defaults to Link. The url is required for link attachments but not for physical attachments\nThe file field is HttpPostedFileBase. It is required for physical attachments but not for link attachments.\nFor physical attachments, requests must be multipart/form-data. For example: public static Task PostMultiPartDataFormAsync(this HttpClient client, string route, Attachment content) { var httpContent = new MultipartFormDataContent(); var streamContent = new StreamContent(content.File.InputStream); var ContentDisposition = new ContentDispositionHeaderValue(\"form-data\"); ContentDisposition.Name = \"File\"; ContentDisposition.FileName = content.File.FileName; streamContent.Headers.ContentDisposition = ContentDisposition; streamContent.Headers.ContentType = new MediaTypeHeaderValue(content.File.ContentType); httpContent.Add(streamContent); httpContent.Add(new StringContent(content.ParentId.ToString()), \"ParentId\"); httpContent.Add(new StringContent(content.Name), \"Name\"); httpContent.Add(new StringContent(content.Type.ToString()), \"Type\"); httpContent.Add(new StringContent(content.MediaType.ToString()), \"MediaType\"); var request = new HttpRequestMessage(HttpMethod.Post, route) { Content = httpContent }; return SendAsync(client, request); } In application/json requests, field names must use snake casing such as parent_id and media_type, whereas in multipart/form-data requests, field names must use camel case, such as ParentId and MediaType.\nLink attachments should be sent as application/json formatted requests with the file field omitted.\nIf the file field is populated in application/json formatted requests, the request fails unless type is set to Link because then the request ignores the file. June\n2018-06-28\nNew\nAdded the following endpoint: Operation Method Route Journal entry batch summary GET /journalentrybatches/{batch_id}/summary Journal entries (List) GET /journalentrybatches/{batch_id}/journalentries * We deprecated the Journal entry batch (GET) endpoint and replaced it with the Journal entry batch summary (Get) and Journal entries (List) endpoints. We will continue to support deprecated endpoints for v1 of the General Ledger API, but we recommend transitioning to the new endpoints for a more robust and consistent response.\n2018-06-20\nChanged\nWe made changes to the following endpoints: The Journal entry batch (List) endpoint now includes a new search_text request parameter that can match description or ui_batch_id. For example, ?search_text=100 returns a list of batches with a ui_batch_id that contains \"100\" or a description that contains \"100\".\nThe Budget (List) endpoint now includes a new scenario_id field that returns the scenario ID associated with the budget. 2018-06-12\nAnnouncement: Changes for General Ledger API\nWe implemented new operation ID values in the OpenApi (fka Swagger) definitions for all endpoints in the General Ledger API. Note that any existing code relying on these endpoints will continue to function, since all routes and parameters are unchanged. However, if you make use of client-side generated code and want to regenerate your client wrapper, compile-time errors in your code stemming from new operation ID values will arise and need to be addressed.\n2018-06-04\nAnnouncement: Changes Planned for Accounts Payable, General Ledger, and Treasury (Beta) APIs\nWe will implement new operation ID values in the OpenApi (fka Swagger) definitions for several SKY APIs. This change will improve client-side tooling support for code generation by making these values more deterministic and friendlier across different languages. Going forward, we expect high stability of these values (meaning, we won’t need to change them again).\nNote that any existing code that has been deployed will continue to function with no problems, since we are not changing any routes or parameters. If you make use of client-side generated code and want to regenerate your client wrapper, you’ll need to fix any compile-time errors in your code stemming from new method names.\nMay\n2018-05-24\nChanged\nWe made changes to the following endpoints: The Transaction distribution (List) endpoint now returns proper account_class information.\nThe Journal entry batch (GET) endpoint now returns the correct number of journal_entries.\nIn the Period summary process (GET) endpoint, the status field has been enumerated and all values can now be seen in the Period summary process schema. April\n2018-04-20\nNew\nAdded the following endpoint: Operation Method Route Journal entry batch PATCH /journalentrybatches/{batch_id} With the new endpoint, note the following: You can edit the description, create_interfund_sets, and create_bank_account_adjustments values of an existing journal entry batch.\nPosted journal entry batches cannot be edited.\nOmitting a field from a PATCH request does not edit that field with a default value. In the example below, only create_interfund_entries is edited, but the other fields are not. { “create_interfund_sets”: false\n} March\n2018-03-02\nNew\nAdded the following endpoints: Operation Method Route Client names (List) GET /configuration/client_names Grant status (List) GET /grants/statuses Grant type (List) GET /grants/types Grant custom field (List) GET /grants/customfields Changed\nFor the Period summary process (Start) endpoint, a fiscal_period_id was previously required. Now, when no object is sent or when a fiscal_period_id with value 0 is sent, all open and unoptimized fiscal periods are summarized.\nJanuary\n2018-01-17\nChanged\nFor the Journal entry batch (Post) endpoint, transaction_code_value can now include “” empty string for value.\n2017\n2017-11-20\nNew\nAdded the following endpoints: Operation Method Route Period summary (List) GET /periodsummary/summaries Period summary process GET /periodsummary/processinginfo Period summary process (Start) POST /periodsummary/summarize 2017-08-14\nNew\nAdded the following endpoints: Operation Method Route Journal entry batch attachment POST /journalentrybatches/attachments Media type (List) GET /mediaTypes Changed For the following endpoint, we added the division, department, location, and type filters. Additional data is also returned: Operation Method Route Project GET /projects For the following endpoint, we added the encumbrance and post date filters. Additional data is also returned: Operation Method Route Transaction distribution (List) GET /transactiondistributions 2017-06-15\nChanged\nWe made several changes to the Get Account (Search), Get Project (Search), Get Journal entry batch (List), and Get Transaction distribution (List) endpoints. The following properties are now returned: date_added, date_modified, added_by, and modified_by. The last_modified filter is now included. This filter causes the response to only include results where date_modified is greater than or equal to the last_modified filter value. 2017-05-05\nNew\nAdded the following endpoints: Operation Method Route Budget grant (List) GET /budgets/{scenario_id}/grants Budget project (List) GET /budgets/{scenario_id}/projects Changed\nWe increased the maximum record limit from 500 to 5000 on the following Get endpoint: Operation Method Route Transaction distribution GET /transactiondistributions 2017-01-18\nNew\nAdded the following endpoints: Operation Method Route Account GET /accounts/{account_id} Project GET /projects/{project_id} Account cashflows (List) GET /accounts/cashflows Account working capitals (List) GET /accounts/workingcapitals Account custom fields (List) GET /accounts/customfields 2016\n2016-12-06\nNew Added the following endpoints: Operation Method Route Journal entry custom field (List) GET /journalentries/customfields Project custom field (List) GET /projects/customfields Budget GET /budgets Budget (List) GET /budgets/{scenario_id} Budget account (List) GET /budgets/{scenario_id}/accounts Ledger summary (List) GET /summary/{fiscal_year_id} Added new custom field entities to the following endpoints: Operation Method Route Project POST /projects Journal entry POST /journalentrybatches/{batch_id}/journalentries Journal entry batch GET /journalentrybatches/{batch_id} Changed\nFor consistency across APIs, all responses to GET endpoints that return collections now return an object with \"count\" and \"value\" properties. The following endpoints are affected: Operation Method Route Class (List) GET /classes Journal code (List) GET /journalcodes Project department (List) GET /projects/departments Project division (List) GET /projects/divisions Project location (List) GET /projects/locations Project status (List) GET /projects/statuses Project type (List) GET /projects/types Transaction code (List) GET /transactioncodes Transaction code value (List) GET /transactioncodes/{transaction_code_id}/values 2016-11-14\nAnnouncement: Breaking Change Planned for General Ledger API\nFor consistency across APIs, we will implement the following changes: All responses to GET endpoints that return collections will return an object with \"count\" and \"value\" properties.\nThe following endpoints are affected: Operation Method Route Class (List) GET /classes Journal code (List) GET /journalcodes Project department (List) GET /projects/departments Project division (List) GET /projects/divisions Project location (List) GET /projects/locations Project status (List) GET /projects/statuses Project type (List) GET /projects/types Transaction code (List) GET /transactioncodes Transaction code value (List) GET /transactioncodes/{transaction_code_id}/values 2016-11-01\nNew\nAdded the following endpoints: Operation Method Route Create project (Post) POST /projects Create project contact (Post) POST /projects/{project_id}/contacts 2016-10-06\nNew\nAdded the following endpoints: Operation Method Route Fiscal year (List) GET /fiscalyears Class (List) GET /classes Account structure GET /accounts/structure Account segment value (List) GET /accounts/segments Account code (List) GET /accounts/codes Account fund (List) GET /accounts/funds Project type (List) GET /projects/types Project status (List) GET /projects/statuses Project division (List) GET /projects/divisions Project department (List) GET /projects/departments Project location (List) GET /projects/locations Changed\nYou can now specify Class on journal entries (this affects all endpoints associated with journal entry batches).\n2016-08-12\nBreaking Change\nWe changed the default and maximum record limits on the following search and list endpoints. The default is now 100 records, and the maximum is 500 records. Operation Method Route Transaction distribution (Search) GET /transactiondistributions Account (Search) GET /accounts Project (Search) GET /projects Journal entry batch (List) GET /journalentrybatches 2016-07-05\nChanged\nWe implemented a previously announced, breaking change. We removed the Journal entry batch (Edit) PUT endpoint. At a later date, we plan to replace PUT with PATCH, instead.\n2016-06-30\nAnnouncement: Breaking Change Planned for General Ledger API\nIn the coming days, a breaking change will be placed into effect. We will remove the Journal entry batch (Edit) PUT endpoint. At a later date, we plan to replace PUT with PATCH, instead.\n2016-06-22\nNew\nAdded the following endpoint: Operation Method Route Transaction distribution (Search) GET /transactiondistributions 2016-06-15\nChanged\nWe've added a versioning indicator to the General Ledger API's base URL. Specifically, all new API requests must begin with https://api.sky.blackbaud.com/generalledger/v1.\n2016-06-10\nAnnouncement: Breaking Changes Planned for General Ledger API We will be adding a versioning indicator to the General Ledger API's base URL. Specifically, all new API requests should begin with https://api.sky.blackbaud.com/generalledger/v1.\nThis change is planned to take effect on Wednesday, June 15. 2016-05-27\nNew Added a General Ledger getting started guide to help you make your first General Ledger API call with our interactive SKY API Console. "
    },
    {
     "layout": "layout-sidebar",
     "name": "Opportunity",
     "description": "Information on additions and changes for the Opportunity API.",
     "order": 200,
     "published": true,
     "showInNav": true,
     "icon": "fa fa-handshake",
     "back_to_top": true,
     "title": "Opportunity Changelog",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Support Changelog Opportunity",
     "abspath": "support/changelog/opportunity/index.html",
     "uri": "/support/changelog/opportunity/",
     "text": " Opportunity\nMonitor this page to keep up with the Opportunity API latest changes and SKY API service releases.\n2018-07-11\nAnnouncement: Changes for Opportunity API\nWe will transition the Opportunity (Beta) API out of its current public beta phase and into a formal v1 release.\nJune\n2018-06-01\nAnnouncement: Changes for Opportunity API\nWe implemented new operation ID values in the OpenApi (fka Swagger) definitions for all endpoints in the Opportunity API. Note that any existing code relying on these endpoints will continue to function, since all routes and parameters are unchanged. However, if you make use of client-side generated code and want to regenerate your client wrapper, compile-time errors in your code stemming from new operation ID values will arise and need to be addressed.\nNew\nAdded the following endpoint: Operation Method Route Document (Create) POST /documents May\n2018-05-25\nAnnouncement: Changes Planned for Constituent, Fundraising, Gift, and Opportunity APIs\nWe will implement new operation ID values in the OpenApi (fka Swagger) definitions for several SKY APIs. This change will improve client-side tooling support for code generation by making these values more deterministic and friendlier across different languages. Going forward, we expect high stability of these values (meaning, we won’t need to change them again).\nNote that any existing code that has been deployed will continue to function with no problems, since we are not changing any routes or parameters. If you make use of client-side generated code and want to regenerate your client wrapper, you’ll need to fix any compile-time errors in your code stemming from new method names.\nJanuary\n2018-01-24\nNew\nAdded the following endpoints: Operation Method Route Attachment tags GET /attachmenttags Changed\nWe added the date property to the attachment entity.\n2017\n2017-12-01\nChanged\nThe Opportunity list endpoint now includes an option to filter opportunities based on their associated constituents. The optional constituent_id query parameter, which can be specified multiple times to imply a logical OR, filters the results to only include opportunities associated with the specified constituent record IDs. For example, &constituent_id=1242&constituent_id=385 filters the results to only include opportunities associated with two constituent records: \"1242\" and \"385.\"\n2017-05-10\nChanged\nWe updated the Opportunity (GET) endpoint to return the date_added and date_modified properties.\n2017-04-27\nChanged\nWe added the linked_gifts property to the opportunity entity. This property is an array of identifiers for the gifts that are related to the opportunity.\n2017-04-12\nNew\nThe Opportunity API has been released for a public beta. This API handles information related to opportunities, including the opportunity, opportunity attachments, and opportunity fundraiser entities.\nThe initial release contains endpoints to retrieve these entities by ID and to manage custom fields. For more information, check out the entity and endpoint references. "
    },
    {
     "layout": "layout-sidebar",
     "name": "Payments (Beta)",
     "description": "Information on additions and changes for the Payments API (Beta).",
     "order": 210,
     "published": true,
     "showInNav": false,
     "icon": "fa fa-credit-card",
     "back_to_top": true,
     "title": "Payments (Beta) Changelog",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": false,
     "showInFooter": false,
     "showInSearch": true,
     "breadcrumbs": "Support Changelog Payments",
     "abspath": "support/changelog/payments/index.md",
     "uri": "/support/changelog/payments/",
     "text": " Payments (Beta)\nMonitor this page to keep up with the Payments API (Beta) latest changes and SKY API service releases. "
    },
    {
     "layout": "layout-sidebar",
     "name": "School (Beta)",
     "description": "Information on additions and changes for the School API (Beta).",
     "order": 210,
     "published": true,
     "showInNav": false,
     "icon": "fa fa-graduation-cap",
     "back_to_top": true,
     "title": "School (Beta) Changelog",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": false,
     "showInFooter": false,
     "showInSearch": true,
     "breadcrumbs": "Support Changelog School",
     "abspath": "support/changelog/school/index.md",
     "uri": "/support/changelog/school/",
     "text": " School (Beta)\nMonitor this page to keep up with the School API (Beta) latest changes and SKY API service releases.\n02 July 2018\nNew\nAdded the following endpoint(s): Operation Method Route Sport list GET /athletics/sports[?season_id] Team roster GET /users/extended?base_role_ids={base_role_ids}[&marker] 30 May 2018\nNew\nAdded the following endpoint(s): Operation Method Route Student list (single section) GET /academics/sections/{section_id}/students User extended list GET /users/extended?base_role_ids={base_role_ids}[&marker] 15 May 2018\nNew\nAdded the following endpoint(s): Operation Method Route Student enrollment list GET /academics/enrollments/{student_id}[?school_year] Phone type list GET /users/phonetypes Assignment list (single section) GET /academics/sections/{section_id}/assignments[?types][&status][&persona_id][&filter][&search] Section list GET /academics/sections[?level_num][&school_year] Relationship list (single user) GET /users/{user_id}/relationships "
    },
    {
     "layout": "layout-sidebar",
     "name": "Shared",
     "description": "Common changes shared across all our APIs.",
     "order": 50,
     "published": true,
     "showInNav": true,
     "icon": "fa fa-cloud",
     "back_to_top": true,
     "title": "Shared Changelog",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Support Changelog Shared",
     "abspath": "support/changelog/shared/index.md",
     "uri": "/support/changelog/shared/",
     "text": " Shared\nMonitor this page to keep up with common changes shared across all our APIs.\nMay 2017\n2017-05-31\nChanged\nWe moved the Status page link from the Support menu to the top navigation. This makes it even quicker for you to see the current state of API availability. If you haven't signed up yet, we encourage you to subscribe to automatic incident notifications. You can subscribe by email, SMS or RSS feed.\n2017-05-04\nNew\nWe added a new step-by-step guide to help you learn the steps required to Create an App with SKY API. We recommend you complete this guide after you follow the Getting Started documentation.\nMarch 2017\n2017-3-10\nNew\nIn response to a request from the Blackbaud Community, we are pleased to announce a new PHP code sample and accompanying PHP tutorial. These two new resources demonstrate the Blackbaud Auth Code Flow using PHP.\n2017-3-03\nNew\nThe SKY API developer site now offers commenting capability through Disqus. We encourage community involvement to improve our documentation. We will monitor comments just like we monitor feedback in our GitHub repository, and we will incorporate feedback to make our docs better. See something that is unclear? Want more detail? Leave a comment and let us know!\nOn the SKY API developer site, comments now appear at the bottom of most documentation pages, and buttons are available at the top of pages to take users to the comments.\n2016\n2016-12-02\nWe added a new Status link to the Support menu. This link takes you to our SKY API status page. The status page provides the current state of API availability, as well as specific details on downtime incidents. We also provide the option for you to subscribe to automatic incident notifications by email, SMS, or feed.\n2016-10-17\nLogos can now be associated with your applications. The logo is the icon that users will see on the consent form when they give an application authorization to use their product's account to access the API. Logos can be added to new and existing applications through the My Applications page. Application logo images must be: 512 by 512 pixels\nSmaller than 2MB\nPNG or JPEG format 2016-09-22\nSKY API's support for CORS now includes accept and content-type in the list of accepted request headers. You can now specify these headers in API requests from within a browser.\n2016-07-08\nTo support approved API subscribers with access to their own dedicated tenants, we've added instructions for activating the SKY API Console\nto our Basics guide.\n2016-06-27 When requesting an access token, you may now supply your application ID and secret as part of the request body as client_id and client_secret parameters, respectively. This is an alternative to using the Authorization header. See Authorization Code Flow. Created a C# Auth Code Flow code sample and tutorial. 2016-06-09\nNew We've added the OAuth2 Implicit Flow for use in web browser and mobile apps where application secret confidentiality is not guaranteed. A new feature allows you to export API definitions in Swagger and WADL formats from within the SKY API Console. Use these files to generate client-side code by using tools such as Swagger Codegen. You can import these files into API client tools such as Postman and start calling the API in very little time. 2016-05-27\nChanged\nWhen registering your application, we've relaxed the https requirement for whitelisted redirect URIs. To facilitate and shorten the development process, we now accept http://localhost:* (or, http://127.0.0.1:*) whitelisted web addresses to redirect to after users grant or deny permission for your app. You will no longer need to install a self-signed SSL certificate on your local machine when building your applications.\n2016-05-13\nNew\nA next_link property has been added to our paginated collection responses and represents the URI for the next page of results. This property takes into account any relevant pagination parameters, such as limit, offset, or last_modified, and date_added provided on the request.\n2016-05-06\nChanged limit and offset have replaced top and skip parameters for Pagination. Pagination behavior will remain unchanged. When editing, existing endpoints that previously used the PUT HTTP verb have been replaced with PATCH. PATCH can be used to update partial resources. For instance, when you only need to update one field of the resource. 2016-04-26\nPagination will be facilitated through the results via the use of limit and offset instead of top and skip parameters. Pagination behavior will remain unchanged.\n2016-03-15\nUpdates to code samples including Authorization Code Flow Tutorial and Barkbaud: Authorization Code Flow Tutorial Environment variables automatically load when the application starts. Tutorial instructions have been simplified accordingly.\nUsing AngularJS for display of Log in button, Log out button and constituent data.\nOAuth and Constituent API routes have been updated to reflect recent changes to our base URLs. Barkbaud Environment variables automatically load when the application starts. README instructions have been simplified accordingly.\nBiographies, owner and medical history for each animal are now stored in a MongoDB database at mLab instead of Parse. The Parse database service will be retired on January 28, 2017.\nOAuth and Constituent API routes have been updated to reflect recent changes to our base URLs. 2016-03-11\nUsage limits are now in effect. Exceeding the rate limit results in a 429 - Too Many Requests response status code. Exceeding the quota results in a 403 - Quota Exceeded response status code.\n2016-03-10\nChanged OAuth and Constituent API URLs changed. See Base URLs. The route for the authorization endpoint is no longer prefixed with renxt. Operation Method Old Route New Route authorization (Get) GET /renxt/authorization /authorization 2015\n2015-12-8\nNew The My Applications page now includes the ability to edit applications. Once registered, your application will automatically have access to the Developer Sandbox tenant. The Auth Code Flow Tutorial demonstrates how to create a small server-side application that negotiates authorization and access constituent data. Code Samples include Barkbaud which was introduced at bbcon 2015. Also included is the source code for the Auth Code Flow Tutorial. General Enhancements Enhanced FAQ, including new questions and references to new Auth Code Flow Tutorial and application management. 2015-11-20\nNew\nThe My Applications page and associated documentation provide self-service application registration for the purpose of accessing data via SKY API.\n2015-10-20\nChanged Improved handling of enumerations within the API. Enumeration values are now emitted using string representations instead of numeric representations. For example, Constituent.Type now returns individual or organization. Improved handling of default values within the SKY API. Previously, default values were not included in the JSON response. Values are now included in the payload. Enhanced sample response representations in the developer portal to account for enumeration and default value handling. Added a Support menu to the developer portal, with links to the Changelog, Issues, Ideas, and FAQ. "
    },
    {
     "layout": "layout-sidebar",
     "name": "Statistical Unit (Beta)",
     "description": "Information on additions and changes for the Statistical Unit API (Beta).",
     "order": 223,
     "published": true,
     "showInNav": false,
     "icon": "fa fa-balance-scale",
     "back_to_top": true,
     "title": "Statistical Unit (Beta) Changelog",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": false,
     "showInFooter": false,
     "showInSearch": true,
     "breadcrumbs": "Support Changelog Statistical-unit",
     "abspath": "support/changelog/statistical-unit/index.md",
     "uri": "/support/changelog/statistical-unit/",
     "text": " Statistical Unit (Beta)\nMonitor this page to keep up with the Statistical Unit API (Beta) latest changes and SKY API service releases.\n2018-MONTH-DAY\nNew\nThe Statistical Unit API has been released for a private beta. This API handles information related to tracking statistical units for financial reporting and allocations.\nThe initial release contains endpoints to define non-financial statistical measures and manage counts for those measures. Note that this API is only available if you have Statistical units in Financial Edge NXT. At a future time, we will make this available for all Financial Edge NXT customers.\nFor more information, check out the entity refs x-ref and endpoint refs x-ref references. "
    },
    {
     "layout": "layout-sidebar",
     "name": "Treasury",
     "description": "Information on additions and changes for the Treasury API.",
     "order": 225,
     "published": true,
     "showInNav": true,
     "icon": "fa fa-money",
     "back_to_top": true,
     "title": "Treasury Changelog",
     "sortKey": "order",
     "sortDirection": "asc",
     "showInHeader": true,
     "showInFooter": true,
     "showInSearch": true,
     "breadcrumbs": "Support Changelog Treasury",
     "abspath": "support/changelog/treasury/index.md",
     "uri": "/support/changelog/treasury/",
     "text": " Treasury\nMonitor this page to keep up with the Treasury API latest changes and SKY API service releases.\n2018-07-11\nAnnouncement: Changes for Treasury API\nWe will transition the Treasury (Beta) API out of its current public beta phase and into a formal v1 release.\nJune\n2018-06-28\nNew\nAdded the following endpoint: Operation Method Route Transaction code (List) GET /transactioncodes Transaction code value (List) GET /transactioncodes/{transaction_code_id}/value These endpoints currently exist in the General Ledger API. We decided to include them in the Treasury API (and Accounts Payable API) because values from those endpoints may be required to create Treasury (or Accounts Payable) records.\nChanged\nWe fixed an issue for Deposit (Get) to set the name in transaction_code_values in distribution_splits.\n2018-06-12\nAnnouncement: Changes for Treasury API\nWe implemented new operation ID values in the OpenApi (fka Swagger) definitions for all endpoints in the Treasury API. Note that any existing code relying on these endpoints will continue to function, since all routes and parameters are unchanged. However, if you make use of client-side generated code and want to regenerate your client wrapper, compile-time errors in your code stemming from new operation ID values will arise and need to be addressed.\n2018-06-04\nAnnouncement: Changes Planned for Accounts Payable, General Ledger, and Treasury APIs\nWe will implement new operation ID values in the OpenApi (fka Swagger) definitions for several SKY APIs. This change will improve client-side tooling support for code generation by making these values more deterministic and friendlier across different languages. Going forward, we expect high stability of these values (meaning, we won’t need to change them again).\nNote that any existing code that has been deployed will continue to function with no problems, since we are not changing any routes or parameters. If you make use of client-side generated code and want to regenerate your client wrapper, you’ll need to fix any compile-time errors in your code stemming from new method names.\nApril\n2018-04-26\nChanged For the Bank account (List) endpoint, the bank_name field is now included in the list of returned objects separate from account_name.\nThe Bank account register (List), Checks (List), Deposits (List), and Adjustments (List) endpoints now return the transaction_id field. This field helps to ensure that \"register\" items correctly map to checks, deposits, and adjustments. January\n2018-01-17\nChanged\nFor the Checks (List) endpoint, we made the following changes: The new payee field is now returned in the listed objects.\nThe list is now sorted by check number (ascending).\nWe added the starting_check_number and ending_check_number variables to the check filter. When only starting_check_number is provided, a list of checks (starting with that number and higher) is returned. When only ending_check_number is provided, a list of checks (less than or equal to that number) is returned. When both variables are provided, a range of checks is returned. 2017\n2017-04-25\nNew\nThe Treasury API has been released for a public beta. This API handles information related to bank accounts, including related entities such as adjustments, checks, and deposits.\nThe initial release contains endpoints to retrieve a list of all bank accounts and all bank account transactions, and to manage deposits, cash receipts, and adjustments. For more information, check out the entity and endpoint references. "
    }
   ],
   "text": " Changelog Shared Monitor this page to keep up with common changes shared across all our APIs. Accounts Payable Monitor this page to keep up with the latest changes to the Accounts Payable API. Constituent Monitor this page to keep up with the latest changes to the Constituent API. Fundraising Monitor this page to keep up with the latest changes to the Fundraising API. General Ledger Monitor this page to keep up with the latest changes to the General Ledger API. Gift Monitor this page to keep up with the latest changes to the Gift API. Opportunity Monitor this page to keep up with the latest changes to the Opportunity API. Treasury Monitor this page to keep up with the latest changes to the Treasury API. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Accounts Payable",
   "description": "Information on additions and changes for the Accounts Payable API.",
   "order": 75,
   "published": true,
   "showInNav": true,
   "icon": "fa fa-university",
   "back_to_top": true,
   "title": "Accounts Payable Changelog",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Support Changelog Ap",
   "abspath": "support/changelog/ap/index.md",
   "uri": "/support/changelog/ap/",
   "text": " Accounts Payable\nMonitor this page to keep up with the Accounts Payable API latest changes and SKY API service releases.\n2018-07-19\nNew\nAdded the following endpoint: Operation Method Route Vendor attachment POST /vendors/attachments The Vendor attachment endpoint supports physical attachments and link attachments. Note the shape of the request in JSON form: { \"parent_id\": 0, \"name\": \"string\", \"url\": \"string\", \"type\": \"Link\", \"media_type\": \"string\", \"file\": { \"ContentLength\": 0, \"ContentType\": \"string\", \"FileName\": \"string\", \"InputStream\": { \"CanRead\": true, \"CanSeek\": true, \"CanTimeout\": true, \"CanWrite\": true, \"Length\": 0, \"Position\": 0, \"ReadTimeout\": 0, \"WriteTimeout\": 0 } }\n} The type field accepts Physical or Link but defaults to Link.\nThe url field is required for link attachments but not for physical attachments.\nThe file field is HttpPostedFileBase. It is required for physical attachments but not for link attachments.\nFor physical attachments, requests must be multipart/form-data. For example: public static Task PostMultiPartDataFormAsync(this HttpClient client, string route, Attachment content) { var httpContent = new MultipartFormDataContent(); var streamContent = new StreamContent(content.File.InputStream); var ContentDisposition = new ContentDispositionHeaderValue(\"form-data\"); ContentDisposition.Name = \"File\"; ContentDisposition.FileName = content.File.FileName; streamContent.Headers.ContentDisposition = ContentDisposition; streamContent.Headers.ContentType = new MediaTypeHeaderValue(content.File.ContentType); httpContent.Add(streamContent); httpContent.Add(new StringContent(content.ParentId.ToString()), \"ParentId\"); httpContent.Add(new StringContent(content.Name), \"Name\"); httpContent.Add(new StringContent(content.Type.ToString()), \"Type\"); httpContent.Add(new StringContent(content.MediaType.ToString()), \"MediaType\"); var request = new HttpRequestMessage(HttpMethod.Post, route) { Content = httpContent }; return SendAsync(client, request); } In application/json requests, field names must use snake casing such as parent_id and media_type, whereas in multipart/form-data requests, field names must use camel case, such as ParentId and MediaType.\nLink attachments should be sent as application/json formatted requests with the file field omitted.\nIf the file field is populated in application/json formatted requests, the request fails unless type is set to Link because then the request ignores the file. June\n2018-06-28\nNew\nAdded the following endpoint: Operation Method Route Transaction code (List) GET /transactioncodes Transaction code value (List) GET /transactioncodes/{transaction_code_id}/value These endpoints currently exist in the General Ledger API. We decided to include them in the Accounts Payable API (and Treasury API) because values from those endpoints may be required to create Accounts Payable (or Treasury) records.\n2018-06-12\nAnnouncement: Changes for Accounts Payable API\nWe implemented new operation ID values in the OpenApi (fka Swagger) definitions for all endpoints in the Accounts Payable API. Note that any existing code relying on these endpoints will continue to function, since all routes and parameters are unchanged. However, if you make use of client-side generated code and want to regenerate your client wrapper, compile-time errors in your code stemming from new operation ID values will arise and need to be addressed.\n2018-06-04\nAnnouncement: Changes Planned for Accounts Payable, General Ledger, and Treasury (Beta) APIs\nWe will implement new operation ID values in the OpenApi (fka Swagger) definitions for several SKY APIs. This change will improve client-side tooling support for code generation by making these values more deterministic and friendlier across different languages. Going forward, we expect high stability of these values (meaning, we won’t need to change them again).\nNote that any existing code that has been deployed will continue to function with no problems, since we are not changing any routes or parameters. If you make use of client-side generated code and want to regenerate your client wrapper, you’ll need to fix any compile-time errors in your code stemming from new method names.\n2018-06-01\nNew\nAdded the following endpoint: Operation Method Route Invoice edit PATCH /invoices/{invoice_id} With the new endpoint, note the following: You can edit the following properties of an existing invoice:\nvendor_id\nvendor_name\ninvoice_number\ninvoice_date\ndue_date\ndescription\nstatus\ninvoice_payment_details\npost_status\npost_date\ndistribution_discounts\ndistributions\ncustom_fields You cannot edit Posted or Paid invoices.\nYou cannot update an invoice to change the status to Posted, Paid, or Partially Paid.\nIf you omit fields from PATCH requests, the endpoint does not edit them with default values. For example, the following code sample only edits the description property.{ “description”: \"edited description\"\n} April\n2018-04-20\nChanged\nWe made several changes to the Invoice attachment endpoint: The endpoint now supports Physical attachments (previously only supported Link attachments)\nNote the shape of the request in JSON form: {\n\"parent_id\": 0,\n\"name\": \"string\",\n\"url\": \"string\",\n\"type\": \"Link\",\n\"media_type\": \"string\",\n\"file\": { \"ContentLength\": 0, \"ContentType\": \"string\", \"FileName\": \"string\", \"InputStream\": { \"CanRead\": true, \"CanSeek\": true, \"CanTimeout\": true, \"CanWrite\": true, \"Length\": 0, \"Position\": 0, \"ReadTimeout\": 0, \"WriteTimeout\": 0 } }\n} The type field now accepts Physical (defaults to Link if not provided)\nA url is not required for Physical attachments\nA file must be provided for Physical attachments\nA url must be provided for Link attachments\nThe new file field is HttpPostedFileBase The request must be a multipart/form-data request. For example, public static Task PostMultiPartDataFormAsync(this HttpClient client, string route, Attachment content) { var httpContent = new MultipartFormDataContent(); var streamContent = new StreamContent(content.File.InputStream); var ContentDisposition = new ContentDispositionHeaderValue(\"form-data\"); ContentDisposition.Name = \"File\"; ContentDisposition.FileName = content.File.FileName; streamContent.Headers.ContentDisposition = ContentDisposition; streamContent.Headers.ContentType = new MediaTypeHeaderValue(content.File.ContentType); httpContent.Add(streamContent); httpContent.Add(new StringContent(content.ParentId.ToString()), \"ParentId\"); httpContent.Add(new StringContent(content.Name), \"Name\"); httpContent.Add(new StringContent(content.Type.ToString()), \"Type\"); httpContent.Add(new StringContent(content.MediaType.ToString()), \"MediaType\"); var request = new HttpRequestMessage(HttpMethod.Post, route) { Content = httpContent }; return SendAsync(client, request); } JSON requests for url attachments will work the same as they did prior to this release\nJSON requests containing files will fail or ignore the file if type is set to link\nJSON request field names need to use snake casing, such as parent_id and media_type whereas multipart/form-data requests need to use camel case, such as ParentId and MediaType March\n2018-03-30\nChanged\nFor the Invoice (List) endpoint, we made the following changes: The payment_method of the invoice is now returned in the listed objects, which includes EFT, Credit card, Bank draft, or Check.\nThe payment_method field can also be filtered during search. January\n2018-01-17\nChanged\nFor the Invoice (List) endpoint, we added the delete, paid, and partially paid statuses.\n2017\n2017-11-17\nChanged\nAdded additional fields to the following endpoint: Operation Method Route Payment term (list) GET /paymentterms 2017-10-12\nNew\nAdded the following endpoint: Operation Method Route Payment term (list) GET /paymentterms 2017-09-28\nChanged\nFor the following endpoint, we added the payment_default field which includes credit limit, payment terms, and bank account information: Operation Method Route Vendors GET /vendors 2017-06-30\nNew\nAdded the following endpoints: Operation Method Route Invoice attachment POST /invoices/attachments Media type (List) GET /mediatypes 2017-05-05\nNew\nAdded the following endpoints: Operation Method Route Invoice 1099 amount GET /invoices/{invoice_id}/1099amount Invoice 1099 box numbers GET /invoices/{invoice_id}/1099boxnumber 2016\n2016-12-06\nNew Added the following endpoints: Operation Method Route Invoice custom field (List) GET /invoices/customfields Vendor custom field (List) GET /vendors/customfields Added new custom field entities to the following endpoints: Operation Method Route Invoice POST /invoices Invoice GET /invoices/{invoice_id} Vendor POST /vendors Vendor GET /vendors/{vendor_id} Changed\nFor consistency across APIs, all responses to GET endpoints that return collections now return an object with \"count\" and \"value\" properties. The following endpoints are affected: Operation Method Route Address (List) GET /vendors/{vendor_id}/addresses Contact method (List) GET /vendors/{vendor_id}/addresses/{address_id}/contactmethods Note (List) GET /vendors/{vendor_id}/notes 2016-11-14\nAnnouncement: Breaking Changes Planned for Accounts Payable API\nFor consistency across APIs, we will implement the following change:\nAll responses to GET endpoints that return collections will return an object with \"count\" and \"value\" properties. The following endpoints are affected: Operation Method Route Address (List) GET /vendors/{vendor_id}/addresses Contact method (List) GET /vendors/{vendor_id}/addresses/{address_id}/contactmethods Note (List) GET /vendors/{vendor_id}/notes 2016-10-12\nChanged\nFor consistency across APIs, we implemented the following changes: All responses to POST requests changed from \"RecordId\" to \"record_id\".\nThe following endpoints and their associated fields changed from CamelCase to snake_case: Operation Method Route Invoice GET /invoice Invoice POST /invoice 2016-10-04\nAnnouncement: Breaking Changes Planned for Accounts Payable API\nFor consistency across APIs, we will implement the following changes: All responses to POST requests will change from \"RecordId\" to \"record_id\".\nThe following endpoints and their associated fields will change from CamelCase to snake_case: Operation Method Route Invoice GET /invoice Invoice POST /invoice 2016-08-12\nBreaking Change\nWe changed the default and maximum record limits on the following search and list endpoints. The default is now 100 records, and the maximum is 500 records. Operation Method Route Vendor (List) GET /vendors Invoice (List) GET /invoices 2016-08-04\nNew\nThe Accounts Payable API is now available. Use this API to manage accounts payable, including vendors and invoices. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Constituent",
   "description": "Information on additions and changes for the Constituent API.",
   "order": 100,
   "published": true,
   "showInNav": true,
   "icon": "fa fa-user",
   "back_to_top": true,
   "title": "Constituent Changelog",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Support Changelog Constituent",
   "abspath": "support/changelog/constituent/index.md",
   "uri": "/support/changelog/constituent/",
   "text": " Constituent\nMonitor this page to keep up with the Constituent API latest changes and SKY API service releases.\n2018-07-03\nNew\nAdded the following endpoint: Operation Method Route Membership list (All constituents) GET /memberships Added a read-only fundraiser_status property to the constituent entity. Added a fundraiser_status filter to the Constituent list endpoint. Added an optional search_field query parameter to the Constituent (Search) endpoint. It indicates the property to search with the provided search_field filter and returns the exact match if available. Currently, this filter only accepts lookup_id. Added an optional computed_status query parameter to the Action list (All constituents) endpoint. It accepts a single value of Open, Completed, or PastDue and returns constituent actions that match the filter. Added an optional status_code query parameter to the Action list (All constituents) endpoint. The parameter can be specified multiple times to imply a logical OR and filters the results to only include the items associated with the specified status codes. For example, status_code=Pending&status_code=Sent returns actions with a status of either Pending and Sent. 2018-06-01\nAnnouncement: Changes for Constituent API\nWe implemented new operation ID values in the OpenApi (fka Swagger) definitions for all endpoints in the Constituent API. Note that any existing code relying on these endpoints will continue to function, since all routes and parameters are unchanged. However, if you make use of client-side generated code and want to regenerate your client wrapper, compile-time errors in your code stemming from new operation ID values will arise and need to be addressed.\nMay\n2018-05-25\nNew\nWe added the following properties to the action entity: The new computed_status property computes the status based on the completed and date properties when the system is not configured to use custom action statuses. Otherwise, the field calculates the status based on the action's date property and whether the status property is configured as \"Completed.\"\nThe new status_code property specifies the action status code. Available values are in the Action Status table. This property is only returned when the system is configured to use custom action statuses. These properties are available in the Action (Get), Action list (All constituents), and Action list (Single constituent) endpoints.\nAnnouncement: Changes Planned for Constituent, Fundraising (Beta), Gift (Beta), and Opportunity (Beta) APIs\nWe will implement new operation ID values in the OpenApi (fka Swagger) definitions for several SKY APIs. This change will improve client-side tooling support for code generation by making these values more deterministic and friendlier across different languages. Going forward, we expect high stability of these values (meaning, we won’t need to change them again).\nNote that any existing code that has been deployed will continue to function with no problems, since we are not changing any routes or parameters. If you make use of client-side generated code and want to regenerate your client wrapper, you’ll need to fix any compile-time errors in your code stemming from new method names.\n2018-05-15\nNew\nAdded the following endpoint: Operation Method Route Document (Create) POST /documents 2018-05-11\nAnnouncement: Released Action Category Enhancement for Constituent API\nWe updated the Constituent API Action category value from Phone Call to Phone call. This change impacts the Action (Get) and Action list (Single constituent) endpoints.\nApril\n2018-04-25\nAnnouncement: Future Enhancement Planned for Constituent API\nWe will update the Constituent API Action category value from Phone Call to Phone call for consistency across all endpoints. This change will impact the Action (Get) and Action list (Single constituent) endpoints.\n2018-04-13\nNew\nAdded the following endpoint: Operation Method Route Fundraiser assignment list (Single constituent)* GET /constituents/{constituent_id}/fundraiserassignments * We deprecated the Fundraiser list (Single constituent) endpoint and replaced it with the Fundraiser assignment list (Single constituent) endpoint. We will continue to support deprecated endpoint for v1 of the Constituent API, but we recommend transitioning to the new endpoint for a more robust and consistent response.\n2018-04-06\nChanged\nWe corrected an issue with the last_modified parameter on the Relationship list (All constituents) endpoint, where returned results and the provided sort_token were keying off of date_added instead of date_modified.\nAnnouncement: Released Display Name Enhancement for Constituent API\nConstituent names in the API now reflect the upcoming display name configuration setting in Raiser's Edge NXT. This initially affects the default name values on the Constituent GET, search, and list endpoints, and on the Relationship GET and list endpoints. Moving forward, display name settings will be configurable from the web view, and the API will reflect any changes to the display name format.\nIn addition, when a supervisor user changes the display name configuration settings, the date_modified value will increment on all constituents in the organization's database. This impact will not occur until display name configuration options are available in the Raiser's Edge NXT web view, slated for release in mid-April.\nAnnouncement: Released Solicit Code Security Enhancement for Constituent API\nThe Constituent API now respects the new Solicit Code security setting available in the Raiser's Edge NXT database view. This affects the Communication Preference GET, POST, PATCH, and DELETE endpoints.\nMarch\n2018-03-29\nNew\nAdded the following endpoints: Operation Method Route Action custom field category details* GET /actions/customfields/categories/details Constituent custom field category details* GET /constituents/customfields/categories/details * We deprecated the Action custom field categories endpoints and Constituent custom field categories endpoints and replaced them with the Action custom field category details and Constituent custom field category details endpoints. We will continue to support deprecated endpoints for v1 of the Constituent API, but we recommend transitioning to the new endpoints for a more robust and consistent response.\nAnnouncement: Future Enhancement Planned for Constituent API\nRaiser's Edge NXT recently introduced a new security setting in the database view for Solicit Codes. The API will soon reflect this setting for consistency, and that will affect the Communication Preference GET, POST, PATCH, and DELETE endpoints.\n2018-03-20\nAnnouncement: Future Enhancement Planned for Constituent API\nRaiser's Edge NXT will soon introduce a new configuration setting for how to display names in the product. The API will soon reflect this configuration option for consistency. This will affect constituent name properties on the Constituent GET, search, and list endpoints, and on the Relationship GET and list endpoints.\nFebruary\n2018-02-21\nNew\nThe optional strict_search query parameter is now available on the Constituent (Search) endpoint. It indicates whether to exclude constituents that sound like the search criteria but are spelled differently. By default, this parameter is set to false.\n2018-02-02\nChanged The Address list (All constituents), Email address list (All constituents), Online presence list (All constituents), and Phone list (All constituents) endpoints now include an option to filter based on their associated constituents. The optional constituent_id query parameter, which can be specified multiple times to imply a logical OR, filters the results to only include the items associated with the specified constituent record IDs. For example, &constituent_id=1242&constituent_id=385 filters the results to only include results associated with two constituent records: \"1242\" and \"385.\"\nWe updated the value filter on the Constituent custom field list (All constituents) endpoint to support filtering on fuzzy date values. The endpoint documentation describes how to filter on fuzzy dates. January\n2018-01-25\nChanged We added the date property to the attachment entity.\nTo remove confusion with the gift entity in the Gift API, we have renamed the Constituent gift entity to Giving Summary. 2018-01-19\nNew\nAdded the following endpoint: Operation Method Route Attachment tags GET /attachmenttags Changed\nWe resolved an issue with the Action (Create) and Action (Edit) endpoints. The 255-character limit is now correctly applied to summary instead of description on the action entity.\n2018-01-17\nNew\nAdded the following endpoints: Operation Method Route Alias (Edit) PATCH /aliases/{alias_id} Alias (Delete) DELETE /aliases/{alias_id} 2018-01-11\nNew\nAdded the following endpoints: Operation Method Route Name format summary GET /constituents/{constituent_id}/nameformats/summary Name format (Create) POST /nameformats Name format (Edit) PATCH /nameformats/{name_format_id} Name format (Delete) DELETE /nameformats/{name_format_id} Primary name format (Create) POST /primarynameformats Primary name format (Edit) PATCH /primarynameformats/{primary_name_format_id} Primary name format (Delete) DELETE /primarynameformats/{primary_name_format_id} Changed The Name format list (Single constituent) endpoint has been replaced by the Name format summary endpoint.\n2017\n2017-12-20\nNew Operation Method Route Education list (All constituents) GET /educations Changed The Relationship list (Single constituent) and Relationship list (All constituents) endpoints now return the reciprocal_relationship_id property on the relationship entity.\nThe Constituent custom field list (All constituents) endpoint now includes options to filter custom fields based on their categories and values. The optional category and value parameters filter the results to only custom fields with the specified categories and values.\nThe Currency configuration endpoint now returns the iso_alpha_2_code property on the currency configuration entity. 2017-12-07\nNew Operation Method Route Alias list (Single constituent) GET /constituents/{constituent_id}/aliases Alias (Create) POST /aliases Name format configuration list GET /nameformatconfigurations Name format types GET /nameformattypes 2017-12-01\nNew\nAdded the following endpoints: Operation Method Route Relationship list (All constituents) GET /relationships Alias types GET /aliastypes Changed The Relationship list (Single constituent) endpoint now returns the date_added and date_modified properties on the relationship entity. 2017-11-09\nNew\nAdded the following endpoint: Operation Method Route Note list (All constituents) GET /notes Changed The Note (Get) and Note list (Single constituent) endpoints now return the date_added and date_modified properties on the note entity.\nThe Constituent (Search) endpoint now returns the inactive and deceased properties on the search result entity.\nThe Constituent (Search) endpoint also now returns suffix information in the name field when constituent records include suffix or suffix_2.\nThe optional include_inactive query parameter is now available on Constituent (Search) endpoint to indicate whether to include inactive constituents. By default, this parameter is set to true. 2017-10-24\nAnnouncement: Breaking Changes Planned for Constituent API\nWe will change the name format entity to support custom name formats and provide a more robust entity.\nAdditionally, we will update the Name format list (Single constituent) endpoint to support the next generation of name formats. Currently, the endpoint returns only the primary addressee and primary salutation for a constituent. With our change, it will also return the other non-primary name formats as part of the updated entity model mentioned above.\n2017-10-20\nChanged\nThe Constituent list endpoint now includes an option to filter constituents based on their record IDs. The optional constituent_id query parameter, which can be specified multiple times to imply a logical OR, filters the results to only constituents with the specified IDs. For example, &constituent_id=1242&constituent_id=385 filters the results to only two constituents records: \"1242\" and \"385.\"\n2017-08-28\nNew\nAdded the following endpoint: Operation Method Route Action locations GET /actionlocations Changed On the Constituent (Create) endpoint, we updated the gender property to set the default value to unknown when the property is not supplied in the request body.\nWe added the start_time, end_time, location, priority, direction, and outcome properties to the action entity.\nThe completed_date property on the action entity is now writable on the Action (Create) and Action (Edit) endpoints. 2017-08-08\nNew\nAdded the following endpoint: Operation Method Route Relationship (Edit) PATCH /relationships/{relationship_id} 2017-06-28\nChanged\nWe added the start, end, seasonal_start, and seasonal_end properties to the address entity.\n2017-06-27\nChanged\nWe updated the concept of inactive addresses to be consistent across address endpoints and better aligned with the web interface. Now, addresses are only marked inactive if their end_date is in the past.\n2017-05-17\nNew\nAdded the following endpoint: Operation Method Route Action list (All constituents) GET /actions 2017-05-12\nChanged\nWe added the comment property to the relationship entity.\n2017-05-09\nChanged The Communication preference (Edit) endpoint now supports patching the start and end fields on a communication preference. The Action (Get) and Action list (Single constituent) endpoints now return the date_added and date_modified properties on the action entity. 2017-04-25\nNew\nAdded the following endpoints: Operation Method Route Relationship POST /constituent/constituents/relationships Relationship types GET /constituent/constituents/relationshiptypes Organization contact types GET /constituent/constituents/organizationcontacttypes Changed\nGET operations such as Relationship list (Single constituent) that return relationship entities now return the following new properties: Property Type Description reciprocal_type string The reciprocal relationship type. Describes the constituent's relationship to the related constituent. For example, in a relationship between a male constituent and a female sibling, the reciprocal relationship type would be brother. Available values are the entries in the Relationships table. is_spouse boolean Indicates whether the related constituent is the constituent's spouse. Only applies to relationships between individuals. is_organization_contact boolean Indicates whether the related individual represents the organization as a contact. Only applies to relationships between organizations and individuals. is_primary_business boolean Indicates whether the related organization is the individual's primary business. Only applies to relationships between organizations and individuals. organization_contact_type string The contact type that provides context for interactions with the related individual who represents the organization as a contact. Available values are the entries in the Contact Types table. Only applies to relationships between organizations and individuals. position string The individual's position in the organization. Only applies to relationships between organizations and individuals. 2017-04-20\nChanged The date_added parameter on the Constituent list endpoint now returns a sort_token on the next_link URL to enable pagination for stable data syncing.\nThe Constituent list endpoint now includes a sort parameter to sort constituents based on specified fields. For example, sort=date_modified,-last returns constituents in ascending order based on the date_modified field and then orders constituents with the same last-modified date in descending order based on their last names. If the sort parameter provides only the date_modified field or only the date_added field, then it returns a sort_token on the next_link URL. 2017-04-06\nChanged The Constituent list endpoint now populates the marital_status property by default. 2017-02-23\nChanged The Constituent list endpoint now includes an optional custom_field_category parameter to retrieve constituents only if their active custom fields match specified custom field categories.\nThe Fundraiser list (Single constituent) endpoint now returns the appropriate value for the constituent_id field. 2017-02-09\nChanged The major and minor properties on the education entity have been updated to return an array of strings. They have been renamed majors and minors.\nThe subject_of_study property on the education entity is no longer returned in the major property. Instead, it uses a dedicated property for UK-formatted databases.\nThe Address (Create) endpoint no longer requires the country property. When country is not provided, the endpoint uses the organization's default country configuration.\nThe country property on the address entity now accepts a country ID, name, or abbreviation. The property uses preferential selection to match against ID first, then name, and then abbreviation.\nThe Ratings list (Single constituent) endpoint now includes an optional most_recent_only parameter to retrieve only the most recent rating for each category. New\nAdded the following endpoints: Operation Method Route Countries (Get) GET /countries Education (Create) POST /educations Education (Edit) PATCH /educations/{education_id} Education (Delete) DELETE /educations/{education_id} Education schools (Get) GET /educations/schools Education types (Get) GET /educations/types Education statuses (Get) GET /educations/statuses Education subjects (Get) GET /educations/subjects Education degrees (Get) GET /educations/degrees Education departments (Get) GET /educations/departments Education degree classes (Get) GET /educations/degreeclasses Education faculties (Get) GET /educations/faculties 2017-01-31\nAnnouncement: Breaking Changes Planned for Constituent API\nWe are updating some properties on the education entity to improve overall feature parity and to support upcoming POST and PATCH education endpoints in the Constituent API. The major and minor properties will both be updated to return an array of strings. They will also be renamed majors and minors.\nThe subject_of_study property will no longer be returned in the major property. Instead, it will use a dedicated property for UK-formatted databases. 2017-01-11\nChanged\nOn the Address (Create) endpoint, we updated the do_not_mail and preferred properties to set the default value to false when the properties are not supplied in the request body.\n2017-01-10\nChanged\nWe added the campus, known_name, and social_organization properties to the education entity.\n2017-01-06\nChanged We updated the Constituent custom field list (Single constituent) endpoint to populate the date_added and date_modified properties. We updated the Constituent code list (Single constituent) endpoint to populate the inactive, date_added, and date_modified properties. 2016\n2016-12-12\nNew\nAdded the following endpoint: Operation Method Route Rating category values (Get) GET /ratings/categories/values Changed We changed the format of the name property on the Constituent (Get) endpoint to \"FirstName LastName\" for consistency with the Constituent list endpoint. We updated the Email address (Edit) and Online presence (Edit) endpoints to respect the type property. We changed the Rating (Create) endpoint to require the \"source\" property for categories that have a source. 2016-11-23\nChanged We updated the Constituent (Create), Constituent (Edit), Constituent (Get), and Constituent list endpoints to ensure that the lookup_id, inactive, and gives_anonymously properties are respected and populated. We updated the Constituent (Edit) endpoint to appropriately respect Constituent Biographical Edit permissions. 2016-11-16\nChanged\nThe Constituent list endpoint now includes an option to filter constituents based on their associated constituent codes. The optional constituent_code query parameter returns constituents if any of the specified constituent codes match any of their active constituent codes. For example, constituent_code=Board Member&amp;constituent_code=Volunteer returns constituents with either \"Board Member\" or \"Volunteer\" constituent codes.\n2016-11-14\nNew\nAdded the following endpoints: Operation Method Route Constituent code list (All Constituents) GET /constituents/constituentcodes Constituent custom field list (All constituents) GET /constituents/customfields Changed We renamed all existing list endpoints to implement a new naming convention that better indicates whether the endpoints return data for a single constituent or for all constituents. Endpoints that return data for a single constituent are now postfixed with (Single constituent). Endpoints that return data for all constituents are now postfixed with (All constituents). The Address list (All constituents) endpoint no longer includes inactive addresses by default. To include inactive addresses, use the optional include_inactive parameter in the request. The Address list (All constituents) endpoint now populates the formatted_address property. We updated the following endpoints to appropriately respect constituent record-level security: Operation Method Route Address (List) GET /addresses Email address (List) GET /emailaddresses Online presence (List) GET /onlinepresences Phone (List) GET /phones 2016-10-20\nNew\nAdded the following endpoints: Operation Method Route Address (List)* GET /addresses Email address (List)* GET /emailaddresses Online presence (List)* GET /onlinepresences Phone (List)* GET /phones * The new endpoints assume the names of existing endpoints, which were renamed in the endpoint reference. The previous Address (List) is now Constituent address (List); the previous Email address (List) is now Constituent email address (List); the previous Online presence (List) is now Constituent online presence (List); and the previous Phone (List) is now Constituent phone (List). Changed\nWe added the date_added and date_modified properties to the address, email address, online presence, and phone entities.\n2016-10-17\nChanged\nThe fundraisers property on the action entity now contains an array of strings populated with the constituent_id of fundraisers instead of an array of action fundraiser entities.\nNew\nAdded the following endpoints: Operation Method Route Action custom field (List) GET /actions/{action_id}/customfields Action custom field (Create) POST /actions/customfields Action custom field (Edit) PATCH /actions/customfields/{custom_field_id} Action custom field (Delete) DELETE /actions/customfields/{custom_field_id} Action custom field categories (Get) GET /actions/customfields/categories Action custom field category values (Get) GET /actions/customfields/categories/values 2016-10-03\nNew\nAdded the following endpoints: Operation Method Route Prospect status (Get) GET /constituents/{constituent_id}/prospectstatus Fundraiser (List) GET /constituents/{constituent_id}/fundraisers 2016-09-28\nChanged The Constituent (List) endpoint now includes the option to select specific properties on its return object by using the optional fieldsquery parameter. This can reduce the response payload size and improve the response time.\nThe Constituent (List) endpoint no longer returns deceased constituents by default. Instead, they are included by setting the new include_deceased option to true.\nThe Communication preference (List) endpoint can now be paginated using the new limit and offset query parameters. If not specified, the default limit is 10000.\nWe changed the following query string parameters to snake case:\nincludeInactive is now include_inactive on Constituent (List), Email address (List), Online presence (List), Phone (List), Rating (List), Rating categories (Get), and Rating sources (Get).\ncategoryName is now category_name on Constituent custom field category values (Get).\nsearchText is now search_text on Constituent (Search). 2016-09-27\nAnnouncement: Breaking Changes Planned for Constituent API\nWe will change the fundraisers property on the action entity so that it contains a list of strings populated with the constituent_id of fundraisers instead of an array of action fundraiser entities.\n2016-09-23\nAnnouncement: Breaking Changes Planned for Constituent API\nWe will change the query string parameter includeInactive to include_inactive on the Constituent (List) endpoint.\n2016-09-14\nAnnouncement: Breaking Changes Planned for Constituent API The Constituent (List) endpoint will no longer return deceased constituents by default. Instead, they will be included by setting a new include_deceased option to true.\nWe will change the following query string parameters to snake case:\nincludeInactive will be include_inactive on Email address (List), Online presence (List), Phone (List), Rating (List), Rating categories (Get), and Rating sources (Get).\ncategoryName will be category_name on Constituent custom field category values (Get).\nsearchText will be search_text on Constituent (Search). New\nAdded the following endpoints: Operation Method Route Rating sources (Get) GET /ratings/sources Rating categories (Get) GET /ratings/categories Action attachment (Edit) PATCH /actions/attachments/{attachmentId} Action attachment (Delete) DELETE /actions/attachments/{attachmentId} Constituent attachment (Edit) PATCH /constituents/attachments/{attachmentId} Constituent attachment (Delete) DELETE /constituents/attachments/{attachmentId} Changed\nNew tags included in the request will be automatically added to the Document Tags table when adding or updating attachments.\n2016-09-07\nNew\nAdded the following endpoints: Operation Method Route Communication preference (Edit) PATCH /communicationpreferences/{communicationPreferenceId} Rating (Create) POST /ratings Rating (Edit) PATCH /ratings/{ratingId} Rating (Delete) DELETE /ratings/{ratingId} Changed\nWe added the lookup_id property to the search results entity.\n2016-09-02\nChanged\nAll POST endpoints now return a JSON object containing the id, in the form { \"id\": \"123\" }, instead of the previous string response.\n2016-08-31\nNew\nAdded the following endpoints: Operation Method Route Action attachment (List) GET /actions/{actionId}/attachments Action attachment (Create) POST /actions/attachments Changed We changed the URL for the Constituent Attachment (Create) endpoint to /constituents/attachments. The constituentId is now expected in the request body as parent_id.\nThe Constituent (Create) endpoint now supports adding a constituent with the following child entity properties: address, phone number, email address, and online presence.\nWe updated the Constituent (Edit) endpoint to include marital_status, deceased_date, former_name, title_2, and suffix_2 as available PATCH request body properties. 2016-08-29\nAnnouncement: Breaking Changes Planned for Constituent API\nAll POST endpoints will now return a JSON object containing the id, in the form { \"id\": \"123\" }, instead of the current string response.\n2016-08-26\nChanged We renamed the proposal_id property to opportunity_id on actions to be consistent with product verbiage. The Constituent (List) endpoint no longer includes inactive constituents by default. To include inactive constituents, use the optional includeInactive parameter in the request. Announcement: Breaking Changes Planned for Constituent API\nWe will change the URL for the Constituent Attachment (Create) endpoint to /constituents/attachments.\n2016-08-22\nNew\nAdded the following endpoints: Operation Method Route Currency configuration (Get) GET /currencyconfiguration Changed The data type assigned to the value property on the rating entity was changed from a string to an object. Previously, all values were returned as strings that needed to be parsed (by the requestor) into the intended types. Currently, the rating value will be returned with its data type intact based on the type with the following mapping: Type Description boolean Defines the rating value as a boolean JSON data type. codetable Defines the rating value as a string JSON data type that refers to a code table entry. currency Defines the rating value as a number JSON data type. datetime Defines the rating value as a string JSON data type in ISO-8601 format: 2015-09-18T00:00:00. number Defines the rating value as a number JSON data type. text Defines the rating value as a string JSON data type. We corrected an issue with the postal_code filter within the Constituent (List) endpoint where incorrect values were returned if the postal codes filter listed multiple postal codes that were separated by commas or if postal codes contained leading space characters. Announcement: Breaking Changes Planned for Constituent API We will rename the constituent_id property to parent_id to support additional attachment areas such as action attachments.\nWe will rename the proposal_id property to opportunity_id on actions to be consistent with product verbiage. 2016-08-18\nAnnouncement: Breaking Changes Planned for Constituent API\nThe Constituent (List) endpoint will no longer include inactive constituents by default. To include inactive constituents, use the optional includeInactive parameter in the request.\n2016-08-16\nAnnouncement: Breaking Changes Planned for Constituent API\nThe data type assigned to the value property on the rating entity will be changed from a string to an object. As it stands today, all values are returned as a string, which must then be parsed (by the requestor) into the intended type. After release, the Rating value will be returned with its data type intact.\n2016-08-11\nNew\nAdded the following endpoints: Operation Method Route Communication preference (Create) POST /communicationpreferences Communication preference (Delete) DELETE /communicationpreferences/{communicationPreferenceId} Communication preferences (Get) GET /communicationpreferences Changed We added start and end to the communication preference entity to represent optional start and end dates.\nWe added the ability to retrieve inactive rating records by including a new, optional includeInactive parameter in the request. 2016-08-03\nNew\nAdded the following endpoints: Operation Method Route Communication preference (List) GET /constituents/{constituentId}/communicationpreferences Changed We removed boolean_value, code_table_value, constituent_id_value, date_value, fuzzy_date_value, currency_value, numeric_value, text_value and replaced them with a single value property for use with any type on the custom field entity.\nWe added the gpa, class_of_degree, faculty, department, and registration_number properties to the education entity.\nWe added the ability to paginate search results by including a new, optional limit and offset parameters in the request.\nWe added the ability to retrieve inactive address records by including a new, optional includeInactive parameter in the request. 2016-07-29\nAnnouncement: Breaking Changes Planned for Constituent API We will remove boolean_value, code_table_value, constituent_id_value, date_value, fuzzy_date_value, currency_value, numeric_value, text_value and replace them with a single value property for use with any type on the custom field entity.\nThis change is planned to take effect on Monday, August 1st. 2016-07-27\nAdded the following endpoints: Operation Method Route Constituent (Edit) PATCH /constituents/{constituentId} 2016-07-22\nNew\nAdded the following endpoints: Operation Method Route Rating (List) GET /constituents/{constituentId}/ratings/ Constituent custom field (Create) POST /constituents/customfields/ Constituent custom field (Edit) PATCH /constituents/customfields/{customFieldId} Constituent custom field (Delete) DELETE /constituents/customfields/{customFieldId} Constituent custom field category values (Get) GET /constituents/customfields/categories/values Changed\nWe added the date_added, date_modified, title_2, suffix_2, marital_status, deceased_date properties to the constituent entity.\n2016-07-18\nNew\nAdded the following endpoint: Operation Method Route Constituent (Create) POST /constituents Changed\nWe removed the business property from the constituent entity.\n2016-07-07\nChanged We renamed kind to type and types to tags on the attachment entity.\nWe renamed nickname to preferred_name on the constituent entity. 2016-07-01\nNew\nAdded the following endpoints: Operation Method Route First gift (Get) GET /constituents/{constituentId}/givingsummary/first Latest gift (Get) GET /constituents/{constituentId}/givingsummary/latest Greatest gift (Get) GET /constituents/{constituentId}/givingsummary/greatest Constituent custom field categories (Get) GET /constituents/customfields/categories Titles (Get) GET /titles Suffixes (Get) GET /suffixes Marital statuses (Get) GET /maritalstatuses 2016-06-30\nAnnouncement: Breaking Changes Planned for Constituent API We will rename kind to type and types to tags on the attachment entity.\nWe will rename nickname to preferred_name on the constituent entity.\nThis change is planned to take effect on Wednesday, July 6. 2016-06-27\nNew Added the following endpoint: Operation Method Route Address (Edit) PATCH /addresses/{addressId} Added the ability to retrieve inactive email address, online presence, and phone records by including a new, optional includeInactive parameter in the request. 2016-06-20\nChanged\nWe updated the Constituent (List) endpoint to include a new, optional postal_code parameter which provides the ability to filter constituents by postal code based on their preferred address. The parameter value supports multiple postal codes separated by commas. Postal codes will match on a constituent if the preferred address postal code begins with one of the specified filter postal codes. For example, given the query postal_code=99577,10001, the response could contain constituents whose preferred address has a postal code of 99577-0727 or 10001.\n2016-06-15\nNew\nAdded the following endpoint: Operation Method Route Address (Delete) DELETE /addresses/{addressId} Changed\nWe added a versioning indicator to the Constituent API's base URL. Specifically, all new API requests must begin with https://api.sky.blackbaud.com/constituent/v1.\n2016-06-10\nAnnouncement: Breaking Changes Planned for Constituent API We will be adding a versioning indicator to the Constituent API's base URL. Specifically, all new API requests should begin with https://api.sky.blackbaud.com/constituent/v1.\nThis change is planned to take effect on Wednesday, June 15. 2016-06-09\nNew\nAdded the following endpoint: Operation Method Route Address (Create) POST /addresses 2016-06-06\nNew\nAdded the following endpoints: Operation Method Route Lifetime giving (Get) GET /constituents/{constituentId}/givingsummary/lifetimegiving Membership (List) GET /constituents/{constituentId}/memberships 2016-06-01\nNew\nAdded the following endpoints: Operation Method Route Action types (Get) GET /actiontypes Action status types (Get) GET /actionstatustypes 2016-05-27\nNew Added the following endpoints: Operation Method Route Note types (Get) GET /notetypes Added a General Ledger changelog to help you keep up with General Ledger API changes. 2016-05-24\nNew\nAdded the following endpoints: Operation Method Route Address types (Get) GET /addresstypes Changed\nWe renamed send_mail to do_not_mail on the address entity. Additionally, the boolean logic has been switched.\n2016-05-20\nAnnouncement: Breaking Changes Planned for Constituent API We will rename send_mail to do_not_mail on the address entity. Additionally, the boolean logic will be switched.\nWe will remove the business property from the constituent entity. New\nAdded the following endpoints: Operation Method Route Phone (Create) POST /phones Phone (Edit) PATCH /phones/{phoneId} Phone (Delete) DELETE /phones/{phoneId} Phone types (Get) GET /phonetypes Email address types (Get) GET /emailaddresstypes Online presence types (Get) GET /onlinepresencetypes Constituent code types (Get) GET /constituentcodetypes Changed\nWe implemented the following breaking changes: We removed the following address properties:\nprimary_business\nstart\nend\nseasonal\nseasonal_start\nseasonal_end\nin_season\nvalid We renamed the address to formatted_address. 2016-05-16\nAnnouncement: Breaking Changes Planned for Constituent API We will remove the following address properties: primary_business\nstart\nend\nseasonal\nseasonal_start\nseasonal_end\nin_season\nvalid We will remove the business property from the constituent entity. 2016-05-13\nNew We updated the Constituent (List) endpoint to include a new, optional date_added parameter which provides the ability to poll for recently added constituents since a specified date/time. The parameter value should consist of a URL encoded UTC datetime. When specified, the list is sorted by date added in ascending order. We updated the Constituent (List) endpoint to include a new, optional last_modified parameter which provides the ability to poll for recently changed constituents since a specified date/time. The parameter value should consist of a URL encoded UTC datetime. When specified, the list is sorted by last modified in ascending order.\nThe response includes a sort_token within the next_link property. sort_token represents a token filter for providing the next set of constituents, ordered by the last modified date. Note: The Constituent (List) endpoint returns data with an average latency of 30 minutes. 2016-05-06\nNew Added the following granular address properties: address_lines\ncity\nsuburb\nstate\npostal_code\ncounty\ncountry Addresses are returned by the following endpoints: Operation Method Route Constituent (Get) GET /constituents/{constituentId} Constituent (List) GET /constituents Address (List) GET /constituents/{constituentId}/addresses Added international address field support for the following countries. Field United States Canada United Kingdom Australia New Zealand address_lines city * suburb state ! postal_code county country * Australia - City or suburb data is returned with the city field for GET operations. Future endpoints will allow you to POST and PATCH address data. In these cases, you can use either the suburb or city properties, but not both at the same time. Providing both property values in future POST and PATCH operations will result in an error. ! Canada - Use the state property to track a Canadian Province Changed For consistency, constituent_id is included in the following entities: Address\nAttachment\nConstituent code\nEmail address\nOnline presence\nPhone\nCustom field\nName format\nProfile picture\nAction\nNote When editing, existing endpoints that previously used the PUT HTTP verb have been replaced with PATCH. PATCH can be used to update partial resources. For instance, when you only need to update one field of the resource. Impacted constituent related endpoints include: Operation New Method Route Action (Edit) PATCH /actions/{actionId} Constituent code (Edit) PATCH /constituentcodes/{constituentCodeId} Email address (Edit) PATCH /emailaddresses/{emailAddressId} Note (Edit) PATCH /notes/{noteId} Online presence (Edit) PATCH /onlinepresences/{onlinePresenceId} We made changes to the custom field entity: To better denote the fields that can represent the \"value\" of the custom field, we appended a _value suffix to the field name for the following fields: constituent_id_value\ndate_value\ntext_value\nnumber_value\ncurrency_value\nboolean_value\ncode_table_value\nfuzzy_date_value Renamed the constituent_id property to parent_id to avoid confusion with the constituent_id_value field and to facilitate the re-use of this type across other entities. The parent_id represents the parent object's identifier. For example, in the case of constituent custom fields, the parent_id represents the constituent identifier. Added date and comment properties. 2016-04-26\nAnnouncement: Breaking Changes Planned for Constituent API\nIn the coming days two breaking changes will be placed into effect: We will replace existing PUT endpoints to use PATCH, instead. Unlike PUT, PATCH can be used to update partial resources. For instance, when you only need to update one field of the resource. In this way the payload size is optimized. 2016-04-25\nNew Added the ability to create, edit, and delete email addresses: Operation Method Route Email address (Create) POST /emailaddresses Email address (Edit) PUT /emailaddresses/{emailAddressId} Email address (Delete) DELETE /emailaddresses/{emailAddressId} Added the ability to create and edit constituent codes: Operation Method Route Constituent code (Create) POST /constituentcodes Constituent code (Edit) PUT /constituentcodes/{constituentCodeId} Constituent code (Delete) DELETE /constituentcodes/{constituentCodeId} 2016-04-15\nNew\nAdded the ability to create, edit, and delete online presence entities: Operation Method Route Online presence (Create) POST /onlinepresences Online presence (Edit) PUT /onlinepresences/{onlinePresenceId} Online presence (Delete) DELETE /onlinepresences/{onlinePresenceId} 2016-04-08\nNew Added the ability to return a paginated list of constituents. For this release, the list will be ordered by name (last name for individuals, organization name for organizations). Operation Method Route Constituent (List) GET /constituents The endpoint supports the following the optional request parameters. Pagination is facilitated through the results via the top and skip parameters: Property Description top Optional. Integer. Represents the number of records to return. If not specified, the default is 100. The maximum allowed value is 500. skip Optional. Integer. Represents the number of records to skip. Changed Breaking change implemented for the Constituent API endpoints that return a collection of objects. This change allows us to be consistent in the representation of data collections and supports pagination for certain endpoints. See the 2016-03-31 changelog entry for a listing of affected endpoints. Constituent (Search) now supports the ability to search on an email address (same functionality as found in the RE NXT search feature). This expanded search will match against constituent email addresses when the searchText parameter is a valid email address. Note that we currently support exact match only. 2016-03-31\nAnnouncement: Breaking Changes Planned for Constituent API endpoints\nIn the coming weeks, we will be standardizing the shape of our responses that return a collection of objects. This standardization will allow us to be consistent across each endpoint as well as to facilitate some future enhancements around pagination within those endpoints. The new representation of a collection will be a JSON object with two properties, a count which represents the total number of records meeting the criteria and a value property which represents the array of items for the current paged response.\nThis change is scheduled for release by April 8, 2016. How a collection response is formed today (Phones used as an example):\n{ \"phones\": [ { \"id\": \"95\", \"type\": \"Home\", \"number\": \"303-997-3301\", \"do_not_call\": false, \"primary\": true, \"inactive\": false }, { \"id\": \"330\", \"type\": \"Home\", \"number\": \"(312) 997-3301\", \"do_not_call\": false, \"primary\": false, \"inactive\": false } ]\n} How the response will be formed after release:\n{ \"count\": 10, // total number of elements in the collection \"value\": [ // collection of items included in this response { \"id\": \"95\", \"type\": \"Home\", \"number\": \"303-997-3301\", \"do_not_call\": false, \"primary\": true, \"inactive\": false }, { \"id\": \"330\", \"type\": \"Home\", \"number\": \"(312) 997-3301\", \"do_not_call\": false, \"primary\": false, \"inactive\": false } ]\n} * Please note that the response format may change before official release.\nEndpoints affected: Operation Method Route Action (List) GET /constituent/constituents/{constituentId}/actions Address (List) GET /constituent/constituents/{constituentId}/addresses Constituent attachment (List) GET /constituent/constituents/{constituentId}/attachments Constituent code (List) GET /constituent/constituents/{constituentId}/constituentcodes Constituent (Search) GET /constituent/constituents/search/?searchText={searchText} Constituent custom field (List) GET /constituent/constituents/{constituentId}/customfields Education (List) GET /constituent/constituents/{constituentId}/educations Email address (List) GET /constituent/constituents/{constituentId}/emailaddresses Name format (List) GET /constituent/constituents/{constituentId}/nameformats Note (List) GET /constituent/constituents/{constituentId}/notes Online presence (List) GET /constituent/constituents/{constituentId}/onlinepresences Phone (List) GET /constituent/constituents/{constituentId}/phones Relationship (List) GET /constituent/constituents/{constituentId}/relationships 2016-03-30\nNew Added the ability to return a list of relationships for a specified constituent. Operation Method Route Relationship (List) GET /constituents/{constituentId}/relationships Added the ability to return a constituent's profile picture. Operation Method Route Profile picture (Get) GET /constituents/{constituentId}/profilepicture Changed\nGET operations that return an attachment endpoint, such as Constituent attachment (List), return the following new properties: Property Description thumbnail_url Read only. String. Represents an image thumbnail URI for a picture to display. Endpoints that add or edit attachments ignore this property. file_size Read only. Long integer. The file size of the attachment in bytes. Only applies to physical attachments. Helps to determine how to display large images. Endpoints that add or edit attachments ignore this property. 2016-03-10\nNew Added the ability to return a list of education items for a specified constituent. Operation Method Route Education (List) GET /constituents/{constituentId}/educations Added the ability to edit and delete actions and notes for a constituent: Operation Method Route Action (Edit) PUT /actions/{actionId} Action (Delete) DELETE /actions/{actionId} Note (Edit) PUT /notes/{noteId} Note (Delete) DELETE /notes/{noteId} Changed OAuth and Constituent API URLs changed. See Base URLs. The route for the authorization endpoint is no longer prefixed with renxt. Operation Method Old Route New Route authorization (Get) GET /renxt/authorization /authorization The base URL for the Constituent API has changed: Old New https://api.nxt.blackbaud-dev.com/constituents/ https://api.sky.blackbaud.com/constituent After creating an attachment for a constituent, the returned representation of an attachment now includes the attachment identifier (id). Values for the Constituent gender property now return the values using the correct casing (lowercase). GET and POST routes for actions and notes endpoints have changed: Operation Method Old Route New Route Action (Get) GET /{constituentId}/actions/{actionId} /actions/{actionId} Action (Create) POST /{constituentId}/actions /actions Note (Get) GET /{constituentId}/notes/{noteId} /notes/{noteId} Note (Create) POST /{constituentId}/notes /notes Deleted\nWe removed the following endpoints: GET Attachment\nGET Constituent code\nGET Custom field\nGET Email address\nGET Online presence\nGET Phone\nGET Primary business\nGET Spouse 2015\n2015-10-20\nNew Added 3 new endpoints covering constituent attachments\nGet a list of constituent attachments\nGet a specific attachment for a constituent\nAdd an attachment for a constituent Note that currently, all attachment records are viewable through the SKY API, but only link attachments can be added. Changed Removed Author from the constituent note entity. The author is now inferred from the context of the user calling the SKY API. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Fundraising",
   "description": "Information on additions and changes for the Fundraising API.",
   "order": 125,
   "published": true,
   "showInNav": true,
   "icon": "fa fa-line-chart",
   "back_to_top": true,
   "title": "Fundraising Changelog",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Support Changelog Fundraising",
   "abspath": "support/changelog/fundraising/index.md",
   "uri": "/support/changelog/fundraising/",
   "text": " Fundraising\nMonitor this page to keep up with the Fundraising API latest changes and SKY API service releases.\n2018-07-11\nAnnouncement: Changes for Fundraising API\nWe will transition the Fundraising (Beta) API out of its current public beta phase and into a formal v1 release.\nJune\n2018-06-19\nNew\nAdded the following endpoints: Operation Method Route Package list GET /packages 2018-06-01\nAnnouncement: Changes for Fundraising API\nWe implemented new operation ID values in the OpenApi (fka Swagger) definitions for all endpoints in the Fundraising API. Note that any existing code relying on these endpoints will continue to function, since all routes and parameters are unchanged. However, if you make use of client-side generated code and want to regenerate your client wrapper, compile-time errors in your code stemming from new operation ID values will arise and need to be addressed.\nNew\nAdded the following endpoint: Operation Method Route Document (Create) POST /documents May\n2018-05-25\nAnnouncement: Changes Planned for Constituent, Fundraising, Gift, and Opportunity APIs\nWe will implement new operation ID values in the OpenApi (fka Swagger) definitions for several SKY APIs. This change will improve client-side tooling support for code generation by making these values more deterministic and friendlier across different languages. Going forward, we expect high stability of these values (meaning, we won’t need to change them again).\nNote that any existing code that has been deployed will continue to function with no problems, since we are not changing any routes or parameters. If you make use of client-side generated code and want to regenerate your client wrapper, you’ll need to fix any compile-time errors in your code stemming from new method names.\nApril\n2018-04-19\nNew\nAdded the following endpoints: Operation Method Route Fundraiser assignment list (Single fundraiser) GET /fundraisers/{fundraiser_id}/assignments Fundraiser assignment (Create) POST /fundraisers/assignments Fundraiser assignment (Edit) PATCH /fundraisers/assignments/{assignment_id} Fundraiser assignment (Delete) DELETE /fundraisers/assignments/{assignment_id} Fundraiser types GET /fundraisers/types February\n2018-02-27\nNew\nAdded the following endpoints: Operation Method Route Fundraiser goal list (Single constituent) GET /fundraisers/{fundraiser_id}goals Fundraiser goal (Create) POST /fundraisers/goals Fundraiser goal (Edit) PATCH /fundraisers/goals/{goal_id} Fundraiser goal (Delete) DELETE /fundraisers/goals/{goal_id} Appeal categories GET /appeals/categories Campaign categories GET /campaigns/categories Fund categories GET /funds/categories Changed\nWe changed the URL for the Goal categories (Get) endpoint to /fundraisers/goals/categories as previously announced.\n2018-02-09\nAnnouncement: Breaking Changes Planned for Fundraising API\nWe will change the URL for the Goal categories (Get) endpoint to /fundraisers/goals/categories.\n2018-02-05\nChanged\nWe added the type property to the fund entity.\nJanuary\n2018-01-29\nNew\nAdded the following endpoint: Operation Method Route Attachment tags GET /attachmenttags Changed We added the date property to the attachment entity.\nWe added the category property to the campaign, fund, and appeal entities. 2017\n2017-12-15\nNew\nAdded the following endpoints: Operation Method Route Goal categories GET /fundraising/goalcategories Package GET /packages/{package_id} 2017-08-28\nNew\nAdded the following endpoints: Operation Method Route Appeal attachment list (Single appeal) GET /appeals/{appeal_id}/attachments Appeal attachment (Create) POST /appeals/attachments Appeal attachment (Edit) PATCH /appeals/attachments/{attachment_id} Appeal attachment (Delete) DELETE /appeals/attachments/{attachment_id} Campaign attachment list (Single campaign) GET /campaigns/{campaign_id}/attachments Campaign attachment (Create) POST /campaigns/attachments Campaign attachment (Edit) PATCH /campaigns/attachments/{attachment_id} Campaign attachment (Delete) DELETE /campaigns/attachments/{attachment_id} Fund attachment list (Single fund) GET /funds/{fund_id}/attachments Fund attachment (Create) POST /funds/attachments Fund attachment (Edit) PATCH /funds/attachments/{attachment_id} Fund attachment (Delete) DELETE /funds/attachments/{attachment_id} 2017-05-09\nChanged\nThe Appeal list, Campaign list, and Fund list endpoints now exclude inactive records by default. To include inactive records, set the include_inactive parameter to true.\n2017-04-28\nAnnouncement: Breaking Changes Planned for Fundraising API\nWe will update the default value of the include_inactive filter to false on the Appeal list, Campaign list, and Fund list endpoints to exclude inactive records by default. Currently, the filter defaults to true and includes inactive records when no value is supplied.\n2017-04-06\nNew\nAdded the following endpoints: Operation Method Route Appeal list GET /appeals Campaign list GET /campaigns Fund list GET /funds 2017-03-08\nNew\nThe Fundraising API has been released for a public beta. This API handles information related to the fundraising hierarchy, including the campaign, fund, and appeal entities: Campaigns set the overall objectives and initiatives for raising money, and they are typically the top tier of the fundraising hierarchy. For example, organizations can create campaigns to encompass fundraising efforts related to annual operating expenses, new buildings, or endowments.\nFunds represent the donor's intent for how to use or earmark a gift. For example, the gift can be intended for a specific cause or financial purpose. Funds are often linked to financial suites and indicate where to allocate a gift.\nAppeals are the sources and solicitations that bring in gifts, and they are typically the most granular piece of the fundraising hierarchy. Examples of appeals include direct mailings, online donation pages, phonathons, auctions, and events. The initial release contains endpoints to retrieve these entities by ID and to manage custom fields. For more information, see the entity and endpoint references. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Gift",
   "description": "Information on additions and changes for the Gift API.",
   "order": 175,
   "published": true,
   "showInNav": true,
   "icon": "fa fa-gift",
   "back_to_top": true,
   "title": "Gift Changelog",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Support Changelog Gift",
   "abspath": "support/changelog/gift/index.md",
   "uri": "/support/changelog/gift/",
   "text": " Gift\nMonitor this page to keep up with the Gift API latest changes and SKY API service releases.\n2018-07-11\nAnnouncement: Changes for Gift API\nWe will transition the Gift (Beta) API out of its current public beta phase and into a formal v1 release.\nJune\n2018-06-05\nAnnouncement: Changes for Gift API\nWe implemented new operation ID values in the OpenApi (fka Swagger) definitions for all endpoints in the Gift API. Note that any existing code relying on these endpoints will continue to function, since all routes and parameters are unchanged. However, if you make use of client-side generated code and want to regenerate your client wrapper, compile-time errors in your code stemming from new operation ID values will arise and need to be addressed.\nNew\nAdded the following endpoint: Operation Method Route Document (Create) POST /documents Changed\nWe added the id property to the gift split entity.\nMay\n2018-05-25\nAnnouncement: Changes Planned for Constituent, Fundraising, Gift, and Opportunity APIs\nWe will implement new operation ID values in the OpenApi (fka Swagger) definitions for several SKY APIs. This change will improve client-side tooling support for code generation by making these values more deterministic and friendlier across different languages. Going forward, we expect high stability of these values (meaning, we won’t need to change them again).\nNote that any existing code that has been deployed will continue to function with no problems, since we are not changing any routes or parameters. If you make use of client-side generated code and want to regenerate your client wrapper, you’ll need to fix any compile-time errors in your code stemming from new method names.\nJanuary\n2018-01-29\nNew\nAdded the following endpoint: Operation Method Route Attachment tags GET /attachmenttags Changed\nWe added the date property to the attachment entity.\n2017\n2017-12-11\nChanged\nWe added the package_id property to the gift split entity.\n2017-12-01\nChanged The Gift list endpoint now includes an option to filter gifts based on their post statuses. The optional post_status query parameter, which can be specified multiple times to imply a logical OR, filters the results to only include gifts with the specified post statuses. For example, post_status=DoNotPost&post_status=Posted filters the results to only include gifts that are marked either DoNotPost or Posted. The Gift list endpoint now includes an option to filter gifts based on their gift types. The optional gift_type query parameter, which can be specified multiple times to imply a logical OR, filters the results to only include gifts with the specified gift types. For example, gift_type=MatchingGiftPledge&gift_type=RecurringGift filters the results to only include gifts with the MatchingGiftPledge or RecurringGift types. 2017-11-01\nChanged\nWe added the batch_number property to the gift entity. This property is read-only.\n2017-10-27\nNew\nAdded the following endpoint: Operation Method Route Gift (Create) POST /gifts Changed\nThe Gift list endpoint now includes an option to filter gifts based on their associated constituents. The optional constituent_id query parameter, which can be specified multiple times to imply a logical OR, filters the results to only include gifts associated with the specified constituent record IDs. For example, &constituent_id=1242&constituent_id=385 filters the results to only include gifts associated with two constituent records: \"1242\" and \"385.\"\n2017-10-04\nChanged\nWe added the acknowledgements, receipts, and balance properties to the gift entity.\n2017-09-07\nNew\nAdded the following endpoint: Operation Method Route Gift custom field list (All gifts) GET /gifts/customfields Changed\nThe date property on the gift entity no longer returns an offset. Instead, it now uses ISO-8601 format: 2015-09-18T00:00:00.\n2017-08-30\nAnnouncement: Breaking Changes Planned for Gift API\nWe will update the date property on the gift entity to no longer return an offset. Instead, it will use ISO-8601 format: 2015-09-18T00:00:00.\n2017-08-08\nNew\nAdded the following endpoint: Operation Method Route Gift subtypes (Get) GET /giftsubtypes Changed\nWe added the payments property to the gift entity.\n2017-08-04\nChanged\nWe updated the next_link property on the Gift list endpoint to be more consistent with other lists.\n2017-06-23\nChanged\nWe added the gift_aid_amount and gift_aid_qualification_status properties to the gift entity for UK tenants.\n2017-04-25\nNew\nAdded the following endpoints: Operation Method Route Gift custom field (Create) POST /gifts/customfields Gift custom field (Edit) PATCH /gifts/customfields/{custom_field_id} Gift custom field categories (Get) GET /gifts/customfields/categories Gift custom field category values (Get) GET /gifts/customfields/values 2017-03-20\nChanged\nWe added the post_date property to the gift entity.\n2017-03-08\nNew\nThe Gift API has been released for a public beta. This API handles information related to gifts, including related entities such as gift splits, gift fundraisers, and soft credits.\nThe initial release contains endpoints to retrieve a list of all gifts, to retrieve gifts by their IDs, and to manage attachments. For more information, check out the entity and endpoint references. "
  },
  {
   "layout": "layout-sidebar",
   "name": "General Ledger",
   "description": "Information on additions and changes for the General Ledger API.",
   "order": 150,
   "published": true,
   "showInNav": true,
   "icon": "fa fa-book",
   "back_to_top": true,
   "title": "General Ledger Changelog",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Support Changelog Gl",
   "abspath": "support/changelog/gl/index.md",
   "uri": "/support/changelog/gl/",
   "text": " General Ledger\nMonitor this page to keep up with the General Ledger API latest changes and SKY API service releases.\n2018-07-19\nNew\nAdded the following endpoints: Operation Method Route Budget detail GET /budgets/{scenario_id}/details Budget PATCH /budgets/{scenario_id} Budget detail lines (List) GET /budgets/{scenario_id}/details/lines Changed\nWe made several changes to the Journal entry batch attachment endpoint: The endpoint now supports physical attachments. (Previously, it only supported link attachments.)\nNote the shape of the request in JSON form: {\n\"parent_id\": 0,\n\"name\": \"string\",\n\"url\": \"string\",\n\"type\": \"Link\",\n\"media_type\": \"string\",\n\"file\": { \"ContentLength\": 0, \"ContentType\": \"string\", \"FileName\": \"string\", \"InputStream\": { \"CanRead\": true, \"CanSeek\": true, \"CanTimeout\": true, \"CanWrite\": true, \"Length\": 0, \"Position\": 0, \"ReadTimeout\": 0, \"WriteTimeout\": 0 } }\n} The type field now accepts Physical but defaults to Link. The url is required for link attachments but not for physical attachments\nThe file field is HttpPostedFileBase. It is required for physical attachments but not for link attachments.\nFor physical attachments, requests must be multipart/form-data. For example: public static Task PostMultiPartDataFormAsync(this HttpClient client, string route, Attachment content) { var httpContent = new MultipartFormDataContent(); var streamContent = new StreamContent(content.File.InputStream); var ContentDisposition = new ContentDispositionHeaderValue(\"form-data\"); ContentDisposition.Name = \"File\"; ContentDisposition.FileName = content.File.FileName; streamContent.Headers.ContentDisposition = ContentDisposition; streamContent.Headers.ContentType = new MediaTypeHeaderValue(content.File.ContentType); httpContent.Add(streamContent); httpContent.Add(new StringContent(content.ParentId.ToString()), \"ParentId\"); httpContent.Add(new StringContent(content.Name), \"Name\"); httpContent.Add(new StringContent(content.Type.ToString()), \"Type\"); httpContent.Add(new StringContent(content.MediaType.ToString()), \"MediaType\"); var request = new HttpRequestMessage(HttpMethod.Post, route) { Content = httpContent }; return SendAsync(client, request); } In application/json requests, field names must use snake casing such as parent_id and media_type, whereas in multipart/form-data requests, field names must use camel case, such as ParentId and MediaType.\nLink attachments should be sent as application/json formatted requests with the file field omitted.\nIf the file field is populated in application/json formatted requests, the request fails unless type is set to Link because then the request ignores the file. June\n2018-06-28\nNew\nAdded the following endpoint: Operation Method Route Journal entry batch summary GET /journalentrybatches/{batch_id}/summary Journal entries (List) GET /journalentrybatches/{batch_id}/journalentries * We deprecated the Journal entry batch (GET) endpoint and replaced it with the Journal entry batch summary (Get) and Journal entries (List) endpoints. We will continue to support deprecated endpoints for v1 of the General Ledger API, but we recommend transitioning to the new endpoints for a more robust and consistent response.\n2018-06-20\nChanged\nWe made changes to the following endpoints: The Journal entry batch (List) endpoint now includes a new search_text request parameter that can match description or ui_batch_id. For example, ?search_text=100 returns a list of batches with a ui_batch_id that contains \"100\" or a description that contains \"100\".\nThe Budget (List) endpoint now includes a new scenario_id field that returns the scenario ID associated with the budget. 2018-06-12\nAnnouncement: Changes for General Ledger API\nWe implemented new operation ID values in the OpenApi (fka Swagger) definitions for all endpoints in the General Ledger API. Note that any existing code relying on these endpoints will continue to function, since all routes and parameters are unchanged. However, if you make use of client-side generated code and want to regenerate your client wrapper, compile-time errors in your code stemming from new operation ID values will arise and need to be addressed.\n2018-06-04\nAnnouncement: Changes Planned for Accounts Payable, General Ledger, and Treasury (Beta) APIs\nWe will implement new operation ID values in the OpenApi (fka Swagger) definitions for several SKY APIs. This change will improve client-side tooling support for code generation by making these values more deterministic and friendlier across different languages. Going forward, we expect high stability of these values (meaning, we won’t need to change them again).\nNote that any existing code that has been deployed will continue to function with no problems, since we are not changing any routes or parameters. If you make use of client-side generated code and want to regenerate your client wrapper, you’ll need to fix any compile-time errors in your code stemming from new method names.\nMay\n2018-05-24\nChanged\nWe made changes to the following endpoints: The Transaction distribution (List) endpoint now returns proper account_class information.\nThe Journal entry batch (GET) endpoint now returns the correct number of journal_entries.\nIn the Period summary process (GET) endpoint, the status field has been enumerated and all values can now be seen in the Period summary process schema. April\n2018-04-20\nNew\nAdded the following endpoint: Operation Method Route Journal entry batch PATCH /journalentrybatches/{batch_id} With the new endpoint, note the following: You can edit the description, create_interfund_sets, and create_bank_account_adjustments values of an existing journal entry batch.\nPosted journal entry batches cannot be edited.\nOmitting a field from a PATCH request does not edit that field with a default value. In the example below, only create_interfund_entries is edited, but the other fields are not. { “create_interfund_sets”: false\n} March\n2018-03-02\nNew\nAdded the following endpoints: Operation Method Route Client names (List) GET /configuration/client_names Grant status (List) GET /grants/statuses Grant type (List) GET /grants/types Grant custom field (List) GET /grants/customfields Changed\nFor the Period summary process (Start) endpoint, a fiscal_period_id was previously required. Now, when no object is sent or when a fiscal_period_id with value 0 is sent, all open and unoptimized fiscal periods are summarized.\nJanuary\n2018-01-17\nChanged\nFor the Journal entry batch (Post) endpoint, transaction_code_value can now include “” empty string for value.\n2017\n2017-11-20\nNew\nAdded the following endpoints: Operation Method Route Period summary (List) GET /periodsummary/summaries Period summary process GET /periodsummary/processinginfo Period summary process (Start) POST /periodsummary/summarize 2017-08-14\nNew\nAdded the following endpoints: Operation Method Route Journal entry batch attachment POST /journalentrybatches/attachments Media type (List) GET /mediaTypes Changed For the following endpoint, we added the division, department, location, and type filters. Additional data is also returned: Operation Method Route Project GET /projects For the following endpoint, we added the encumbrance and post date filters. Additional data is also returned: Operation Method Route Transaction distribution (List) GET /transactiondistributions 2017-06-15\nChanged\nWe made several changes to the Get Account (Search), Get Project (Search), Get Journal entry batch (List), and Get Transaction distribution (List) endpoints. The following properties are now returned: date_added, date_modified, added_by, and modified_by. The last_modified filter is now included. This filter causes the response to only include results where date_modified is greater than or equal to the last_modified filter value. 2017-05-05\nNew\nAdded the following endpoints: Operation Method Route Budget grant (List) GET /budgets/{scenario_id}/grants Budget project (List) GET /budgets/{scenario_id}/projects Changed\nWe increased the maximum record limit from 500 to 5000 on the following Get endpoint: Operation Method Route Transaction distribution GET /transactiondistributions 2017-01-18\nNew\nAdded the following endpoints: Operation Method Route Account GET /accounts/{account_id} Project GET /projects/{project_id} Account cashflows (List) GET /accounts/cashflows Account working capitals (List) GET /accounts/workingcapitals Account custom fields (List) GET /accounts/customfields 2016\n2016-12-06\nNew Added the following endpoints: Operation Method Route Journal entry custom field (List) GET /journalentries/customfields Project custom field (List) GET /projects/customfields Budget GET /budgets Budget (List) GET /budgets/{scenario_id} Budget account (List) GET /budgets/{scenario_id}/accounts Ledger summary (List) GET /summary/{fiscal_year_id} Added new custom field entities to the following endpoints: Operation Method Route Project POST /projects Journal entry POST /journalentrybatches/{batch_id}/journalentries Journal entry batch GET /journalentrybatches/{batch_id} Changed\nFor consistency across APIs, all responses to GET endpoints that return collections now return an object with \"count\" and \"value\" properties. The following endpoints are affected: Operation Method Route Class (List) GET /classes Journal code (List) GET /journalcodes Project department (List) GET /projects/departments Project division (List) GET /projects/divisions Project location (List) GET /projects/locations Project status (List) GET /projects/statuses Project type (List) GET /projects/types Transaction code (List) GET /transactioncodes Transaction code value (List) GET /transactioncodes/{transaction_code_id}/values 2016-11-14\nAnnouncement: Breaking Change Planned for General Ledger API\nFor consistency across APIs, we will implement the following changes: All responses to GET endpoints that return collections will return an object with \"count\" and \"value\" properties.\nThe following endpoints are affected: Operation Method Route Class (List) GET /classes Journal code (List) GET /journalcodes Project department (List) GET /projects/departments Project division (List) GET /projects/divisions Project location (List) GET /projects/locations Project status (List) GET /projects/statuses Project type (List) GET /projects/types Transaction code (List) GET /transactioncodes Transaction code value (List) GET /transactioncodes/{transaction_code_id}/values 2016-11-01\nNew\nAdded the following endpoints: Operation Method Route Create project (Post) POST /projects Create project contact (Post) POST /projects/{project_id}/contacts 2016-10-06\nNew\nAdded the following endpoints: Operation Method Route Fiscal year (List) GET /fiscalyears Class (List) GET /classes Account structure GET /accounts/structure Account segment value (List) GET /accounts/segments Account code (List) GET /accounts/codes Account fund (List) GET /accounts/funds Project type (List) GET /projects/types Project status (List) GET /projects/statuses Project division (List) GET /projects/divisions Project department (List) GET /projects/departments Project location (List) GET /projects/locations Changed\nYou can now specify Class on journal entries (this affects all endpoints associated with journal entry batches).\n2016-08-12\nBreaking Change\nWe changed the default and maximum record limits on the following search and list endpoints. The default is now 100 records, and the maximum is 500 records. Operation Method Route Transaction distribution (Search) GET /transactiondistributions Account (Search) GET /accounts Project (Search) GET /projects Journal entry batch (List) GET /journalentrybatches 2016-07-05\nChanged\nWe implemented a previously announced, breaking change. We removed the Journal entry batch (Edit) PUT endpoint. At a later date, we plan to replace PUT with PATCH, instead.\n2016-06-30\nAnnouncement: Breaking Change Planned for General Ledger API\nIn the coming days, a breaking change will be placed into effect. We will remove the Journal entry batch (Edit) PUT endpoint. At a later date, we plan to replace PUT with PATCH, instead.\n2016-06-22\nNew\nAdded the following endpoint: Operation Method Route Transaction distribution (Search) GET /transactiondistributions 2016-06-15\nChanged\nWe've added a versioning indicator to the General Ledger API's base URL. Specifically, all new API requests must begin with https://api.sky.blackbaud.com/generalledger/v1.\n2016-06-10\nAnnouncement: Breaking Changes Planned for General Ledger API We will be adding a versioning indicator to the General Ledger API's base URL. Specifically, all new API requests should begin with https://api.sky.blackbaud.com/generalledger/v1.\nThis change is planned to take effect on Wednesday, June 15. 2016-05-27\nNew Added a General Ledger getting started guide to help you make your first General Ledger API call with our interactive SKY API Console. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Opportunity",
   "description": "Information on additions and changes for the Opportunity API.",
   "order": 200,
   "published": true,
   "showInNav": true,
   "icon": "fa fa-handshake",
   "back_to_top": true,
   "title": "Opportunity Changelog",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Support Changelog Opportunity",
   "abspath": "support/changelog/opportunity/index.html",
   "uri": "/support/changelog/opportunity/",
   "text": " Opportunity\nMonitor this page to keep up with the Opportunity API latest changes and SKY API service releases.\n2018-07-11\nAnnouncement: Changes for Opportunity API\nWe will transition the Opportunity (Beta) API out of its current public beta phase and into a formal v1 release.\nJune\n2018-06-01\nAnnouncement: Changes for Opportunity API\nWe implemented new operation ID values in the OpenApi (fka Swagger) definitions for all endpoints in the Opportunity API. Note that any existing code relying on these endpoints will continue to function, since all routes and parameters are unchanged. However, if you make use of client-side generated code and want to regenerate your client wrapper, compile-time errors in your code stemming from new operation ID values will arise and need to be addressed.\nNew\nAdded the following endpoint: Operation Method Route Document (Create) POST /documents May\n2018-05-25\nAnnouncement: Changes Planned for Constituent, Fundraising, Gift, and Opportunity APIs\nWe will implement new operation ID values in the OpenApi (fka Swagger) definitions for several SKY APIs. This change will improve client-side tooling support for code generation by making these values more deterministic and friendlier across different languages. Going forward, we expect high stability of these values (meaning, we won’t need to change them again).\nNote that any existing code that has been deployed will continue to function with no problems, since we are not changing any routes or parameters. If you make use of client-side generated code and want to regenerate your client wrapper, you’ll need to fix any compile-time errors in your code stemming from new method names.\nJanuary\n2018-01-24\nNew\nAdded the following endpoints: Operation Method Route Attachment tags GET /attachmenttags Changed\nWe added the date property to the attachment entity.\n2017\n2017-12-01\nChanged\nThe Opportunity list endpoint now includes an option to filter opportunities based on their associated constituents. The optional constituent_id query parameter, which can be specified multiple times to imply a logical OR, filters the results to only include opportunities associated with the specified constituent record IDs. For example, &constituent_id=1242&constituent_id=385 filters the results to only include opportunities associated with two constituent records: \"1242\" and \"385.\"\n2017-05-10\nChanged\nWe updated the Opportunity (GET) endpoint to return the date_added and date_modified properties.\n2017-04-27\nChanged\nWe added the linked_gifts property to the opportunity entity. This property is an array of identifiers for the gifts that are related to the opportunity.\n2017-04-12\nNew\nThe Opportunity API has been released for a public beta. This API handles information related to opportunities, including the opportunity, opportunity attachments, and opportunity fundraiser entities.\nThe initial release contains endpoints to retrieve these entities by ID and to manage custom fields. For more information, check out the entity and endpoint references. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Payments (Beta)",
   "description": "Information on additions and changes for the Payments API (Beta).",
   "order": 210,
   "published": true,
   "showInNav": false,
   "icon": "fa fa-credit-card",
   "back_to_top": true,
   "title": "Payments (Beta) Changelog",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": false,
   "showInFooter": false,
   "showInSearch": true,
   "breadcrumbs": "Support Changelog Payments",
   "abspath": "support/changelog/payments/index.md",
   "uri": "/support/changelog/payments/",
   "text": " Payments (Beta)\nMonitor this page to keep up with the Payments API (Beta) latest changes and SKY API service releases. "
  },
  {
   "layout": "layout-sidebar",
   "name": "School (Beta)",
   "description": "Information on additions and changes for the School API (Beta).",
   "order": 210,
   "published": true,
   "showInNav": false,
   "icon": "fa fa-graduation-cap",
   "back_to_top": true,
   "title": "School (Beta) Changelog",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": false,
   "showInFooter": false,
   "showInSearch": true,
   "breadcrumbs": "Support Changelog School",
   "abspath": "support/changelog/school/index.md",
   "uri": "/support/changelog/school/",
   "text": " School (Beta)\nMonitor this page to keep up with the School API (Beta) latest changes and SKY API service releases.\n02 July 2018\nNew\nAdded the following endpoint(s): Operation Method Route Sport list GET /athletics/sports[?season_id] Team roster GET /users/extended?base_role_ids={base_role_ids}[&marker] 30 May 2018\nNew\nAdded the following endpoint(s): Operation Method Route Student list (single section) GET /academics/sections/{section_id}/students User extended list GET /users/extended?base_role_ids={base_role_ids}[&marker] 15 May 2018\nNew\nAdded the following endpoint(s): Operation Method Route Student enrollment list GET /academics/enrollments/{student_id}[?school_year] Phone type list GET /users/phonetypes Assignment list (single section) GET /academics/sections/{section_id}/assignments[?types][&status][&persona_id][&filter][&search] Section list GET /academics/sections[?level_num][&school_year] Relationship list (single user) GET /users/{user_id}/relationships "
  },
  {
   "layout": "layout-sidebar",
   "name": "Shared",
   "description": "Common changes shared across all our APIs.",
   "order": 50,
   "published": true,
   "showInNav": true,
   "icon": "fa fa-cloud",
   "back_to_top": true,
   "title": "Shared Changelog",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Support Changelog Shared",
   "abspath": "support/changelog/shared/index.md",
   "uri": "/support/changelog/shared/",
   "text": " Shared\nMonitor this page to keep up with common changes shared across all our APIs.\nMay 2017\n2017-05-31\nChanged\nWe moved the Status page link from the Support menu to the top navigation. This makes it even quicker for you to see the current state of API availability. If you haven't signed up yet, we encourage you to subscribe to automatic incident notifications. You can subscribe by email, SMS or RSS feed.\n2017-05-04\nNew\nWe added a new step-by-step guide to help you learn the steps required to Create an App with SKY API. We recommend you complete this guide after you follow the Getting Started documentation.\nMarch 2017\n2017-3-10\nNew\nIn response to a request from the Blackbaud Community, we are pleased to announce a new PHP code sample and accompanying PHP tutorial. These two new resources demonstrate the Blackbaud Auth Code Flow using PHP.\n2017-3-03\nNew\nThe SKY API developer site now offers commenting capability through Disqus. We encourage community involvement to improve our documentation. We will monitor comments just like we monitor feedback in our GitHub repository, and we will incorporate feedback to make our docs better. See something that is unclear? Want more detail? Leave a comment and let us know!\nOn the SKY API developer site, comments now appear at the bottom of most documentation pages, and buttons are available at the top of pages to take users to the comments.\n2016\n2016-12-02\nWe added a new Status link to the Support menu. This link takes you to our SKY API status page. The status page provides the current state of API availability, as well as specific details on downtime incidents. We also provide the option for you to subscribe to automatic incident notifications by email, SMS, or feed.\n2016-10-17\nLogos can now be associated with your applications. The logo is the icon that users will see on the consent form when they give an application authorization to use their product's account to access the API. Logos can be added to new and existing applications through the My Applications page. Application logo images must be: 512 by 512 pixels\nSmaller than 2MB\nPNG or JPEG format 2016-09-22\nSKY API's support for CORS now includes accept and content-type in the list of accepted request headers. You can now specify these headers in API requests from within a browser.\n2016-07-08\nTo support approved API subscribers with access to their own dedicated tenants, we've added instructions for activating the SKY API Console\nto our Basics guide.\n2016-06-27 When requesting an access token, you may now supply your application ID and secret as part of the request body as client_id and client_secret parameters, respectively. This is an alternative to using the Authorization header. See Authorization Code Flow. Created a C# Auth Code Flow code sample and tutorial. 2016-06-09\nNew We've added the OAuth2 Implicit Flow for use in web browser and mobile apps where application secret confidentiality is not guaranteed. A new feature allows you to export API definitions in Swagger and WADL formats from within the SKY API Console. Use these files to generate client-side code by using tools such as Swagger Codegen. You can import these files into API client tools such as Postman and start calling the API in very little time. 2016-05-27\nChanged\nWhen registering your application, we've relaxed the https requirement for whitelisted redirect URIs. To facilitate and shorten the development process, we now accept http://localhost:* (or, http://127.0.0.1:*) whitelisted web addresses to redirect to after users grant or deny permission for your app. You will no longer need to install a self-signed SSL certificate on your local machine when building your applications.\n2016-05-13\nNew\nA next_link property has been added to our paginated collection responses and represents the URI for the next page of results. This property takes into account any relevant pagination parameters, such as limit, offset, or last_modified, and date_added provided on the request.\n2016-05-06\nChanged limit and offset have replaced top and skip parameters for Pagination. Pagination behavior will remain unchanged. When editing, existing endpoints that previously used the PUT HTTP verb have been replaced with PATCH. PATCH can be used to update partial resources. For instance, when you only need to update one field of the resource. 2016-04-26\nPagination will be facilitated through the results via the use of limit and offset instead of top and skip parameters. Pagination behavior will remain unchanged.\n2016-03-15\nUpdates to code samples including Authorization Code Flow Tutorial and Barkbaud: Authorization Code Flow Tutorial Environment variables automatically load when the application starts. Tutorial instructions have been simplified accordingly.\nUsing AngularJS for display of Log in button, Log out button and constituent data.\nOAuth and Constituent API routes have been updated to reflect recent changes to our base URLs. Barkbaud Environment variables automatically load when the application starts. README instructions have been simplified accordingly.\nBiographies, owner and medical history for each animal are now stored in a MongoDB database at mLab instead of Parse. The Parse database service will be retired on January 28, 2017.\nOAuth and Constituent API routes have been updated to reflect recent changes to our base URLs. 2016-03-11\nUsage limits are now in effect. Exceeding the rate limit results in a 429 - Too Many Requests response status code. Exceeding the quota results in a 403 - Quota Exceeded response status code.\n2016-03-10\nChanged OAuth and Constituent API URLs changed. See Base URLs. The route for the authorization endpoint is no longer prefixed with renxt. Operation Method Old Route New Route authorization (Get) GET /renxt/authorization /authorization 2015\n2015-12-8\nNew The My Applications page now includes the ability to edit applications. Once registered, your application will automatically have access to the Developer Sandbox tenant. The Auth Code Flow Tutorial demonstrates how to create a small server-side application that negotiates authorization and access constituent data. Code Samples include Barkbaud which was introduced at bbcon 2015. Also included is the source code for the Auth Code Flow Tutorial. General Enhancements Enhanced FAQ, including new questions and references to new Auth Code Flow Tutorial and application management. 2015-11-20\nNew\nThe My Applications page and associated documentation provide self-service application registration for the purpose of accessing data via SKY API.\n2015-10-20\nChanged Improved handling of enumerations within the API. Enumeration values are now emitted using string representations instead of numeric representations. For example, Constituent.Type now returns individual or organization. Improved handling of default values within the SKY API. Previously, default values were not included in the JSON response. Values are now included in the payload. Enhanced sample response representations in the developer portal to account for enumeration and default value handling. Added a Support menu to the developer portal, with links to the Changelog, Issues, Ideas, and FAQ. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Statistical Unit (Beta)",
   "description": "Information on additions and changes for the Statistical Unit API (Beta).",
   "order": 223,
   "published": true,
   "showInNav": false,
   "icon": "fa fa-balance-scale",
   "back_to_top": true,
   "title": "Statistical Unit (Beta) Changelog",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": false,
   "showInFooter": false,
   "showInSearch": true,
   "breadcrumbs": "Support Changelog Statistical-unit",
   "abspath": "support/changelog/statistical-unit/index.md",
   "uri": "/support/changelog/statistical-unit/",
   "text": " Statistical Unit (Beta)\nMonitor this page to keep up with the Statistical Unit API (Beta) latest changes and SKY API service releases.\n2018-MONTH-DAY\nNew\nThe Statistical Unit API has been released for a private beta. This API handles information related to tracking statistical units for financial reporting and allocations.\nThe initial release contains endpoints to define non-financial statistical measures and manage counts for those measures. Note that this API is only available if you have Statistical units in Financial Edge NXT. At a future time, we will make this available for all Financial Edge NXT customers.\nFor more information, check out the entity refs x-ref and endpoint refs x-ref references. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Treasury",
   "description": "Information on additions and changes for the Treasury API.",
   "order": 225,
   "published": true,
   "showInNav": true,
   "icon": "fa fa-money",
   "back_to_top": true,
   "title": "Treasury Changelog",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Support Changelog Treasury",
   "abspath": "support/changelog/treasury/index.md",
   "uri": "/support/changelog/treasury/",
   "text": " Treasury\nMonitor this page to keep up with the Treasury API latest changes and SKY API service releases.\n2018-07-11\nAnnouncement: Changes for Treasury API\nWe will transition the Treasury (Beta) API out of its current public beta phase and into a formal v1 release.\nJune\n2018-06-28\nNew\nAdded the following endpoint: Operation Method Route Transaction code (List) GET /transactioncodes Transaction code value (List) GET /transactioncodes/{transaction_code_id}/value These endpoints currently exist in the General Ledger API. We decided to include them in the Treasury API (and Accounts Payable API) because values from those endpoints may be required to create Treasury (or Accounts Payable) records.\nChanged\nWe fixed an issue for Deposit (Get) to set the name in transaction_code_values in distribution_splits.\n2018-06-12\nAnnouncement: Changes for Treasury API\nWe implemented new operation ID values in the OpenApi (fka Swagger) definitions for all endpoints in the Treasury API. Note that any existing code relying on these endpoints will continue to function, since all routes and parameters are unchanged. However, if you make use of client-side generated code and want to regenerate your client wrapper, compile-time errors in your code stemming from new operation ID values will arise and need to be addressed.\n2018-06-04\nAnnouncement: Changes Planned for Accounts Payable, General Ledger, and Treasury APIs\nWe will implement new operation ID values in the OpenApi (fka Swagger) definitions for several SKY APIs. This change will improve client-side tooling support for code generation by making these values more deterministic and friendlier across different languages. Going forward, we expect high stability of these values (meaning, we won’t need to change them again).\nNote that any existing code that has been deployed will continue to function with no problems, since we are not changing any routes or parameters. If you make use of client-side generated code and want to regenerate your client wrapper, you’ll need to fix any compile-time errors in your code stemming from new method names.\nApril\n2018-04-26\nChanged For the Bank account (List) endpoint, the bank_name field is now included in the list of returned objects separate from account_name.\nThe Bank account register (List), Checks (List), Deposits (List), and Adjustments (List) endpoints now return the transaction_id field. This field helps to ensure that \"register\" items correctly map to checks, deposits, and adjustments. January\n2018-01-17\nChanged\nFor the Checks (List) endpoint, we made the following changes: The new payee field is now returned in the listed objects.\nThe list is now sorted by check number (ascending).\nWe added the starting_check_number and ending_check_number variables to the check filter. When only starting_check_number is provided, a list of checks (starting with that number and higher) is returned. When only ending_check_number is provided, a list of checks (less than or equal to that number) is returned. When both variables are provided, a range of checks is returned. 2017\n2017-04-25\nNew\nThe Treasury API has been released for a public beta. This API handles information related to bank accounts, including related entities such as adjustments, checks, and deposits.\nThe initial release contains endpoints to retrieve a list of all bank accounts and all bank account transactions, and to manage deposits, cash receipts, and adjustments. For more information, check out the entity and endpoint references. "
  },
  {
   "layout": "layout-container",
   "name": "Community",
   "description": "Learn and get help from your peers in the Blackbaud Developer Community.",
   "order": 50,
   "showInNav": true,
   "published": true,
   "showInHeader": true,
   "title": "Developer Community",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Support Community",
   "abspath": "support/community/index.md",
   "uri": "/support/community/",
   "text": " "
  },
  {
   "layout": "layout-sidebar",
   "order": 300,
   "name": "FAQ",
   "description": "A listing of frequently asked questions and answers.",
   "icon": "fa fa-comment-o fa-4x",
   "published": true,
   "showInNav": true,
   "back_to_top": true,
   "title": "FAQs",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Support Faq",
   "abspath": "support/faq/index.md",
   "uri": "/support/faq/",
   "text": " Comments Edit in GitHub Frequently Asked Questions\nLearn the answers to commonly asked questions, recommended patterns, and best practices for the SKY API.\nBasics\nHow do I get started?\nThe Getting Started guide and Authorization Code Flow tutorial demonstrate basic implementations of SKY API using easy-to-follow setup instructions.\nDo you have any code samples?\nSee Code Samples. Our Endpoint Reference contains code samples in multiple languages.\nI am seeing an issue, where can I get support?\nSee our Issues page for any existing issues. If you find a new issue, please contact us.\nAuthorization\nHow do I pass security credentials from my application to the SKY API?\nTo call the SKY API, your application will need to provide two things: Your developer subscription key - this key represents Blackbaud's permission for you to call the API, and it should be sent as part of the Bb-Api-Subscription-Key request header. An access token - this represents a Blackbaud customer's permission for you to access their data, and it should be sent as part of the authorization request header. This token is associated with the authenticated user's account and organization, and can only be used to access data to which the user has permission. For more information, see request headers.\nWhat is the recommended authorization flow for a browser-based app?\nIn applications where you cannot maintain the confidentiality of their Application secret, the most appropriate OAuth flow to use in this case is the Implicit Flow.\nBrowser-based (javascript) apps run entirely in the browser after loading the source code from a web page. Since the entire source code is available to the browser, they cannot maintain the confidentiality of their Application secret, so the secret is not used in this case.\nSee Authorization to learn about the OAuth flows that are supported.\nWhat is the recommended authorization flow for a native applications?\nLike browser-based apps, the most appropriate flow to use for a native applications (desktop and mobile devices) is the Implicit Flow.\nSee Authorization to learn about the OAuth flows that are supported.\nI want to create a script that adds new constituents to my database every day. Is there a way I can do this without having to open the browser and log in? (My username and password would preferably be set in the script.)\nThe SKY API doesn’t support basic authorization through username/password. Instead, obtain an access token through the Authorization Code Flow.\nWhen should my application initiate authorization?\nAuthorization begins when your application redirects the user's browser to our https://oauth2.apim.blackbaud.com/authorization Authorization endpoint. Exactly when you decide to make this request is up to you. You can request authorization when your application gathers initial information from the user, or when the user first attempts to access some data from the SKY API.\nSee Authorization.\nWhen I register my app, can I use localhost in my redirect URIs?\nYes. We allow you to register multiple redirect URIs with your application. For production, we require https, but to facilitate local development we allow http and the use of localhost or the localhost IP (127.0.0.1).\nSee Register your application and the Auth Code Flow tutorial.\nAfter redirection occurs, how can I track where authorization initiated?\nAfter the user grants (or denies) access to your application, we'll redirect the browser to the URI that you passed to us when you initiated the authorization process (this URI must exactly match one of the values you registered with your application).\nWe also support the OAuth 2.0 state parameter (described in Section 4.1.1 of the OAuth 2.0 spec), which allows you to provide some context to us that we will echo back to your redirect URI after the user grants (or denies) access to your application. We recommend that you use an opaque value and verify that it matches the value you provided when your app initiated authorization. In this way, you can prevent cross-site request forgeries as well as track where your application initiated the authorization flow. You can then further redirect the user's browser to the appropriate area within your application upon consent.\nSee Authorization.\nWhen must my application re-authenticate the user?\nIf both your access token and refresh token have expired, then you'll need to send the user back through the interactive authorization process. If your access token has expired but you have a valid refresh token, then you can simply exchange the refresh token for a new access token (and a new refresh token) non-interactively.\nSee Authorization.\nCORS\nDo you support cross-origin resource sharing to allow you to interact securely with our API from within the browser?\nYes, we've enabled CORS support in the SKY API. We allow all origins (*), support the GET, PUT, POST, PATCH, and DELETE methods, and allow Bb-Api-Subscription-Key, authorization, accept, and content-type request headers.\nTokens\nWhen do my tokens expire?\nDuring the initial user-interactive authorization process, the authorization code sent to your application will expire in 5 minutes, which means you have a very short window of time in which to exchange the authorization code for an access token.\nAccess tokens will expire in 60 minutes, after which you can use the refresh token to obtain a new access token (and a new refresh token). For the Authorization Code Flow, refreshing an access token does not involve any user interaction, so your application can have indefinite connectivity to the SKY API once the user provides consent. Refresh tokens are longer-lived values that will eventually expire in 60 days, using a sliding window model. As long as your application connects at least once to the SKY API within the window, it will be able to retain connectivity to the customer's data.\nSee Token Expiration.\nMay I store access tokens in my application's database?\nYes, you may store access tokens and refresh tokens within your app, associated with your app's concept of a user (if applicable). When the user logs in with your application's credentials, you can check to see if you have an access token for that user and adjust your app's experience accordingly. For example, you may immediately route the user through the authorization process in order to obtain an access token, or disable functionality until the user provides consent.\nIf your application doesn't have the notion of user credentials, you can simply direct the user to log in with their Blackbaud credentials when they log into your application. We'll provide you with the user's access token and expiration details as part of the Token response during the authorization code flow.\nIn any case, be sure to store access tokens and refresh tokens securely in your system so that they aren't exposed to the public.\nSubscription keys\nWhat is the purpose of the subscription key?\nThe subscription key is associated with your developer account and must be provided as part of the Bb-Api-Subscription-Key header when calling the SKY API. It represents our permission for you to call the API, and we also use it to enforce usage limits (see Rate limits and Quotas) to ensure that the API performs well for everyone. We also aggregate API call analytics associated with your subscription to show you how your apps are performing within the Analytics area of the portal.\nSee Subscription.\nWhy do I have two subscription keys?\nWhen you obtain a subscription to the SKY API, we'll provide two keys (primary and secondary) that you can use when calling the API. Both keys are equally functional; we provide two keys to support rotation on your end.\nWe don't require you to rotate your subscription keys, and you can adopt whatever key rotation schedule and strategy that best fits your needs. If you do need to regenerate your subscription keys, you can do so from your profile.\nImportant! Subscription keys are associated with your developer account, and should NOT be shared with the public since it would allow someone else to impersonate you when calling the SKY API! My app\nHow do I register my application and get an OAuth 2.0 ID and secret?\nYou can register your app in the My Applications area to obtain the unique ID and secret, which will be used during the authorization process to obtain an access token to call the API.\nSee Managing your apps.\nMy application secret may have been compromised, what should I do?\nIf you believe your application's secret has been exposed, you should regenerate the secret and update your application to use the new value when calling the SKY API.\nWhat control does a Blackbaud customer have over my application?\nCustomers always have control over whether or not an application can access their data. An administrator within the customer's organization must first enable your app before any user will be able to use it, and at any time the administrator can remove your application. If that happens, the application will not be able to obtain or refresh any access tokens to use when calling the API.\nIf your application is removed, users will see the following message in the authorization process: “This application has not been approved by your administrator…” See Authorization.\nScopes\nWhat scopes do you support and how do I pass them in my authorization request?\nOAuth 2.0 Scopes are not yet supported within the SKY API. In the future, applications may be able to express intent via scopes but for now API access is always within the context of an authenticated user, which means that API access is limited to the user's security permissions. "
  },
  {
   "layout": "layout-container",
   "name": "Ideas",
   "description": "Provide feedback on how to improve the Blackbaud APIs and developer experience.",
   "order": 200,
   "published": true,
   "showInNav": true,
   "showInHeader": true,
   "showInFooter": true,
   "icon": "fa fa-lightbulb-o",
   "title": "Ideas",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInSearch": true,
   "breadcrumbs": "Support Ideas",
   "abspath": "support/ideas/index.md",
   "uri": "/support/ideas/",
   "text": " Ideas Have feedback on how to improve the SKY API developer experience? Add your idea below, or vote and comment on existing ideas. Your browser does not support iframes. "
  },
  {
   "layout": "layout-sidebar",
   "name": "Issues",
   "description": "Information on additions, removals, and bug fixes of the API.",
   "order": 150,
   "published": true,
   "showInNav": true,
   "icon": "fa fa-file-text-o",
   "back_to_top": true,
   "title": "Issues",
   "sortKey": "order",
   "sortDirection": "asc",
   "showInHeader": true,
   "showInFooter": true,
   "showInSearch": true,
   "breadcrumbs": "Support Issues",
   "abspath": "support/issues/index.md",
   "uri": "/support/issues/",
   "text": " Issues\nIf you find an issue, please contact us.\n2018-06-07\nWe are aware of an issue with the Journal entry batch (GET) endpoint. A timeout occurs when batches with large numbers of journal entries cannot be returned. We are working to resolve this issue and will post an update as soon as it is available.\nResolved\nFor the issue reported on 2018-06-07, we deprecated the Journal entry batch (GET) endpoint and replaced it with the Journal entry batch summary (Get) and Journal entries (List) endpoints. We will continue to support deprecated endpoints for v1 of the General Ledger API, but we recommend transitioning to the new endpoints for a more robust and consistent response.\n2018-05-09\nWe are aware of an issue with the Transaction distribution (List) endpoint returning incorrect account_class information. We are working to resolve this issue and will post an update as soon as it is available.\nResolved\nFor the issue reported on 2018-05-09, distribution account_class information is now correct.\n2018-05-03\nWe are aware of an issue where breaking changes in our API management tool are causing operation ID values in the Swagger document to be replaced with numeric IDs instead of human readable values. This causes problems when creating autogenerated clients from the Swagger document, and we are actively working to resolve the issue. We will soon release a more standard naming convention for operation IDs. 2018-04-26\nWe are aware of a discrepancy in the values being returned by the Address list (Single constituent) and Address list (All constituents) endpoints. We are actively working to resolve this issue and will post an update as soon as it is available. 2017-12-12\nWe are aware of an issue with the new Period summary\nand Period summary list endpoints returning incorrect balances\nfor some accounts.\nResolved\nFor the issue reported on 2017-12-12, incorrect balances have been resolved.\n2017-04-26\nResolved\nFor the issue reported on 2017-04-06, the time zone inconsistencies have been resolved. But note that daylight savings time is not universally applied/respected.\n2017-04-12\nWe are aware of an issue that is affecting a subset of Raiser's Edge NXT customers, that is causing excessive latency for the List endpoints within the Constituent and Gift APIs. We are actively working to resolve the issue, and will post an update as soon as it is available.\nResolved\nFor the issue reported earlier today, the latency issue has been resolved. 2017-04-06\nWe are aware of an issue with the new Appeal list, Campaign list, and Fund list endpoints possibly returning unexpected results with the last_modified parameter due to time zone inconsistencies. We are working to resolve this issue, and will provide an update when it is resolved.\n2017-02-17\nResolved\nFor the issue reported earlier today about the Applications page, the functionality has been restored. 2017-02-17\nWe are aware of an issue on the Control Panel, Applications page in SKY API enabled Blackbaud products. The Applications page does not load. Previous applications you authorized do not appear. While they have not been deleted, during this time you may get an error message that your application doesn’t have access to any SKY API enabled Blackbaud products. API calls, however, are not impacted. We are working to resolve this issue as soon as possible, and will provide an update when functionality has been restored. 2016-11-14\nResolved\nFor the issue reported on 2016-10-20, the behavior of the attributes has been addressed so that they no longer fail to populate on returned address entities.\n2016-10-21\nService Resolved\nFor the issue reported earlier on 2016-10-21, the availability of the API has been restored.\nWe are aware of an issue that is currently disrupting the availability of the API. The disruption is related to a massive East Coast outage caused by a denial of service attack that is severely degrading Internet services. We are working with one of our DNS providers to restore service and will post another update when we have more information. 2016-10-20\nWe are aware of an issue with the new Address (List) where the formatted_address and inactive attributes are not populated on the returned address entities. We are addressing this issue and will post an update when we fix it.\n2016-10-17\nService Resolved\nFor the intermittent issue reported on 2016-10-15, service has been restored as of Monday, October 17th, 2016 at 9:30 AM EDT (1:30 PM UTC).\n2016-10-15\nWe are aware of an intermittent issue affecting a subset of Raiser's Edge NXT tenants, whereby Constituent API requests result in exceedingly long response times or timeouts. We are researching the issue and will post another update soon when we have more information.\n2016-08-01\nResolved: Firefox Hangs on Authorization\nThe issue has been resolved as of Monday, August 1st, 2016 at 3:20 PM EDT (7:20 PM UTC).\n2016-07-29\nFirefox Hangs on Authorization\nFirefox hangs when loading the SKY API OAuth 2.0 Authorization endpoint https://oauth2.apim.blackbaud.com/authorization.\nWe are currently researching the issue. Stay tuned for details.\n2016-04-22\nSKY API Console autofill bug\nOn specific SKY API Console pages that display an operation which contains either a query parameter or header data entry field before the Bb-Api-Subscription-Key control, Chrome mistakenly treats the Bb-Api-Subscription-Key control as a password. As a result Chrome treats the page as a login page. If the developer elects to save their a user name and password when prompted, Chrome incorrectly auto-fills the page the next time the page loads : Workaround steps Open Settings in Chrome\nClick the Show advanced settings link at the bottom of the Settings page.\nWithin the Passwords and forms section, click Manage passwords.\nDelete any mistakenly saved passwords for developer.sky.blackbaud.com. 2016-04-04\nResolved: My Applications page not displaying within Microsoft Edge browsers\nThe issue has been resolved as of Monday, April 4, 2016 at 8:00 AM EDT (Monday, April 4, 2016 at 12:00 PM UTC).\n2016-03-15\nMy Applications page not displaying within Microsoft Edge browsers\nWe have noticed an issue with the My Applications page not displaying within Microsoft Edge browsers. We are currently researching the issue. Stay tuned for details. In the meantime, we recommend using other browsers for managing your applications. "
  }
 ]
}